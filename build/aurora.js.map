{
  "version": 3,
  "sources": [
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/browser.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/asset.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/aurora.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/aurora_base.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/core/base.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/core/bitstream.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/core/buffer.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/core/bufferlist.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/core/events.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/core/stream.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/core/underflow.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoder.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/cce.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/cpe.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/fft.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/filter_bank.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/huffman.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/ics.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/index.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/mdct.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/mdct_tables.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/tables.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/aac/tns.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/lpcm.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/decoders/xlaw.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/demuxer.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/demuxers/adts.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/demuxers/aiff.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/demuxers/au.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/demuxers/caf.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/demuxers/m4a.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/demuxers/wave.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/device.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/devices/mozilla.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/devices/resampler.js",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/devices/webaudio.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/filter.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/filters/balance.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/filters/volume.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/player.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/queue.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/sources/browser/file.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/sources/browser/http.coffee",
    "/Users/gary/Dropbox/Dev/web/vm5/aurora.js/src/sources/buffer.coffee"
  ],
  "names": [],
  "mappings": "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;AAAA,EAkEA,MAAA,GAAS,EAlET,CAAA;;AAAA,EAmEA,OAAC,CAAA,QAAD,GAAW,SAAC,EAAD,EAAK,OAAL,GAAA;WACP,MAAO,CAAA,EAAA,CAAP,GAAa,QADN;EAAA,CAnEX,CAAA;;AAAA,EAsEA,OAAC,CAAA,IAAD,GAAO,SAAC,EAAD,GAAA;AACH,WAAO,MAAO,CAAA,EAAA,CAAP,IAAc,IAArB,CADG;EAAA,CAtEP,CAAA;;iBAAA;;GADkB,aANtB,CAAA;;AAAA,MAgFM,CAAC,OAAP,GAAiB,OAhFjjlr9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9UA;AAAA;;;;;;;;;;;;;;;;;;GAAA;AAAA,IAAA,yGAAA;EAAA;iSAAA;;AAAA,WAoBA,GAAc,OAAA,CAAQ,qBAAR,CApBd,CAAA;;AAAA,OAqBA,GAAc,OAAA,CAAQ,eAAR,CArBd,CAAA;;AAAA,SAsBA,GAAc,OAAA,CAAQ,sBAAR,CAtBd,CAAA;;AAAA,MAuBA,GAAc,OAAA,CAAQ,mBAAR,CAvBd,CAAA;;AAAA,QAwBA,GAAc,OAAA,CAAQ,OAAR,CAxBd,CAAA;;AAAA,UAyBA,GAAc,OAAA,CAAQ,OAAR,CAzBd,CAAA;;AAAA,UA0BA,GAAc,OAAA,CAAQ,OAAR,CA1Bd,CAAA;;AAAA,UA2BA,GAAc,OAAA,CAAQ,eAAR,CA3Bd,CAAA;;AAAA,M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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "for key, val of require './src/aurora'\n  exports[key] = val\n  \nrequire './src/devices/webaudio'\nrequire './src/devices/mozilla'\n",
    "#\n# The Asset class is responsible for managing all aspects of the \n# decoding pipeline from source to decoder.  You can use the Asset\n# class to inspect information about an audio file, such as its \n# format, metadata, and duration, as well as actually decode the\n# file to linear PCM raw audio data.\n#\n\nEventEmitter = require './core/events'\nHTTPSource   = require './sources/node/http'\nFileSource   = require './sources/node/file'\nBufferSource = require './sources/buffer'\nDemuxer      = require './demuxer'\nDecoder      = require './decoder'\n\nclass Asset extends EventEmitter\n    constructor: (@source) ->\n        @buffered = 0\n        @duration = null\n        @format = null\n        @metadata = null\n        @active = false\n        @demuxer = null\n        @decoder = null\n                \n        @source.once 'data', @probe\n        @source.on 'error', (err) =>\n            @emit 'error', err\n            @stop()\n            \n        @source.on 'progress', (@buffered) =>\n            @emit 'buffer', @buffered\n            \n    @fromURL: (url) ->\n        return new Asset new HTTPSource(url)\n\n    @fromFile: (file) ->\n        return new Asset new FileSource(file)\n        \n    @fromBuffer: (buffer) ->\n        return new Asset new BufferSource(buffer)\n        \n    start: (decode) ->\n        return if @active\n        \n        @shouldDecode = decode if decode?\n        @shouldDecode ?= true\n        \n        @active = true\n        @source.start()\n        \n        if @decoder and @shouldDecode\n            @_decode()\n        \n    stop: ->\n        return unless @active\n        \n        @active = false\n        @source.pause()\n        \n    get: (event, callback) ->\n        return unless event in ['format', 'duration', 'metadata']\n        \n        if this[event]?\n            callback(this[event])\n        else\n            @once event, (value) =>\n                @stop()\n                callback(value)\n            \n            @start()\n            \n    decodePacket: ->\n        @decoder.decode()\n        \n    decodeToBuffer: (callback) ->\n        length = 0\n        chunks = []\n        @on 'data', dataHandler = (chunk) ->\n            length += chunk.length\n            chunks.push chunk\n            \n        @once 'end', ->\n            buf = new Float32Array(length)\n            offset = 0\n            \n            for chunk in chunks\n                buf.set(chunk, offset)\n                offset += chunk.length\n                \n            @off 'data', dataHandler\n            callback(buf)\n            \n        @start()\n    \n    probe: (chunk) =>\n        return unless @active\n        \n        demuxer = Demuxer.find(chunk)\n        if not demuxer\n            return @emit 'error', 'A demuxer for this container was not found.'\n            \n        @demuxer = new demuxer(@source, chunk)\n        @demuxer.on 'format', @findDecoder\n        \n        @demuxer.on 'duration', (@duration) =>\n            @emit 'duration', @duration\n            \n        @demuxer.on 'metadata', (@metadata) =>\n            @emit 'metadata', @metadata\n            \n        @demuxer.on 'error', (err) =>\n            @emit 'error', err\n            @stop()\n\n    findDecoder: (@format) =>\n        return unless @active\n        \n        @emit 'format', @format\n        \n        decoder = Decoder.find(@format.formatID)\n        if not decoder\n            return @emit 'error', \"A decoder for #{@format.formatID} was not found.\"\n\n        @decoder = new decoder(@demuxer, @format)\n        \n        if @format.floatingPoint\n            @decoder.on 'data', (buffer) =>\n                @emit 'data', buffer\n        else\n            div = Math.pow(2, @format.bitsPerChannel - 1)\n            @decoder.on 'data', (buffer) =>\n                buf = new Float32Array(buffer.length)\n                for sample, i in buffer\n                    buf[i] = sample / div\n                    \n                @emit 'data', buf\n            \n        @decoder.on 'error', (err) =>\n            @emit 'error', err\n            @stop()\n            \n        @decoder.on 'end', =>\n            @emit 'end'\n            \n        @emit 'decodeStart'\n        @_decode() if @shouldDecode\n        \n    _decode: =>\n        continue while @decoder.decode() and @active\n        @decoder.once 'data', @_decode if @active\n        \nmodule.exports = Asset\n",
    "for key, val of require './aurora_base'\n    exports[key] = val\n\nrequire './demuxers/caf'\nrequire './demuxers/m4a'\nrequire './demuxers/aiff'\nrequire './demuxers/wave'\nrequire './demuxers/au'\nrequire './demuxers/adts'\n\nrequire './decoders/lpcm'\nrequire './decoders/xlaw'\nrequire './decoders/aac'",
    "exports.Base = require './core/base'\nexports.Buffer = require './core/buffer'\nexports.BufferList = require './core/bufferlist'\nexports.Stream = require './core/stream'\nexports.Bitstream = require './core/bitstream'\nexports.EventEmitter = require './core/events'\nexports.UnderflowError = require './core/underflow'\n\n# browserify will replace these with the browser versions\nexports.HTTPSource = require './sources/node/http'\nexports.FileSource = require './sources/node/file'\nexports.BufferSource = require './sources/buffer'\n\nexports.Demuxer = require './demuxer'\nexports.Decoder = require './decoder'\nexports.AudioDevice = require './device'\nexports.Asset = require './asset'\nexports.Player = require './player'\n\nexports.Filter = require './filter'\nexports.VolumeFilter = require './filters/volume'\nexports.BalanceFilter = require './filters/balance'\n",
    "#\n# The Base class defines an extend method so that\n# CoffeeScript classes can be extended easily by \n# plain JavaScript. Based on http://ejohn.org/blog/simple-javascript-inheritance/.\n#\n\nclass Base\n    fnTest = /\\b_super\\b/\n    \n    @extend: (prop) ->\n        class Class extends this\n            \n        if typeof prop is 'function'\n            keys = Object.keys Class.prototype\n            prop.call(Class, Class)\n            \n            prop = {}\n            for key, fn of Class.prototype when key not in keys\n                prop[key] = fn\n        \n        _super = Class.__super__\n        \n        for key, fn of prop\n            # test whether the method actually uses _super() and wrap it if so\n            if typeof fn is 'function' and fnTest.test(fn)\n                do (key, fn) ->\n                    Class::[key] = ->\n                        tmp = this._super\n                        this._super = _super[key]\n                        \n                        ret = fn.apply(this, arguments)\n                        this._super = tmp\n                        \n                        return ret\n                        \n            else\n                Class::[key] = fn\n                \n        return Class\n        \nmodule.exports = Base\n",
    "class Bitstream\n    constructor: (@stream) ->\n        @bitPosition = 0\n\n    copy: ->\n        result = new Bitstream @stream.copy()\n        result.bitPosition = @bitPosition\n        return result\n\n    offset: -> # Should be a property\n        return 8 * @stream.offset + @bitPosition\n\n    available: (bits) ->\n        return @stream.available((bits + 8 - @bitPosition) / 8)\n\n    advance: (bits) ->\n        pos = @bitPosition + bits\n        @stream.advance(pos >> 3)\n        @bitPosition = pos & 7\n        \n    rewind: (bits) ->\n        pos = @bitPosition - bits\n        @stream.rewind(Math.abs(pos >> 3))\n        @bitPosition = pos & 7\n        \n    seek: (offset) ->\n        curOffset = @offset()\n        \n        if offset > curOffset\n            @advance offset - curOffset \n            \n        else if offset < curOffset \n            @rewind curOffset - offset\n\n    align: ->\n        unless @bitPosition is 0\n            @bitPosition = 0\n            @stream.advance(1)\n        \n    read: (bits, signed) ->\n        return 0 if bits is 0\n        \n        mBits = bits + @bitPosition\n        if mBits <= 8\n            a = ((@stream.peekUInt8() << @bitPosition) & 0xff) >>> (8 - bits)\n\n        else if mBits <= 16\n            a = ((@stream.peekUInt16() << @bitPosition) & 0xffff) >>> (16 - bits)\n\n        else if mBits <= 24\n            a = ((@stream.peekUInt24() << @bitPosition) & 0xffffff) >>> (24 - bits)\n\n        else if mBits <= 32\n            a = (@stream.peekUInt32() << @bitPosition) >>> (32 - bits)\n\n        else if mBits <= 40\n            a0 = @stream.peekUInt8(0) * 0x0100000000 # same as a << 32\n            a1 = @stream.peekUInt8(1) << 24 >>> 0\n            a2 = @stream.peekUInt8(2) << 16\n            a3 = @stream.peekUInt8(3) << 8\n            a4 = @stream.peekUInt8(4)\n\n            a = a0 + a1 + a2 + a3 + a4\n            a %= Math.pow(2, 40 - @bitPosition)                        # (a << bitPosition) & 0xffffffffff\n            a = Math.floor(a / Math.pow(2, 40 - @bitPosition - bits))  # a >>> (40 - bits)\n\n        else\n            throw new Error \"Too many bits!\"\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        @advance bits\n        return a\n        \n    peek: (bits, signed) ->\n        return 0 if bits is 0\n        \n        mBits = bits + @bitPosition\n        if mBits <= 8\n            a = ((@stream.peekUInt8() << @bitPosition) & 0xff) >>> (8 - bits)\n\n        else if mBits <= 16\n            a = ((@stream.peekUInt16() << @bitPosition) & 0xffff) >>> (16 - bits)\n\n        else if mBits <= 24\n            a = ((@stream.peekUInt24() << @bitPosition) & 0xffffff) >>> (24 - bits)\n\n        else if mBits <= 32\n            a = (@stream.peekUInt32() << @bitPosition) >>> (32 - bits)\n\n        else if mBits <= 40\n            a0 = @stream.peekUInt8(0) * 0x0100000000 # same as a << 32\n            a1 = @stream.peekUInt8(1) << 24 >>> 0\n            a2 = @stream.peekUInt8(2) << 16\n            a3 = @stream.peekUInt8(3) << 8\n            a4 = @stream.peekUInt8(4)\n\n            a = a0 + a1 + a2 + a3 + a4\n            a %= Math.pow(2, 40 - @bitPosition)                        # (a << bitPosition) & 0xffffffffff\n            a = Math.floor(a / Math.pow(2, 40 - @bitPosition - bits))  # a >>> (40 - bits)\n\n        else\n            throw new Error \"Too many bits!\"\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        return a\n\n    readLSB: (bits, signed) ->\n        return 0 if bits is 0\n        if bits > 40\n            throw new Error \"Too many bits!\"\n\n        mBits = bits + @bitPosition\n        a  = (@stream.peekUInt8(0)) >>> @bitPosition\n        a |= (@stream.peekUInt8(1)) << (8  - @bitPosition) if mBits > 8\n        a |= (@stream.peekUInt8(2)) << (16 - @bitPosition) if mBits > 16\n        a += (@stream.peekUInt8(3)) << (24 - @bitPosition) >>> 0 if mBits > 24            \n        a += (@stream.peekUInt8(4)) * Math.pow(2, 32 - @bitPosition) if mBits > 32\n\n        if mBits >= 32\n            a %= Math.pow(2, bits)\n        else\n            a &= (1 << bits) - 1\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        @advance bits\n        return a\n        \n    peekLSB: (bits, signed) ->\n        return 0 if bits is 0\n        if bits > 40\n            throw new Error \"Too many bits!\"\n\n        mBits = bits + @bitPosition\n        a  = (@stream.peekUInt8(0)) >>> @bitPosition\n        a |= (@stream.peekUInt8(1)) << (8  - @bitPosition) if mBits > 8\n        a |= (@stream.peekUInt8(2)) << (16 - @bitPosition) if mBits > 16\n        a += (@stream.peekUInt8(3)) << (24 - @bitPosition) >>> 0 if mBits > 24            \n        a += (@stream.peekUInt8(4)) * Math.pow(2, 32 - @bitPosition) if mBits > 32\n        \n        if mBits >= 32\n            a %= Math.pow(2, bits)\n        else\n            a &= (1 << bits) - 1\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        return a\n        \nmodule.exports = Bitstream\n",
    "class AVBuffer\n    constructor: (input) ->\n        if input instanceof Uint8Array                  # Uint8Array\n            @data = input\n            \n        else if input instanceof ArrayBuffer or         # ArrayBuffer\n          Array.isArray(input) or                       # normal JS Array\n          typeof input is 'number' or                   # number (i.e. length)\n          global.Buffer?.isBuffer(input)                # Node Buffer\n            @data = new Uint8Array(input)\n            \n        else if input.buffer instanceof ArrayBuffer     # typed arrays other than Uint8Array\n            @data = new Uint8Array(input.buffer, input.byteOffset, input.length * input.BYTES_PER_ELEMENT)\n            \n        else if input instanceof AVBuffer               # AVBuffer, make a shallow copy\n            @data = input.data\n                        \n        else\n            throw new Error \"Constructing buffer with unknown type.\"\n        \n        @length = @data.length\n        \n        # used when the buffer is part of a bufferlist\n        @next = null\n        @prev = null\n    \n    @allocate: (size) ->\n        return new AVBuffer(size)\n    \n    copy: ->\n        return new AVBuffer(new Uint8Array(@data))\n    \n    slice: (position, length = @length) ->\n        if position is 0 and length >= @length\n            return new AVBuffer(@data)\n        else\n            return new AVBuffer(@data.subarray(position, position + length))\n    \n    # prefix-free\n    BlobBuilder = global.BlobBuilder or global.MozBlobBuilder or global.WebKitBlobBuilder\n    URL = global.URL or global.webkitURL or global.mozURL\n    \n    @makeBlob: (data, type = 'application/octet-stream') ->\n        # try the Blob constructor\n        try \n            return new Blob [data], type: type\n        \n        # use the old BlobBuilder\n        if BlobBuilder?\n            bb = new BlobBuilder\n            bb.append data\n            return bb.getBlob(type)\n            \n        # oops, no blobs supported :(\n        return null\n        \n    @makeBlobURL: (data, type) ->\n        return URL?.createObjectURL @makeBlob(data, type)\n        \n    @revokeBlobURL: (url) ->\n        URL?.revokeObjectURL url\n    \n    toBlob: ->\n        return AVBuffer.makeBlob @data.buffer\n        \n    toBlobURL: ->\n        return AVBuffer.makeBlobURL @data.buffer\n        \nmodule.exports = AVBuffer\n",
    "class BufferList\n    constructor: ->\n        @first = null\n        @last = null\n        @numBuffers = 0\n        @availableBytes = 0\n        @availableBuffers = 0        \n    \n    copy: ->\n        result = new BufferList\n\n        result.first = @first\n        result.last = @last\n        result.numBuffers = @numBuffers\n        result.availableBytes = @availableBytes\n        result.availableBuffers = @availableBuffers\n        \n        return result\n        \n    append: (buffer) ->\n        buffer.prev = @last\n        @last?.next = buffer\n        @last = buffer\n        @first ?= buffer\n        \n        @availableBytes += buffer.length\n        @availableBuffers++\n        @numBuffers++\n        \n    advance: ->\n        if @first\n            @availableBytes -= @first.length\n            @availableBuffers--\n            @first = @first.next\n            return @first?\n            \n        return false\n        \n    rewind: ->\n        if @first and not @first.prev\n            return false\n        \n        @first = @first?.prev or @last\n        if @first\n            @availableBytes += @first.length\n            @availableBuffers++\n            \n        return @first?\n        \n    reset: ->\n        continue while @rewind()\n        \nmodule.exports = BufferList\n",
    "Base = require './base'\n\nclass EventEmitter extends Base\n    on: (event, fn) ->\n        @events ?= {}\n        @events[event] ?= []\n        @events[event].push(fn)\n        \n    off: (event, fn) ->\n        return unless @events?[event]\n        index = @events[event].indexOf(fn)\n        @events[event].splice(index, 1) if ~index\n        \n    once: (event, fn) ->\n        @on event, cb = ->\n            @off event, cb\n            fn.apply(this, arguments)\n        \n    emit: (event, args...) ->\n        return unless @events?[event]\n        \n        # shallow clone with .slice() so that removing a handler\n        # while event is firing (as in once) doesn't cause errors\n        for fn in @events[event].slice()\n            fn.apply(this, args)\n            \n        return\n        \nmodule.exports = EventEmitter\n",
    "BufferList = require './bufferlist'\nAVBuffer = require './buffer'\nUnderflowError = require './underflow'\n\nclass Stream\n    buf = new ArrayBuffer(16)\n    uint8 = new Uint8Array(buf)\n    int8 = new Int8Array(buf)\n    uint16 = new Uint16Array(buf)\n    int16 = new Int16Array(buf)\n    uint32 = new Uint32Array(buf)\n    int32 = new Int32Array(buf)\n    float32 = new Float32Array(buf)\n    float64 = new Float64Array(buf) if Float64Array?\n    \n    # detect the native endianness of the machine\n    # 0x3412 is little endian, 0x1234 is big endian\n    nativeEndian = new Uint16Array(new Uint8Array([0x12, 0x34]).buffer)[0] is 0x3412\n        \n    constructor: (@list) ->\n        @localOffset = 0\n        @offset = 0\n        \n    @fromBuffer: (buffer) ->\n        list = new BufferList\n        list.append(buffer)\n        return new Stream(list)\n    \n    copy: ->\n        result = new Stream(@list.copy())\n        result.localOffset = @localOffset\n        result.offset = @offset\n        return result\n    \n    available: (bytes) ->\n        return bytes <= @list.availableBytes - @localOffset\n        \n    remainingBytes: ->\n        return @list.availableBytes - @localOffset\n    \n    advance: (bytes) ->\n        if not @available bytes\n            throw new UnderflowError()\n        \n        @localOffset += bytes\n        @offset += bytes\n        \n        while @list.first and @localOffset >= @list.first.length\n            @localOffset -= @list.first.length\n            @list.advance()\n        \n        return this\n        \n    rewind: (bytes) ->\n        if bytes > @offset\n            throw new UnderflowError()\n        \n        # if we're at the end of the bufferlist, seek from the end\n        if not @list.first\n            @list.rewind()\n            @localOffset = @list.first.length\n            \n        @localOffset -= bytes\n        @offset -= bytes\n        \n        while @list.first.prev and @localOffset < 0\n            @list.rewind()\n            @localOffset += @list.first.length\n            \n        return this\n        \n    seek: (position) ->\n        if position > @offset\n            @advance position - @offset\n            \n        else if position < @offset\n            @rewind @offset - position\n        \n    readUInt8: ->\n        if not @available(1)\n            throw new UnderflowError()\n        \n        a = @list.first.data[@localOffset]\n        @localOffset += 1\n        @offset += 1\n\n        if @localOffset == @list.first.length\n            @localOffset = 0\n            @list.advance()\n\n        return a\n\n    peekUInt8: (offset = 0) ->\n        if not @available(offset + 1)\n            throw new UnderflowError()\n        \n        offset = @localOffset + offset\n        buffer = @list.first\n\n        while buffer\n            if buffer.length > offset\n                return buffer.data[offset]\n\n            offset -= buffer.length\n            buffer = buffer.next\n\n        return 0\n        \n    read: (bytes, littleEndian = false) ->\n        if littleEndian is nativeEndian\n            for i in [0...bytes] by 1\n                uint8[i] = @readUInt8()\n        else\n            for i in [bytes - 1..0] by -1\n                uint8[i] = @readUInt8()\n        \n        return\n        \n    peek: (bytes, offset, littleEndian = false) ->\n        if littleEndian is nativeEndian\n            for i in [0...bytes] by 1\n                uint8[i] = @peekUInt8(offset + i)\n        else\n            for i in [0...bytes] by 1\n                uint8[bytes - i - 1] = @peekUInt8(offset + i)\n                \n        return\n        \n    readInt8: ->\n        @read(1)\n        return int8[0]\n\n    peekInt8: (offset = 0) ->\n        @peek(1, offset)\n        return int8[0]\n        \n    readUInt16: (littleEndian) ->\n        @read(2, littleEndian)\n        return uint16[0]\n\n    peekUInt16: (offset = 0, littleEndian) ->\n        @peek(2, offset, littleEndian)\n        return uint16[0]\n\n    readInt16: (littleEndian) ->\n        @read(2, littleEndian)\n        return int16[0]\n\n    peekInt16: (offset = 0, littleEndian) ->\n        @peek(2, offset, littleEndian)\n        return int16[0]\n        \n    readUInt24: (littleEndian) ->\n        if littleEndian\n            return @readUInt16(true) + (@readUInt8() << 16)\n        else\n            return (@readUInt16() << 8) + @readUInt8()\n\n    peekUInt24: (offset = 0, littleEndian) ->\n        if littleEndian\n            return @peekUInt16(offset, true) + (@peekUInt8(offset + 2) << 16)\n        else\n            return (@peekUInt16(offset) << 8) + @peekUInt8(offset + 2)\n\n    readInt24: (littleEndian) ->\n        if littleEndian\n            return @readUInt16(true) + (@readInt8() << 16)\n        else\n            return (@readInt16() << 8) + @readUInt8()\n\n    peekInt24: (offset = 0, littleEndian) ->\n        if littleEndian\n            return @peekUInt16(offset, true) + (@peekInt8(offset + 2) << 16)\n        else\n            return (@peekInt16(offset) << 8) + @peekUInt8(offset + 2)\n    \n    readUInt32: (littleEndian) ->\n        @read(4, littleEndian)\n        return uint32[0]\n    \n    peekUInt32: (offset = 0, littleEndian) ->\n        @peek(4, offset, littleEndian)\n        return uint32[0]\n    \n    readInt32: (littleEndian) ->\n        @read(4, littleEndian)\n        return int32[0]\n    \n    peekInt32: (offset = 0, littleEndian) ->\n        @peek(4, offset, littleEndian)\n        return int32[0]\n        \n    readFloat32: (littleEndian) ->\n        @read(4, littleEndian)\n        return float32[0]\n        \n    peekFloat32: (offset = 0, littleEndian) ->\n        @peek(4, offset, littleEndian)\n        return float32[0]\n    \n    readFloat64: (littleEndian) ->\n        @read(8, littleEndian)\n        \n        # use Float64Array if available\n        if float64\n            return float64[0]\n        else\n            return float64Fallback()\n            \n    float64Fallback = ->\n        [low, high] = uint32\n        return 0.0 if not high or high is 0x80000000\n\n        sign = 1 - (high >>> 31) * 2 # +1 or -1\n        exp = (high >>> 20) & 0x7ff\n        frac = high & 0xfffff\n\n        # NaN or Infinity\n        if exp is 0x7ff\n            return NaN if frac\n            return sign * Infinity\n\n        exp -= 1023\n        out = (frac | 0x100000) * Math.pow(2, exp - 20)\n        out += low * Math.pow(2, exp - 52)\n\n        return sign * out\n            \n    peekFloat64: (offset = 0, littleEndian) ->\n        @peek(8, offset, littleEndian)\n        \n        # use Float64Array if available\n        if float64\n            return float64[0]\n        else\n            return float64Fallback()\n        \n    # IEEE 80 bit extended float\n    readFloat80: (littleEndian) ->\n        @read(10, littleEndian)\n        return float80()\n        \n    float80 = ->\n        [high, low] = uint32\n        a0 = uint8[9]\n        a1 = uint8[8]\n        \n        sign = 1 - (a0 >>> 7) * 2 # -1 or +1\n        exp = ((a0 & 0x7F) << 8) | a1\n        \n        if exp is 0 and low is 0 and high is 0\n            return 0\n            \n        if exp is 0x7fff\n            if low is 0 and high is 0\n                return sign * Infinity\n                \n            return NaN\n        \n        exp -= 16383\n        out = low * Math.pow(2, exp - 31)\n        out += high * Math.pow(2, exp - 63)\n        \n        return sign * out\n        \n    peekFloat80: (offset = 0, littleEndian) ->\n        @peek(10, offset, littleEndian)\n        return float80()\n        \n    readBuffer: (length) ->\n        result = AVBuffer.allocate(length)\n        to = result.data\n\n        for i in [0...length] by 1\n            to[i] = @readUInt8()\n\n        return result\n\n    peekBuffer: (offset = 0, length) ->\n        result = AVBuffer.allocate(length)\n        to = result.data\n\n        for i in [0...length] by 1\n            to[i] = @peekUInt8(offset + i)\n\n        return result\n\n    readSingleBuffer: (length) ->\n        result = @list.first.slice(@localOffset, length)\n        @advance(result.length)\n        return result\n\n    peekSingleBuffer: (offset, length) ->\n        result = @list.first.slice(@localOffset + offset, length)\n        return result\n    \n    readString: (length, encoding = 'ascii') ->\n        return decodeString.call this, 0, length, encoding, true\n\n    peekString: (offset = 0, length, encoding = 'ascii') ->\n        return decodeString.call this, offset, length, encoding, false\n\n    decodeString = (offset, length, encoding, advance) ->\n        encoding = encoding.toLowerCase()\n        nullEnd = if length is null then 0 else -1\n\n        length = Infinity if not length?\n        end = offset + length\n        result = ''\n\n        switch encoding\n            when 'ascii', 'latin1'\n                while offset < end and (c = @peekUInt8(offset++)) isnt nullEnd\n                    result += String.fromCharCode(c)\n\n            when 'utf8', 'utf-8'\n                while offset < end and (b1 = @peekUInt8(offset++)) isnt nullEnd\n                    if (b1 & 0x80) is 0\n                        result += String.fromCharCode b1\n\n                    # one continuation (128 to 2047)\n                    else if (b1 & 0xe0) is 0xc0\n                        b2 = @peekUInt8(offset++) & 0x3f\n                        result += String.fromCharCode ((b1 & 0x1f) << 6) | b2\n\n                    # two continuation (2048 to 55295 and 57344 to 65535)\n                    else if (b1 & 0xf0) is 0xe0\n                        b2 = @peekUInt8(offset++) & 0x3f\n                        b3 = @peekUInt8(offset++) & 0x3f\n                        result += String.fromCharCode ((b1 & 0x0f) << 12) | (b2 << 6) | b3\n\n                    # three continuation (65536 to 1114111)\n                    else if (b1 & 0xf8) is 0xf0\n                        b2 = @peekUInt8(offset++) & 0x3f\n                        b3 = @peekUInt8(offset++) & 0x3f\n                        b4 = @peekUInt8(offset++) & 0x3f\n\n                        # split into a surrogate pair\n                        pt = (((b1 & 0x0f) << 18) | (b2 << 12) | (b3 << 6) | b4) - 0x10000\n                        result += String.fromCharCode 0xd800 + (pt >> 10), 0xdc00 + (pt & 0x3ff)\n\n            when 'utf16-be', 'utf16be', 'utf16le', 'utf16-le', 'utf16bom', 'utf16-bom'\n                # find endianness\n                switch encoding\n                    when 'utf16be', 'utf16-be'\n                        littleEndian = false\n\n                    when 'utf16le', 'utf16-le'\n                        littleEndian = true\n\n                    when 'utf16bom', 'utf16-bom'\n                        if length < 2 or (bom = @peekUInt16(offset)) is nullEnd\n                            @advance offset += 2 if advance\n                            return result\n\n                        littleEndian = (bom is 0xfffe)\n                        offset += 2\n\n                while offset < end and (w1 = @peekUInt16(offset, littleEndian)) isnt nullEnd\n                    offset += 2\n\n                    if w1 < 0xd800 or w1 > 0xdfff\n                        result += String.fromCharCode(w1)\n\n                    else\n                        if w1 > 0xdbff\n                            throw new Error \"Invalid utf16 sequence.\"\n\n                        w2 = @peekUInt16(offset, littleEndian)\n                        if w2 < 0xdc00 or w2 > 0xdfff\n                            throw new Error \"Invalid utf16 sequence.\"\n\n                        result += String.fromCharCode(w1, w2)\n                        offset += 2\n\n                if w1 is nullEnd\n                    offset += 2\n\n            else\n                throw new Error \"Unknown encoding: #{encoding}\"\n\n        @advance offset if advance\n        return result\n        \nmodule.exports = Stream\n",
    "# define an error class to be thrown if an underflow occurs\nclass UnderflowError extends Error\n    constructor: ->\n        super\n        @name = 'UnderflowError'\n        @stack = new Error().stack\n\nmodule.exports = UnderflowError\n",
    "EventEmitter = require './core/events'\nBufferList = require './core/bufferlist'\nStream = require './core/stream'\nBitstream = require './core/bitstream'\nUnderflowError = require './core/underflow'\n\nclass Decoder extends EventEmitter\n    constructor: (@demuxer, @format) ->\n        list = new BufferList\n        @stream = new Stream(list)\n        @bitstream = new Bitstream(@stream)\n        \n        @receivedFinalBuffer = false\n        @waiting = false\n        \n        @demuxer.on 'cookie', (cookie) =>\n            try\n                @setCookie cookie\n            catch error\n                @emit 'error', error\n            \n        @demuxer.on 'data', (chunk) =>\n            list.append chunk\n            @decode() if @waiting\n            \n        @demuxer.on 'end', =>\n            @receivedFinalBuffer = true\n            @decode() if @waiting\n            \n        @init()\n            \n    init: ->\n        return\n            \n    setCookie: (cookie) ->\n        return\n    \n    readChunk: ->\n        return\n        \n    decode: ->\n        @waiting = false\n        offset = @bitstream.offset()\n        \n        try\n            packet = @readChunk()\n        catch error\n            if error not instanceof UnderflowError\n                @emit 'error', error\n                return false\n            \n        # if a packet was successfully read, emit it\n        if packet\n            @emit 'data', packet\n            return true\n            \n        # if we haven't reached the end, jump back and try again when we have more data\n        else if not @receivedFinalBuffer\n            @bitstream.seek offset\n            @waiting = true\n            \n        # otherwise we've reached the end\n        else\n            @emit 'end'\n            \n        return false\n        \n    seek: (timestamp) ->\n        # use the demuxer to get a seek point\n        seekPoint = @demuxer.seek(timestamp)\n        @stream.seek(seekPoint.offset)\n        return seekPoint.timestamp\n    \n    codecs = {}\n    @register: (id, decoder) ->\n        codecs[id] = decoder\n        \n    @find: (id) ->\n        return codecs[id] or null\n        \nmodule.exports = Decoder\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar ICStream = require('./ics');\nvar Huffman = require('./huffman');\n    \n// Channel Coupling Element\nfunction CCEElement(config) {\n    this.ics = new ICStream(config);\n    this.channelPair = new Array(8);\n    this.idSelect = new Int32Array(8);\n    this.chSelect = new Int32Array(8);\n    this.gain = new Array(16);\n}\n\nCCEElement.BEFORE_TNS = 0;\nCCEElement.AFTER_TNS = 1;\nCCEElement.AFTER_IMDCT = 2;\n\nconst CCE_SCALE = new Float32Array([\n    1.09050773266525765921,\n    1.18920711500272106672,\n    1.4142135623730950488016887,\n    2.0\n]);\n\nCCEElement.prototype = {\n    decode: function(stream, config) {\n        var channelPair = this.channelPair,\n            idSelect = this.idSelect,\n            chSelect = this.chSelect;\n\n        this.couplingPoint = 2 * stream.read(1);\n        this.coupledCount = stream.read(3);\n\n        var gainCount = 0;\n        for (var i = 0; i <= this.coupledCount; i++) {\n            gainCount++;\n            channelPair[i] = stream.read(1);\n            idSelect[i] = stream.read(4);\n\n            if (channelPair[i]) {\n                chSelect[i] = stream.read(2);\n                if (chSelect[i] === 3)\n                    gainCount++;\n\n            } else {\n                chSelect[i] = 2;\n            }\n        }\n\n        this.couplingPoint += stream.read(1);\n        this.couplingPoint |= (this.couplingPoint >>> 1);\n\n        var sign = stream.read(1),\n            scale = CCE_SCALE[stream.read(2)];\n\n        this.ics.decode(stream, config, false);\n\n        var groupCount = this.ics.info.groupCount,\n            maxSFB = this.ics.info.maxSFB,\n            bandTypes = this.ics.bandTypes;\n\n        for (var i = 0; i < gainCount; i++) {\n            var idx = 0,\n                cge = 1,\n                gain = 0,\n                gainCache = 1;\n\n            if (i > 0) {\n                cge = this.couplingPoint === CCEElement.AFTER_IMDCT ? 1 : stream.read(1);\n                gain = cge ? Huffman.decodeScaleFactor(stream) - 60 : 0;\n                gainCache = Math.pow(scale, -gain);\n            }\n\n            var gain_i = this.gain[i] = new Float32Array(120);\n\n            if (this.couplingPoint === CCEElement.AFTER_IMDCT) {\n                gain_i[0] = gainCache;\n            } else {\n                for (var g = 0; g < groupCount; g++) {\n                    for (var sfb = 0; sfb < maxSFB; sfb++) {\n                        if (bandTypes[idx] !== ICStream.ZERO_BT) {\n                            if (cge === 0) {\n                                var t = Huffman.decodeScaleFactor(stream) - 60;\n                                if (t !== 0) {\n                                    var s = 1;\n                                    t = gain += t;\n                                    if (sign) {\n                                        s -= 2 * (t * 0x1);\n                                        t >>>= 1;\n                                    }\n                                    gainCache = Math.pow(scale, -t) * s;\n                                }\n                            }\n                            gain_i[idx++] = gainCache;\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n    applyIndependentCoupling: function(index, data) {\n        var gain = this.gain[index][0],\n            iqData = this.ics.data;\n\n        for (var i = 0; i < data.length; i++) {\n            data[i] += gain * iqData[i];\n        }\n    },\n\n    applyDependentCoupling: function(index, data) {\n        var info = this.ics.info,\n            swbOffsets = info.swbOffsets,\n            groupCount = info.groupCount,\n            maxSFB = info.maxSFB,\n            bandTypes = this.ics.bandTypes,\n            iqData = this.ics.data;\n\n        var idx = 0,\n            offset = 0,\n            gains = this.gain[index];\n\n        for (var g = 0; g < groupCount; g++) {\n            var len = info.groupLength[g];\n\n            for (var sfb = 0; sfb < maxSFB; sfb++, idx++) {\n                if (bandTypes[idx] !== ICStream.ZERO_BT) {\n                    var gain = gains[idx];\n                    for (var group = 0; group < len; group++) {\n                        for (var k = swbOffsets[sfb]; k < swbOffsets[swb + 1]; k++) {\n                            data[offset + group * 128 + k] += gain * iqData[offset + group * 128 + k];\n                        }\n                    }\n                }\n            }\n\n            offset += len * 128;\n        }\n    }\n};\n\nmodule.exports = CCEElement;\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar ICStream = require('./ics');\n    \n// Channel Pair Element\nfunction CPEElement(config) {\n    this.ms_used = [];\n    this.left = new ICStream(config);\n    this.right = new ICStream(config);\n}\n\nconst MAX_MS_MASK = 128;\n\nconst MASK_TYPE_ALL_0 = 0,\n      MASK_TYPE_USED = 1,\n      MASK_TYPE_ALL_1 = 2,\n      MASK_TYPE_RESERVED = 3;\n\nCPEElement.prototype.decode = function(stream, config) {\n    var left = this.left,\n        right = this.right,\n        ms_used = this.ms_used;\n        \n    if (this.commonWindow = !!stream.read(1)) {\n        left.info.decode(stream, config, true);\n        right.info = left.info;\n\n        var mask = stream.read(2);\n        this.maskPresent = !!mask;\n        \n        switch (mask) {\n            case MASK_TYPE_USED:\n                var len = left.info.groupCount * left.info.maxSFB;\n                for (var i = 0; i < len; i++) {\n                    ms_used[i] = !!stream.read(1);\n                }\n                break;\n            \n            case MASK_TYPE_ALL_0:    \n            case MASK_TYPE_ALL_1:\n                var val = !!mask;\n                for (var i = 0; i < MAX_MS_MASK; i++) {\n                    ms_used[i] = val;\n                }\n                break;\n                \n            default:\n                throw new Error(\"Reserved ms mask type: \" + mask);\n        }\n    } else {\n        for (var i = 0; i < MAX_MS_MASK; i++)\n            ms_used[i] = false;\n    }\n    \n    left.decode(stream, config, this.commonWindow);\n    right.decode(stream, config, this.commonWindow);\n};\n\nmodule.exports = CPEElement;\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n    \nfunction FFT(length) {\n    this.length = length;\n\n    switch (length) {\n        case 64:\n            this.roots = generateFFTTableShort(64);\n            break;\n\n        case 512:\n            this.roots = generateFFTTableLong(512);\n            break;\n\n        case 60:\n            this.roots = generateFFTTableShort(60);\n            break;\n\n        case 480:\n            this.roots = generateFFTTableLong(480);\n            break;\n\n        default:\n            throw new Error(\"unexpected FFT length: \" + length);\n    }\n\n    // processing buffers\n    this.rev = new Array(length);\n    for (var i = 0; i < length; i++) {\n        this.rev[i] = new Float32Array(2);\n    }\n\n    this.a = new Float32Array(2);\n    this.b = new Float32Array(2);\n    this.c = new Float32Array(2);\n    this.d = new Float32Array(2);     \n    this.e1 = new Float32Array(2);\n    this.e2 = new Float32Array(2);\n}\n\nfunction generateFFTTableShort(len) {\n    var t = 2 * Math.PI / len,\n        cosT = Math.cos(t),\n        sinT = Math.sin(t),\n        f = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        f[i] = new Float32Array(2);\n    }\n\n    f[0][0] = 1;\n    f[0][1] = 0;\n    var lastImag = 0;\n\n    for (var i = 1; i < len; i++) {\n        f[i][0] = f[i - 1][0] * cosT + lastImag * sinT;\n        lastImag = lastImag * cosT - f[i - 1][0] * sinT;\n        f[i][1] = -lastImag;\n    }\n\n    return f;\n}\n\nfunction generateFFTTableLong(len) {\n    var t = 2 * Math.PI / len,\n        cosT = Math.cos(t),\n        sinT = Math.sin(t),\n        f = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        f[i] = new Float32Array(3);\n    }\n\n    f[0][0] = 1;\n    f[0][1] = 0;\n    f[0][2] = 0;\n\n    for (var i = 1; i < len; i++) {\n        f[i][0] = f[i - 1][0] * cosT + f[i - 1][2] * sinT;\n        f[i][2] = f[i - 1][2] * cosT - f[i - 1][0] * sinT;\n        f[i][1] = -f[i][2];\n    }\n\n    return f;\n}\n\nFFT.prototype.process = function(input, forward) {\n    var length = this.length,\n        imOffset = (forward ? 2 : 1),\n        scale = (forward ? length : 1),\n        rev = this.rev,\n        roots = this.roots;\n\n    // bit-reversal\n    var ii = 0;\n    for (var i = 0; i < length; i++) {\n        rev[i][0] = input[ii][0];\n        rev[i][1] = input[ii][1];\n\n        var k = length >>> 1;\n        while (ii >= k && k > 0) {\n            ii -= k;\n            k >>= 1;\n        }\n\n        ii += k;\n    }\n\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e1 = this.e1,\n        e2 = this.e2;\n\n    for (var i = 0; i < length; i++) {\n        input[i][0] = rev[i][0];\n        input[i][1] = rev[i][1];\n    }\n\n    // bottom base-4 round\n    for (var i = 0; i < length; i += 4) {\n        a[0] = input[i][0] + input[i + 1][0];\n        a[1] = input[i][1] + input[i + 1][1];\n        b[0] = input[i + 2][0] + input[i + 3][0];\n        b[1] = input[i + 2][1] + input[i + 3][1];\n        c[0] = input[i][0] - input[i + 1][0];\n        c[1] = input[i][1] - input[i + 1][1];\n        d[0] = input[i + 2][0] - input[i + 3][0];\n        d[1] = input[i + 2][1] - input[i + 3][1];\n        input[i][0] = a[0] + b[0];\n        input[i][1] = a[1] + b[1];\n        input[i + 2][0] = a[0] - b[0];\n        input[i + 2][1] = a[1] - b[1];\n\n        e1[0] = c[0] - d[1];\n        e1[1] = c[1] + d[0];\n        e2[0] = c[0] + d[1];\n        e2[1] = c[1] - d[0];\n\n        if (forward) {\n            input[i + 1][0] = e2[0];\n            input[i + 1][1] = e2[1];\n            input[i + 3][0] = e1[0];\n            input[i + 3][1] = e1[1];\n        } else {\n            input[i + 1][0] = e1[0];\n            input[i + 1][1] = e1[1];\n            input[i + 3][0] = e2[0];\n            input[i + 3][1] = e2[1];\n        }\n    }\n\n    // iterations from bottom to top\n    for (var i = 4; i < length; i <<= 1) {\n        var shift = i << 1,\n            m = length / shift;\n\n        for(var j = 0; j < length; j += shift) {\n            for(var k = 0; k < i; k++) {\n                var km = k * m,\n                    rootRe = roots[km][0],\n                    rootIm = roots[km][imOffset],\n                    zRe = input[i + j + k][0] * rootRe - input[i + j + k][1] * rootIm,\n                    zIm = input[i + j + k][0] * rootIm + input[i + j + k][1] * rootRe;\n\n                input[i + j + k][0] = (input[j + k][0] - zRe) * scale;\n                input[i + j + k][1] = (input[j + k][1] - zIm) * scale;\n                input[j + k][0] = (input[j + k][0] + zRe) * scale;\n                input[j + k][1] = (input[j + k][1] + zIm) * scale;\n            }\n        }\n    }\n};\n\nmodule.exports = FFT;\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar ICStream = require('./ics');\nvar MDCT = require('./mdct');\n  \nfunction FilterBank(smallFrames, channels) {\n    if (smallFrames) {\n        throw new Error(\"WHA?? No small frames allowed.\");\n    }\n\n    this.length = 1024;\n    this.shortLength = 128;\n\n    this.mid = (this.length - this.shortLength) / 2;\n    this.trans = this.shortLength / 2;\n\n    this.mdctShort = new MDCT(this.shortLength * 2);\n    this.mdctLong  = new MDCT(this.length * 2);\n\n    this.overlaps = new Array(channels);\n    for (var i = 0; i < channels; i++) {\n        this.overlaps[i] = new Float32Array(this.length);\n    }\n\n    this.buf = new Float32Array(2 * this.length);\n}\n  \nfunction generateSineWindow(len) {\n    var d = new Float32Array(len);\n    for (var i = 0; i < len; i++) {\n        d[i] = Math.sin((i + 0.5) * (Math.PI / (2.0 * len)))\n    }\n    return d;\n}\n\nfunction generateKBDWindow(alpha, len) {\n    var PIN = Math.PI / len,\n        out = new Float32Array(len),\n        sum = 0,\n        f = new Float32Array(len),\n        alpha2 = (alpha * PIN) * (alpha * PIN);\n\n    for (var n = 0; n < len; n++) {\n        var tmp = n * (len - n) * alpha2,\n            bessel = 1;\n\n        for (var j = 50; j > 0; j--) {\n            bessel = bessel * tmp / (j * j) + 1;\n        }\n\n        sum += bessel;\n        f[n] = sum;\n    }\n\n    sum++;\n    for (var n = 0; n < len; n++) {\n        out[n] = Math.sqrt(f[n] / sum);\n    }\n\n    return out;\n}\n\nconst SINE_1024 = generateSineWindow(1024),\n      SINE_128  = generateSineWindow(128),\n      KBD_1024  = generateKBDWindow(4, 1024),\n      KBD_128   = generateKBDWindow(6, 128),\n      LONG_WINDOWS = [SINE_1024, KBD_1024],\n      SHORT_WINDOWS = [SINE_128, KBD_128];\n\nFilterBank.prototype.process = function(info, input, output, channel) {\n    var overlap = this.overlaps[channel],\n        windowShape = info.windowShape[1],\n        windowShapePrev = info.windowShape[0],\n        longWindows = LONG_WINDOWS[windowShape],\n        shortWindows = SHORT_WINDOWS[windowShape],\n        longWindowsPrev = LONG_WINDOWS[windowShapePrev],\n        shortWindowsPrev = SHORT_WINDOWS[windowShapePrev],\n        length = this.length,\n        shortLen = this.shortLength,\n        mid = this.mid,\n        trans = this.trans,\n        buf = this.buf,\n        mdctLong = this.mdctLong,\n        mdctShort = this.mdctShort;\n\n    switch (info.windowSequence) {\n        case ICStream.ONLY_LONG_SEQUENCE:\n            mdctLong.process(input, 0, buf, 0);\n\n            // add second half output of previous frame to windowed output of current frame\n            for (var i = 0; i < length; i++) {\n                output[i] = overlap[i] + (buf[i] * longWindowsPrev[i]);\n            }\n\n            // window the second half and save as overlap for next frame\n            for (var i = 0; i < length; i++) {\n                overlap[i] = buf[length + i] * longWindows[length - 1 - i];\n            }\n\n            break;\n\n        case ICStream.LONG_START_SEQUENCE:\n            mdctLong.process(input, 0, buf, 0);\n\n            // add second half output of previous frame to windowed output of current frame\n            for (var i = 0; i < length; i++) {\n                output[i] = overlap[i] + (buf[i] * longWindowsPrev[i]);\n            }\n\n            // window the second half and save as overlap for next frame\n            for (var i = 0; i < mid; i++) {\n                overlap[i] = buf[length + i];\n            }\n\n            for (var i = 0; i < shortLen; i++) {\n                overlap[mid + i] = buf[length + mid + i] * shortWindows[shortLen - i - 1];\n            }\n\n            for (var i = 0; i < mid; i++) {\n                overlap[mid + shortLen + i] = 0;\n            }\n\n            break;\n\n        case ICStream.EIGHT_SHORT_SEQUENCE:\n            for (var i = 0; i < 8; i++) {\n                mdctShort.process(input, i * shortLen, buf, 2 * i * shortLen);\n            }\n\n            // add second half output of previous frame to windowed output of current frame\n            for (var i = 0; i < mid; i++) {\n                output[i] = overlap[i];\n            }\n\n            for (var i = 0; i < shortLen; i++) {\n                output[mid + i] = overlap[mid + i] + buf[i] * shortWindowsPrev[i];\n                output[mid + 1 * shortLen + i] = overlap[mid + shortLen * 1 + i] + (buf[shortLen * 1 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 2 + i]  * shortWindows[i]);\n                output[mid + 2 * shortLen + i] = overlap[mid + shortLen * 2 + i] + (buf[shortLen * 3 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 4 + i] * shortWindows[i]);\n                output[mid + 3 * shortLen + i] = overlap[mid + shortLen * 3 + i] + (buf[shortLen * 5 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 6 + i] * shortWindows[i]);\n\n                if (i < trans)\n                    output[mid + 4 * shortLen + i] = overlap[mid + shortLen * 4 + i] + (buf[shortLen * 7 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 8 + i] * shortWindows[i]);\n            }\n\n            // window the second half and save as overlap for next frame\n            for (var i = 0; i < shortLen; i++) {\n                if(i >= trans) \n                    overlap[mid + 4 * shortLen + i - length] = (buf[shortLen * 7 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 8 + i] * shortWindows[i]);\n\n                overlap[mid + 5 * shortLen + i - length] = (buf[shortLen * 9 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 10 + i] * shortWindows[i]);\n                overlap[mid + 6 * shortLen + i - length] = (buf[shortLen * 11 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 12 + i]*shortWindows[i]);\n                overlap[mid + 7 * shortLen + i - length] = (buf[shortLen * 13 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 14 + i]*shortWindows[i]);\n                overlap[mid + 8 * shortLen + i - length] = (buf[shortLen * 15 + i] * shortWindows[shortLen - 1 - i]);\n            }\n\n            for (var i = 0; i < mid; i++) {\n                overlap[mid + shortLen + i] = 0;\n            }\n\n            break;\n\n        case ICStream.LONG_STOP_SEQUENCE:\n            mdctLong.process(input, 0, buf, 0);\n\n            // add second half output of previous frame to windowed output of current frame\n            // construct first half window using padding with 1's and 0's\n            for (var i = 0; i < mid; i++) {\n                output[i] = overlap[i];\n            }\n\n            for (var i = 0; i < shortLen; i++) {\n                output[mid + i] = overlap[mid + i] + (buf[mid + i] * shortWindowsPrev[i]);\n            }\n\n            for (var i = 0; i < mid; i++) {\n                output[mid + shortLen + i] = overlap[mid + shortLen + i] + buf[mid + shortLen + i];\n            }\n\n            // window the second half and save as overlap for next frame\n            for (var i = 0; i < length; i++) {\n                overlap[i] = buf[length + i] * longWindows[length - 1 - i];\n            }\n\n            break;\n    }\n};\n\nmodule.exports = FilterBank;\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n// [bit length, codeword, values...]\nconst HCB1 = [\n    [1, 0, 0, 0, 0, 0],\n    [5, 16, 1, 0, 0, 0],\n    [5, 17, -1, 0, 0, 0],\n    [5, 18, 0, 0, 0, -1],\n    [5, 19, 0, 1, 0, 0],\n    [5, 20, 0, 0, 0, 1],\n    [5, 21, 0, 0, -1, 0],\n    [5, 22, 0, 0, 1, 0],\n    [5, 23, 0, -1, 0, 0],\n    [7, 96, 1, -1, 0, 0],\n    [7, 97, -1, 1, 0, 0],\n    [7, 98, 0, 0, -1, 1],\n    [7, 99, 0, 1, -1, 0],\n    [7, 100, 0, -1, 1, 0],\n    [7, 101, 0, 0, 1, -1],\n    [7, 102, 1, 1, 0, 0],\n    [7, 103, 0, 0, -1, -1],\n    [7, 104, -1, -1, 0, 0],\n    [7, 105, 0, -1, -1, 0],\n    [7, 106, 1, 0, -1, 0],\n    [7, 107, 0, 1, 0, -1],\n    [7, 108, -1, 0, 1, 0],\n    [7, 109, 0, 0, 1, 1],\n    [7, 110, 1, 0, 1, 0],\n    [7, 111, 0, -1, 0, 1],\n    [7, 112, 0, 1, 1, 0],\n    [7, 113, 0, 1, 0, 1],\n    [7, 114, -1, 0, -1, 0],\n    [7, 115, 1, 0, 0, 1],\n    [7, 116, -1, 0, 0, -1],\n    [7, 117, 1, 0, 0, -1],\n    [7, 118, -1, 0, 0, 1],\n    [7, 119, 0, -1, 0, -1],\n    [9, 480, 1, 1, -1, 0],\n    [9, 481, -1, 1, -1, 0],\n    [9, 482, 1, -1, 1, 0],\n    [9, 483, 0, 1, 1, -1],\n    [9, 484, 0, 1, -1, 1],\n    [9, 485, 0, -1, 1, 1],\n    [9, 486, 0, -1, 1, -1],\n    [9, 487, 1, -1, -1, 0],\n    [9, 488, 1, 0, -1, 1],\n    [9, 489, 0, 1, -1, -1],\n    [9, 490, -1, 1, 1, 0],\n    [9, 491, -1, 0, 1, -1],\n    [9, 492, -1, -1, 1, 0],\n    [9, 493, 0, -1, -1, 1],\n    [9, 494, 1, -1, 0, 1],\n    [9, 495, 1, -1, 0, -1],\n    [9, 496, -1, 1, 0, -1],\n    [9, 497, -1, -1, -1, 0],\n    [9, 498, 0, -1, -1, -1],\n    [9, 499, 0, 1, 1, 1],\n    [9, 500, 1, 0, 1, -1],\n    [9, 501, 1, 1, 0, 1],\n    [9, 502, -1, 1, 0, 1],\n    [9, 503, 1, 1, 1, 0],\n    [10, 1008, -1, -1, 0, 1],\n    [10, 1009, -1, 0, -1, -1],\n    [10, 1010, 1, 1, 0, -1],\n    [10, 1011, 1, 0, -1, -1],\n    [10, 1012, -1, 0, -1, 1],\n    [10, 1013, -1, -1, 0, -1],\n    [10, 1014, -1, 0, 1, 1],\n    [10, 1015, 1, 0, 1, 1],\n    [11, 2032, 1, -1, 1, -1],\n    [11, 2033, -1, 1, -1, 1],\n    [11, 2034, -1, 1, 1, -1],\n    [11, 2035, 1, -1, -1, 1],\n    [11, 2036, 1, 1, 1, 1],\n    [11, 2037, -1, -1, 1, 1],\n    [11, 2038, 1, 1, -1, -1],\n    [11, 2039, -1, -1, 1, -1],\n    [11, 2040, -1, -1, -1, -1],\n    [11, 2041, 1, 1, -1, 1],\n    [11, 2042, 1, -1, 1, 1],\n    [11, 2043, -1, 1, 1, 1],\n    [11, 2044, -1, 1, -1, -1],\n    [11, 2045, -1, -1, -1, 1],\n    [11, 2046, 1, -1, -1, -1],\n    [11, 2047, 1, 1, 1, -1]\n];\n\nconst HCB2 = [\n    [3, 0, 0, 0, 0, 0],\n    [4, 2, 1, 0, 0, 0],\n    [5, 6, -1, 0, 0, 0],\n    [5, 7, 0, 0, 0, 1],\n    [5, 8, 0, 0, -1, 0],\n    [5, 9, 0, 0, 0, -1],\n    [5, 10, 0, -1, 0, 0],\n    [5, 11, 0, 0, 1, 0],\n    [5, 12, 0, 1, 0, 0],\n    [6, 26, 0, -1, 1, 0],\n    [6, 27, -1, 1, 0, 0],\n    [6, 28, 0, 1, -1, 0],\n    [6, 29, 0, 0, 1, -1],\n    [6, 30, 0, 1, 0, -1],\n    [6, 31, 0, 0, -1, 1],\n    [6, 32, -1, 0, 0, -1],\n    [6, 33, 1, -1, 0, 0],\n    [6, 34, 1, 0, -1, 0],\n    [6, 35, -1, -1, 0, 0],\n    [6, 36, 0, 0, -1, -1],\n    [6, 37, 1, 0, 1, 0],\n    [6, 38, 1, 0, 0, 1],\n    [6, 39, 0, -1, 0, 1],\n    [6, 40, -1, 0, 1, 0],\n    [6, 41, 0, 1, 0, 1],\n    [6, 42, 0, -1, -1, 0],\n    [6, 43, -1, 0, 0, 1],\n    [6, 44, 0, -1, 0, -1],\n    [6, 45, -1, 0, -1, 0],\n    [6, 46, 1, 1, 0, 0],\n    [6, 47, 0, 1, 1, 0],\n    [6, 48, 0, 0, 1, 1],\n    [6, 49, 1, 0, 0, -1],\n    [7, 100, 0, 1, -1, 1],\n    [7, 101, 1, 0, -1, 1],\n    [7, 102, -1, 1, -1, 0],\n    [7, 103, 0, -1, 1, -1],\n    [7, 104, 1, -1, 1, 0],\n    [7, 105, 1, 1, 0, -1],\n    [7, 106, 1, 0, 1, 1],\n    [7, 107, -1, 1, 1, 0],\n    [7, 108, 0, -1, -1, 1],\n    [7, 109, 1, 1, 1, 0],\n    [7, 110, -1, 0, 1, -1],\n    [7, 111, -1, -1, -1, 0],\n    [7, 112, -1, 0, -1, 1],\n    [7, 113, 1, -1, -1, 0],\n    [7, 114, 1, 1, -1, 0],\n    [8, 230, 1, -1, 0, 1],\n    [8, 231, -1, 1, 0, -1],\n    [8, 232, -1, -1, 1, 0],\n    [8, 233, -1, 0, 1, 1],\n    [8, 234, -1, -1, 0, 1],\n    [8, 235, -1, -1, 0, -1],\n    [8, 236, 0, -1, -1, -1],\n    [8, 237, 1, 0, 1, -1],\n    [8, 238, 1, 0, -1, -1],\n    [8, 239, 0, 1, -1, -1],\n    [8, 240, 0, 1, 1, 1],\n    [8, 241, -1, 1, 0, 1],\n    [8, 242, -1, 0, -1, -1],\n    [8, 243, 0, 1, 1, -1],\n    [8, 244, 1, -1, 0, -1],\n    [8, 245, 0, -1, 1, 1],\n    [8, 246, 1, 1, 0, 1],\n    [8, 247, 1, -1, 1, -1],\n    [8, 248, -1, 1, -1, 1],\n    [9, 498, 1, -1, -1, 1],\n    [9, 499, -1, -1, -1, -1],\n    [9, 500, -1, 1, 1, -1],\n    [9, 501, -1, 1, 1, 1],\n    [9, 502, 1, 1, 1, 1],\n    [9, 503, -1, -1, 1, -1],\n    [9, 504, 1, -1, 1, 1],\n    [9, 505, -1, 1, -1, -1],\n    [9, 506, -1, -1, 1, 1],\n    [9, 507, 1, 1, -1, -1],\n    [9, 508, 1, -1, -1, -1],\n    [9, 509, -1, -1, -1, 1],\n    [9, 510, 1, 1, -1, 1],\n    [9, 511, 1, 1, 1, -1]\n];\n\nconst HCB3 = [\n    [1, 0, 0, 0, 0, 0],\n    [4, 8, 1, 0, 0, 0],\n    [4, 9, 0, 0, 0, 1],\n    [4, 10, 0, 1, 0, 0],\n    [4, 11, 0, 0, 1, 0],\n    [5, 24, 1, 1, 0, 0],\n    [5, 25, 0, 0, 1, 1],\n    [6, 52, 0, 1, 1, 0],\n    [6, 53, 0, 1, 0, 1],\n    [6, 54, 1, 0, 1, 0],\n    [6, 55, 0, 1, 1, 1],\n    [6, 56, 1, 0, 0, 1],\n    [6, 57, 1, 1, 1, 0],\n    [7, 116, 1, 1, 1, 1],\n    [7, 117, 1, 0, 1, 1],\n    [7, 118, 1, 1, 0, 1],\n    [8, 238, 2, 0, 0, 0],\n    [8, 239, 0, 0, 0, 2],\n    [8, 240, 0, 0, 1, 2],\n    [8, 241, 2, 1, 0, 0],\n    [8, 242, 1, 2, 1, 0],\n    [9, 486, 0, 0, 2, 1],\n    [9, 487, 0, 1, 2, 1],\n    [9, 488, 1, 2, 0, 0],\n    [9, 489, 0, 1, 1, 2],\n    [9, 490, 2, 1, 1, 0],\n    [9, 491, 0, 0, 2, 0],\n    [9, 492, 0, 2, 1, 0],\n    [9, 493, 0, 1, 2, 0],\n    [9, 494, 0, 2, 0, 0],\n    [9, 495, 0, 1, 0, 2],\n    [9, 496, 2, 0, 1, 0],\n    [9, 497, 1, 2, 1, 1],\n    [9, 498, 0, 2, 1, 1],\n    [9, 499, 1, 1, 2, 0],\n    [9, 500, 1, 1, 2, 1],\n    [10, 1002, 1, 2, 0, 1],\n    [10, 1003, 1, 0, 2, 0],\n    [10, 1004, 1, 0, 2, 1],\n    [10, 1005, 0, 2, 0, 1],\n    [10, 1006, 2, 1, 1, 1],\n    [10, 1007, 1, 1, 1, 2],\n    [10, 1008, 2, 1, 0, 1],\n    [10, 1009, 1, 0, 1, 2],\n    [10, 1010, 0, 0, 2, 2],\n    [10, 1011, 0, 1, 2, 2],\n    [10, 1012, 2, 2, 1, 0],\n    [10, 1013, 1, 2, 2, 0],\n    [10, 1014, 1, 0, 0, 2],\n    [10, 1015, 2, 0, 0, 1],\n    [10, 1016, 0, 2, 2, 1],\n    [11, 2034, 2, 2, 0, 0],\n    [11, 2035, 1, 2, 2, 1],\n    [11, 2036, 1, 1, 0, 2],\n    [11, 2037, 2, 0, 1, 1],\n    [11, 2038, 1, 1, 2, 2],\n    [11, 2039, 2, 2, 1, 1],\n    [11, 2040, 0, 2, 2, 0],\n    [11, 2041, 0, 2, 1, 2],\n    [12, 4084, 1, 0, 2, 2],\n    [12, 4085, 2, 2, 0, 1],\n    [12, 4086, 2, 1, 2, 0],\n    [12, 4087, 2, 2, 2, 0],\n    [12, 4088, 0, 2, 2, 2],\n    [12, 4089, 2, 2, 2, 1],\n    [12, 4090, 2, 1, 2, 1],\n    [12, 4091, 1, 2, 1, 2],\n    [12, 4092, 1, 2, 2, 2],\n    [13, 8186, 0, 2, 0, 2],\n    [13, 8187, 2, 0, 2, 0],\n    [13, 8188, 1, 2, 0, 2],\n    [14, 16378, 2, 0, 2, 1],\n    [14, 16379, 2, 1, 1, 2],\n    [14, 16380, 2, 1, 0, 2],\n    [15, 32762, 2, 2, 2, 2],\n    [15, 32763, 2, 2, 1, 2],\n    [15, 32764, 2, 1, 2, 2],\n    [15, 32765, 2, 0, 1, 2],\n    [15, 32766, 2, 0, 0, 2],\n    [16, 65534, 2, 2, 0, 2],\n    [16, 65535, 2, 0, 2, 2]\n];\n\nconst HCB4 = [\n    [4, 0, 1, 1, 1, 1],\n    [4, 1, 0, 1, 1, 1],\n    [4, 2, 1, 1, 0, 1],\n    [4, 3, 1, 1, 1, 0],\n    [4, 4, 1, 0, 1, 1],\n    [4, 5, 1, 0, 0, 0],\n    [4, 6, 1, 1, 0, 0],\n    [4, 7, 0, 0, 0, 0],\n    [4, 8, 0, 0, 1, 1],\n    [4, 9, 1, 0, 1, 0],\n    [5, 20, 1, 0, 0, 1],\n    [5, 21, 0, 1, 1, 0],\n    [5, 22, 0, 0, 0, 1],\n    [5, 23, 0, 1, 0, 1],\n    [5, 24, 0, 0, 1, 0],\n    [5, 25, 0, 1, 0, 0],\n    [7, 104, 2, 1, 1, 1],\n    [7, 105, 1, 1, 2, 1],\n    [7, 106, 1, 2, 1, 1],\n    [7, 107, 1, 1, 1, 2],\n    [7, 108, 2, 1, 1, 0],\n    [7, 109, 2, 1, 0, 1],\n    [7, 110, 1, 2, 1, 0],\n    [7, 111, 2, 0, 1, 1],\n    [7, 112, 0, 1, 2, 1],\n    [8, 226, 0, 1, 1, 2],\n    [8, 227, 1, 1, 2, 0],\n    [8, 228, 0, 2, 1, 1],\n    [8, 229, 1, 0, 1, 2],\n    [8, 230, 1, 2, 0, 1],\n    [8, 231, 1, 1, 0, 2],\n    [8, 232, 1, 0, 2, 1],\n    [8, 233, 2, 1, 0, 0],\n    [8, 234, 2, 0, 1, 0],\n    [8, 235, 1, 2, 0, 0],\n    [8, 236, 2, 0, 0, 1],\n    [8, 237, 0, 1, 0, 2],\n    [8, 238, 0, 2, 1, 0],\n    [8, 239, 0, 0, 1, 2],\n    [8, 240, 0, 1, 2, 0],\n    [8, 241, 0, 2, 0, 1],\n    [8, 242, 1, 0, 0, 2],\n    [8, 243, 0, 0, 2, 1],\n    [8, 244, 1, 0, 2, 0],\n    [8, 245, 2, 0, 0, 0],\n    [8, 246, 0, 0, 0, 2],\n    [9, 494, 0, 2, 0, 0],\n    [9, 495, 0, 0, 2, 0],\n    [9, 496, 1, 2, 2, 1],\n    [9, 497, 2, 2, 1, 1],\n    [9, 498, 2, 1, 2, 1],\n    [9, 499, 1, 1, 2, 2],\n    [9, 500, 1, 2, 1, 2],\n    [9, 501, 2, 1, 1, 2],\n    [10, 1004, 1, 2, 2, 0],\n    [10, 1005, 2, 2, 1, 0],\n    [10, 1006, 2, 1, 2, 0],\n    [10, 1007, 0, 2, 2, 1],\n    [10, 1008, 0, 1, 2, 2],\n    [10, 1009, 2, 2, 0, 1],\n    [10, 1010, 0, 2, 1, 2],\n    [10, 1011, 2, 0, 2, 1],\n    [10, 1012, 1, 0, 2, 2],\n    [10, 1013, 2, 2, 2, 1],\n    [10, 1014, 1, 2, 0, 2],\n    [10, 1015, 2, 0, 1, 2],\n    [10, 1016, 2, 1, 0, 2],\n    [10, 1017, 1, 2, 2, 2],\n    [11, 2036, 2, 1, 2, 2],\n    [11, 2037, 2, 2, 1, 2],\n    [11, 2038, 0, 2, 2, 0],\n    [11, 2039, 2, 2, 0, 0],\n    [11, 2040, 0, 0, 2, 2],\n    [11, 2041, 2, 0, 2, 0],\n    [11, 2042, 0, 2, 0, 2],\n    [11, 2043, 2, 0, 0, 2],\n    [11, 2044, 2, 2, 2, 2],\n    [11, 2045, 0, 2, 2, 2],\n    [11, 2046, 2, 2, 2, 0],\n    [12, 4094, 2, 2, 0, 2],\n    [12, 4095, 2, 0, 2, 2]\n];\n\nconst HCB5 = [\n    [1, 0, 0, 0],\n    [4, 8, -1, 0],\n    [4, 9, 1, 0],\n    [4, 10, 0, 1],\n    [4, 11, 0, -1],\n    [5, 24, 1, -1],\n    [5, 25, -1, 1],\n    [5, 26, -1, -1],\n    [5, 27, 1, 1],\n    [7, 112, -2, 0],\n    [7, 113, 0, 2],\n    [7, 114, 2, 0],\n    [7, 115, 0, -2],\n    [8, 232, -2, -1],\n    [8, 233, 2, 1],\n    [8, 234, -1, -2],\n    [8, 235, 1, 2],\n    [8, 236, -2, 1],\n    [8, 237, 2, -1],\n    [8, 238, -1, 2],\n    [8, 239, 1, -2],\n    [8, 240, -3, 0],\n    [8, 241, 3, 0],\n    [8, 242, 0, -3],\n    [8, 243, 0, 3],\n    [9, 488, -3, -1],\n    [9, 489, 1, 3],\n    [9, 490, 3, 1],\n    [9, 491, -1, -3],\n    [9, 492, -3, 1],\n    [9, 493, 3, -1],\n    [9, 494, 1, -3],\n    [9, 495, -1, 3],\n    [9, 496, -2, 2],\n    [9, 497, 2, 2],\n    [9, 498, -2, -2],\n    [9, 499, 2, -2],\n    [10, 1000, -3, -2],\n    [10, 1001, 3, -2],\n    [10, 1002, -2, 3],\n    [10, 1003, 2, -3],\n    [10, 1004, 3, 2],\n    [10, 1005, 2, 3],\n    [10, 1006, -3, 2],\n    [10, 1007, -2, -3],\n    [10, 1008, 0, -4],\n    [10, 1009, -4, 0],\n    [10, 1010, 4, 1],\n    [10, 1011, 4, 0],\n    [11, 2024, -4, -1],\n    [11, 2025, 0, 4],\n    [11, 2026, 4, -1],\n    [11, 2027, -1, -4],\n    [11, 2028, 1, 4],\n    [11, 2029, -1, 4],\n    [11, 2030, -4, 1],\n    [11, 2031, 1, -4],\n    [11, 2032, 3, -3],\n    [11, 2033, -3, -3],\n    [11, 2034, -3, 3],\n    [11, 2035, -2, 4],\n    [11, 2036, -4, -2],\n    [11, 2037, 4, 2],\n    [11, 2038, 2, -4],\n    [11, 2039, 2, 4],\n    [11, 2040, 3, 3],\n    [11, 2041, -4, 2],\n    [12, 4084, -2, -4],\n    [12, 4085, 4, -2],\n    [12, 4086, 3, -4],\n    [12, 4087, -4, -3],\n    [12, 4088, -4, 3],\n    [12, 4089, 3, 4],\n    [12, 4090, -3, 4],\n    [12, 4091, 4, 3],\n    [12, 4092, 4, -3],\n    [12, 4093, -3, -4],\n    [13, 8188, 4, -4],\n    [13, 8189, -4, 4],\n    [13, 8190, 4, 4],\n    [13, 8191, -4, -4]\n];\n\nconst HCB6 = [\n    [4, 0, 0, 0],\n    [4, 1, 1, 0],\n    [4, 2, 0, -1],\n    [4, 3, 0, 1],\n    [4, 4, -1, 0],\n    [4, 5, 1, 1],\n    [4, 6, -1, 1],\n    [4, 7, 1, -1],\n    [4, 8, -1, -1],\n    [6, 36, 2, -1],\n    [6, 37, 2, 1],\n    [6, 38, -2, 1],\n    [6, 39, -2, -1],\n    [6, 40, -2, 0],\n    [6, 41, -1, 2],\n    [6, 42, 2, 0],\n    [6, 43, 1, -2],\n    [6, 44, 1, 2],\n    [6, 45, 0, -2],\n    [6, 46, -1, -2],\n    [6, 47, 0, 2],\n    [6, 48, 2, -2],\n    [6, 49, -2, 2],\n    [6, 50, -2, -2],\n    [6, 51, 2, 2],\n    [7, 104, -3, 1],\n    [7, 105, 3, 1],\n    [7, 106, 3, -1],\n    [7, 107, -1, 3],\n    [7, 108, -3, -1],\n    [7, 109, 1, 3],\n    [7, 110, 1, -3],\n    [7, 111, -1, -3],\n    [7, 112, 3, 0],\n    [7, 113, -3, 0],\n    [7, 114, 0, -3],\n    [7, 115, 0, 3],\n    [7, 116, 3, 2],\n    [8, 234, -3, -2],\n    [8, 235, -2, 3],\n    [8, 236, 2, 3],\n    [8, 237, 3, -2],\n    [8, 238, 2, -3],\n    [8, 239, -2, -3],\n    [8, 240, -3, 2],\n    [8, 241, 3, 3],\n    [9, 484, 3, -3],\n    [9, 485, -3, -3],\n    [9, 486, -3, 3],\n    [9, 487, 1, -4],\n    [9, 488, -1, -4],\n    [9, 489, 4, 1],\n    [9, 490, -4, 1],\n    [9, 491, -4, -1],\n    [9, 492, 1, 4],\n    [9, 493, 4, -1],\n    [9, 494, -1, 4],\n    [9, 495, 0, -4],\n    [9, 496, -4, 2],\n    [9, 497, -4, -2],\n    [9, 498, 2, 4],\n    [9, 499, -2, -4],\n    [9, 500, -4, 0],\n    [9, 501, 4, 2],\n    [9, 502, 4, -2],\n    [9, 503, -2, 4],\n    [9, 504, 4, 0],\n    [9, 505, 2, -4],\n    [9, 506, 0, 4],\n    [10, 1014, -3, -4],\n    [10, 1015, -3, 4],\n    [10, 1016, 3, -4],\n    [10, 1017, 4, -3],\n    [10, 1018, 3, 4],\n    [10, 1019, 4, 3],\n    [10, 1020, -4, 3],\n    [10, 1021, -4, -3],\n    [11, 2044, 4, 4],\n    [11, 2045, -4, 4],\n    [11, 2046, -4, -4],\n    [11, 2047, 4, -4]\n];\n\nconst HCB7 = [\n    [1, 0, 0, 0],\n    [3, 4, 1, 0],\n    [3, 5, 0, 1],\n    [4, 12, 1, 1],\n    [6, 52, 2, 1],\n    [6, 53, 1, 2],\n    [6, 54, 2, 0],\n    [6, 55, 0, 2],\n    [7, 112, 3, 1],\n    [7, 113, 1, 3],\n    [7, 114, 2, 2],\n    [7, 115, 3, 0],\n    [7, 116, 0, 3],\n    [8, 234, 2, 3],\n    [8, 235, 3, 2],\n    [8, 236, 1, 4],\n    [8, 237, 4, 1],\n    [8, 238, 1, 5],\n    [8, 239, 5, 1],\n    [8, 240, 3, 3],\n    [8, 241, 2, 4],\n    [8, 242, 0, 4],\n    [8, 243, 4, 0],\n    [9, 488, 4, 2],\n    [9, 489, 2, 5],\n    [9, 490, 5, 2],\n    [9, 491, 0, 5],\n    [9, 492, 6, 1],\n    [9, 493, 5, 0],\n    [9, 494, 1, 6],\n    [9, 495, 4, 3],\n    [9, 496, 3, 5],\n    [9, 497, 3, 4],\n    [9, 498, 5, 3],\n    [9, 499, 2, 6],\n    [9, 500, 6, 2],\n    [9, 501, 1, 7],\n    [10, 1004, 3, 6],\n    [10, 1005, 0, 6],\n    [10, 1006, 6, 0],\n    [10, 1007, 4, 4],\n    [10, 1008, 7, 1],\n    [10, 1009, 4, 5],\n    [10, 1010, 7, 2],\n    [10, 1011, 5, 4],\n    [10, 1012, 6, 3],\n    [10, 1013, 2, 7],\n    [10, 1014, 7, 3],\n    [10, 1015, 6, 4],\n    [10, 1016, 5, 5],\n    [10, 1017, 4, 6],\n    [10, 1018, 3, 7],\n    [11, 2038, 7, 0],\n    [11, 2039, 0, 7],\n    [11, 2040, 6, 5],\n    [11, 2041, 5, 6],\n    [11, 2042, 7, 4],\n    [11, 2043, 4, 7],\n    [11, 2044, 5, 7],\n    [11, 2045, 7, 5],\n    [12, 4092, 7, 6],\n    [12, 4093, 6, 6],\n    [12, 4094, 6, 7],\n    [12, 4095, 7, 7]\n];\n\nconst HCB8 = [\n    [3, 0, 1, 1],\n    [4, 2, 2, 1],\n    [4, 3, 1, 0],\n    [4, 4, 1, 2],\n    [4, 5, 0, 1],\n    [4, 6, 2, 2],\n    [5, 14, 0, 0],\n    [5, 15, 2, 0],\n    [5, 16, 0, 2],\n    [5, 17, 3, 1],\n    [5, 18, 1, 3],\n    [5, 19, 3, 2],\n    [5, 20, 2, 3],\n    [6, 42, 3, 3],\n    [6, 43, 4, 1],\n    [6, 44, 1, 4],\n    [6, 45, 4, 2],\n    [6, 46, 2, 4],\n    [6, 47, 3, 0],\n    [6, 48, 0, 3],\n    [6, 49, 4, 3],\n    [6, 50, 3, 4],\n    [6, 51, 5, 2],\n    [7, 104, 5, 1],\n    [7, 105, 2, 5],\n    [7, 106, 1, 5],\n    [7, 107, 5, 3],\n    [7, 108, 3, 5],\n    [7, 109, 4, 4],\n    [7, 110, 5, 4],\n    [7, 111, 0, 4],\n    [7, 112, 4, 5],\n    [7, 113, 4, 0],\n    [7, 114, 2, 6],\n    [7, 115, 6, 2],\n    [7, 116, 6, 1],\n    [7, 117, 1, 6],\n    [8, 236, 3, 6],\n    [8, 237, 6, 3],\n    [8, 238, 5, 5],\n    [8, 239, 5, 0],\n    [8, 240, 6, 4],\n    [8, 241, 0, 5],\n    [8, 242, 4, 6],\n    [8, 243, 7, 1],\n    [8, 244, 7, 2],\n    [8, 245, 2, 7],\n    [8, 246, 6, 5],\n    [8, 247, 7, 3],\n    [8, 248, 1, 7],\n    [8, 249, 5, 6],\n    [8, 250, 3, 7],\n    [9, 502, 6, 6],\n    [9, 503, 7, 4],\n    [9, 504, 6, 0],\n    [9, 505, 4, 7],\n    [9, 506, 0, 6],\n    [9, 507, 7, 5],\n    [9, 508, 7, 6],\n    [9, 509, 6, 7],\n    [10, 1020, 5, 7],\n    [10, 1021, 7, 0],\n    [10, 1022, 0, 7],\n    [10, 1023, 7, 7]\n];\n\nconst HCB9 = [\n    [1, 0, 0, 0],\n    [3, 4, 1, 0],\n    [3, 5, 0, 1],\n    [4, 12, 1, 1],\n    [6, 52, 2, 1],\n    [6, 53, 1, 2],\n    [6, 54, 2, 0],\n    [6, 55, 0, 2],\n    [7, 112, 3, 1],\n    [7, 113, 2, 2],\n    [7, 114, 1, 3],\n    [8, 230, 3, 0],\n    [8, 231, 0, 3],\n    [8, 232, 2, 3],\n    [8, 233, 3, 2],\n    [8, 234, 1, 4],\n    [8, 235, 4, 1],\n    [8, 236, 2, 4],\n    [8, 237, 1, 5],\n    [9, 476, 4, 2],\n    [9, 477, 3, 3],\n    [9, 478, 0, 4],\n    [9, 479, 4, 0],\n    [9, 480, 5, 1],\n    [9, 481, 2, 5],\n    [9, 482, 1, 6],\n    [9, 483, 3, 4],\n    [9, 484, 5, 2],\n    [9, 485, 6, 1],\n    [9, 486, 4, 3],\n    [10, 974, 0, 5],\n    [10, 975, 2, 6],\n    [10, 976, 5, 0],\n    [10, 977, 1, 7],\n    [10, 978, 3, 5],\n    [10, 979, 1, 8],\n    [10, 980, 8, 1],\n    [10, 981, 4, 4],\n    [10, 982, 5, 3],\n    [10, 983, 6, 2],\n    [10, 984, 7, 1],\n    [10, 985, 0, 6],\n    [10, 986, 8, 2],\n    [10, 987, 2, 8],\n    [10, 988, 3, 6],\n    [10, 989, 2, 7],\n    [10, 990, 4, 5],\n    [10, 991, 9, 1],\n    [10, 992, 1, 9],\n    [10, 993, 7, 2],\n    [11, 1988, 6, 0],\n    [11, 1989, 5, 4],\n    [11, 1990, 6, 3],\n    [11, 1991, 8, 3],\n    [11, 1992, 0, 7],\n    [11, 1993, 9, 2],\n    [11, 1994, 3, 8],\n    [11, 1995, 4, 6],\n    [11, 1996, 3, 7],\n    [11, 1997, 0, 8],\n    [11, 1998, 10, 1],\n    [11, 1999, 6, 4],\n    [11, 2000, 2, 9],\n    [11, 2001, 5, 5],\n    [11, 2002, 8, 0],\n    [11, 2003, 7, 0],\n    [11, 2004, 7, 3],\n    [11, 2005, 10, 2],\n    [11, 2006, 9, 3],\n    [11, 2007, 8, 4],\n    [11, 2008, 1, 10],\n    [11, 2009, 7, 4],\n    [11, 2010, 6, 5],\n    [11, 2011, 5, 6],\n    [11, 2012, 4, 8],\n    [11, 2013, 4, 7],\n    [11, 2014, 3, 9],\n    [11, 2015, 11, 1],\n    [11, 2016, 5, 8],\n    [11, 2017, 9, 0],\n    [11, 2018, 8, 5],\n    [12, 4038, 10, 3],\n    [12, 4039, 2, 10],\n    [12, 4040, 0, 9],\n    [12, 4041, 11, 2],\n    [12, 4042, 9, 4],\n    [12, 4043, 6, 6],\n    [12, 4044, 12, 1],\n    [12, 4045, 4, 9],\n    [12, 4046, 8, 6],\n    [12, 4047, 1, 11],\n    [12, 4048, 9, 5],\n    [12, 4049, 10, 4],\n    [12, 4050, 5, 7],\n    [12, 4051, 7, 5],\n    [12, 4052, 2, 11],\n    [12, 4053, 1, 12],\n    [12, 4054, 12, 2],\n    [12, 4055, 11, 3],\n    [12, 4056, 3, 10],\n    [12, 4057, 5, 9],\n    [12, 4058, 6, 7],\n    [12, 4059, 8, 7],\n    [12, 4060, 11, 4],\n    [12, 4061, 0, 10],\n    [12, 4062, 7, 6],\n    [12, 4063, 12, 3],\n    [12, 4064, 10, 0],\n    [12, 4065, 10, 5],\n    [12, 4066, 4, 10],\n    [12, 4067, 6, 8],\n    [12, 4068, 2, 12],\n    [12, 4069, 9, 6],\n    [12, 4070, 9, 7],\n    [12, 4071, 4, 11],\n    [12, 4072, 11, 0],\n    [12, 4073, 6, 9],\n    [12, 4074, 3, 11],\n    [12, 4075, 5, 10],\n    [13, 8152, 8, 8],\n    [13, 8153, 7, 8],\n    [13, 8154, 12, 5],\n    [13, 8155, 3, 12],\n    [13, 8156, 11, 5],\n    [13, 8157, 7, 7],\n    [13, 8158, 12, 4],\n    [13, 8159, 11, 6],\n    [13, 8160, 10, 6],\n    [13, 8161, 4, 12],\n    [13, 8162, 7, 9],\n    [13, 8163, 5, 11],\n    [13, 8164, 0, 11],\n    [13, 8165, 12, 6],\n    [13, 8166, 6, 10],\n    [13, 8167, 12, 0],\n    [13, 8168, 10, 7],\n    [13, 8169, 5, 12],\n    [13, 8170, 7, 10],\n    [13, 8171, 9, 8],\n    [13, 8172, 0, 12],\n    [13, 8173, 11, 7],\n    [13, 8174, 8, 9],\n    [13, 8175, 9, 9],\n    [13, 8176, 10, 8],\n    [13, 8177, 7, 11],\n    [13, 8178, 12, 7],\n    [13, 8179, 6, 11],\n    [13, 8180, 8, 11],\n    [13, 8181, 11, 8],\n    [13, 8182, 7, 12],\n    [13, 8183, 6, 12],\n    [14, 16368, 8, 10],\n    [14, 16369, 10, 9],\n    [14, 16370, 8, 12],\n    [14, 16371, 9, 10],\n    [14, 16372, 9, 11],\n    [14, 16373, 9, 12],\n    [14, 16374, 10, 11],\n    [14, 16375, 12, 9],\n    [14, 16376, 10, 10],\n    [14, 16377, 11, 9],\n    [14, 16378, 12, 8],\n    [14, 16379, 11, 10],\n    [14, 16380, 12, 10],\n    [14, 16381, 12, 11],\n    [15, 32764, 10, 12],\n    [15, 32765, 11, 11],\n    [15, 32766, 11, 12],\n    [15, 32767, 12, 12]\n];\n\nconst HCB10 = [\n    [4, 0, 1, 1],\n    [4, 1, 1, 2],\n    [4, 2, 2, 1],\n    [5, 6, 2, 2],\n    [5, 7, 1, 0],\n    [5, 8, 0, 1],\n    [5, 9, 1, 3],\n    [5, 10, 3, 2],\n    [5, 11, 3, 1],\n    [5, 12, 2, 3],\n    [5, 13, 3, 3],\n    [6, 28, 2, 0],\n    [6, 29, 0, 2],\n    [6, 30, 2, 4],\n    [6, 31, 4, 2],\n    [6, 32, 1, 4],\n    [6, 33, 4, 1],\n    [6, 34, 0, 0],\n    [6, 35, 4, 3],\n    [6, 36, 3, 4],\n    [6, 37, 3, 0],\n    [6, 38, 0, 3],\n    [6, 39, 4, 4],\n    [6, 40, 2, 5],\n    [6, 41, 5, 2],\n    [7, 84, 1, 5],\n    [7, 85, 5, 1],\n    [7, 86, 5, 3],\n    [7, 87, 3, 5],\n    [7, 88, 5, 4],\n    [7, 89, 4, 5],\n    [7, 90, 6, 2],\n    [7, 91, 2, 6],\n    [7, 92, 6, 3],\n    [7, 93, 4, 0],\n    [7, 94, 6, 1],\n    [7, 95, 0, 4],\n    [7, 96, 1, 6],\n    [7, 97, 3, 6],\n    [7, 98, 5, 5],\n    [7, 99, 6, 4],\n    [7, 100, 4, 6],\n    [8, 202, 6, 5],\n    [8, 203, 7, 2],\n    [8, 204, 3, 7],\n    [8, 205, 2, 7],\n    [8, 206, 5, 6],\n    [8, 207, 8, 2],\n    [8, 208, 7, 3],\n    [8, 209, 5, 0],\n    [8, 210, 7, 1],\n    [8, 211, 0, 5],\n    [8, 212, 8, 1],\n    [8, 213, 1, 7],\n    [8, 214, 8, 3],\n    [8, 215, 7, 4],\n    [8, 216, 4, 7],\n    [8, 217, 2, 8],\n    [8, 218, 6, 6],\n    [8, 219, 7, 5],\n    [8, 220, 1, 8],\n    [8, 221, 3, 8],\n    [8, 222, 8, 4],\n    [8, 223, 4, 8],\n    [8, 224, 5, 7],\n    [8, 225, 8, 5],\n    [8, 226, 5, 8],\n    [9, 454, 7, 6],\n    [9, 455, 6, 7],\n    [9, 456, 9, 2],\n    [9, 457, 6, 0],\n    [9, 458, 6, 8],\n    [9, 459, 9, 3],\n    [9, 460, 3, 9],\n    [9, 461, 9, 1],\n    [9, 462, 2, 9],\n    [9, 463, 0, 6],\n    [9, 464, 8, 6],\n    [9, 465, 9, 4],\n    [9, 466, 4, 9],\n    [9, 467, 10, 2],\n    [9, 468, 1, 9],\n    [9, 469, 7, 7],\n    [9, 470, 8, 7],\n    [9, 471, 9, 5],\n    [9, 472, 7, 8],\n    [9, 473, 10, 3],\n    [9, 474, 5, 9],\n    [9, 475, 10, 4],\n    [9, 476, 2, 10],\n    [9, 477, 10, 1],\n    [9, 478, 3, 10],\n    [9, 479, 9, 6],\n    [9, 480, 6, 9],\n    [9, 481, 8, 0],\n    [9, 482, 4, 10],\n    [9, 483, 7, 0],\n    [9, 484, 11, 2],\n    [10, 970, 7, 9],\n    [10, 971, 11, 3],\n    [10, 972, 10, 6],\n    [10, 973, 1, 10],\n    [10, 974, 11, 1],\n    [10, 975, 9, 7],\n    [10, 976, 0, 7],\n    [10, 977, 8, 8],\n    [10, 978, 10, 5],\n    [10, 979, 3, 11],\n    [10, 980, 5, 10],\n    [10, 981, 8, 9],\n    [10, 982, 11, 5],\n    [10, 983, 0, 8],\n    [10, 984, 11, 4],\n    [10, 985, 2, 11],\n    [10, 986, 7, 10],\n    [10, 987, 6, 10],\n    [10, 988, 10, 7],\n    [10, 989, 4, 11],\n    [10, 990, 1, 11],\n    [10, 991, 12, 2],\n    [10, 992, 9, 8],\n    [10, 993, 12, 3],\n    [10, 994, 11, 6],\n    [10, 995, 5, 11],\n    [10, 996, 12, 4],\n    [10, 997, 11, 7],\n    [10, 998, 12, 5],\n    [10, 999, 3, 12],\n    [10, 1000, 6, 11],\n    [10, 1001, 9, 0],\n    [10, 1002, 10, 8],\n    [10, 1003, 10, 0],\n    [10, 1004, 12, 1],\n    [10, 1005, 0, 9],\n    [10, 1006, 4, 12],\n    [10, 1007, 9, 9],\n    [10, 1008, 12, 6],\n    [10, 1009, 2, 12],\n    [10, 1010, 8, 10],\n    [11, 2022, 9, 10],\n    [11, 2023, 1, 12],\n    [11, 2024, 11, 8],\n    [11, 2025, 12, 7],\n    [11, 2026, 7, 11],\n    [11, 2027, 5, 12],\n    [11, 2028, 6, 12],\n    [11, 2029, 10, 9],\n    [11, 2030, 8, 11],\n    [11, 2031, 12, 8],\n    [11, 2032, 0, 10],\n    [11, 2033, 7, 12],\n    [11, 2034, 11, 0],\n    [11, 2035, 10, 10],\n    [11, 2036, 11, 9],\n    [11, 2037, 11, 10],\n    [11, 2038, 0, 11],\n    [11, 2039, 11, 11],\n    [11, 2040, 9, 11],\n    [11, 2041, 10, 11],\n    [11, 2042, 12, 0],\n    [11, 2043, 8, 12],\n    [12, 4088, 12, 9],\n    [12, 4089, 10, 12],\n    [12, 4090, 9, 12],\n    [12, 4091, 11, 12],\n    [12, 4092, 12, 11],\n    [12, 4093, 0, 12],\n    [12, 4094, 12, 10],\n    [12, 4095, 12, 12]\n];\n\nconst HCB11 = [\n    [4, 0, 0, 0],\n    [4, 1, 1, 1],\n    [5, 4, 16, 16],\n    [5, 5, 1, 0],\n    [5, 6, 0, 1],\n    [5, 7, 2, 1],\n    [5, 8, 1, 2],\n    [5, 9, 2, 2],\n    [6, 20, 1, 3],\n    [6, 21, 3, 1],\n    [6, 22, 3, 2],\n    [6, 23, 2, 0],\n    [6, 24, 2, 3],\n    [6, 25, 0, 2],\n    [6, 26, 3, 3],\n    [7, 54, 4, 1],\n    [7, 55, 1, 4],\n    [7, 56, 4, 2],\n    [7, 57, 2, 4],\n    [7, 58, 4, 3],\n    [7, 59, 3, 4],\n    [7, 60, 3, 0],\n    [7, 61, 0, 3],\n    [7, 62, 5, 1],\n    [7, 63, 5, 2],\n    [7, 64, 2, 5],\n    [7, 65, 4, 4],\n    [7, 66, 1, 5],\n    [7, 67, 5, 3],\n    [7, 68, 3, 5],\n    [7, 69, 5, 4],\n    [8, 140, 4, 5],\n    [8, 141, 6, 2],\n    [8, 142, 2, 6],\n    [8, 143, 6, 1],\n    [8, 144, 6, 3],\n    [8, 145, 3, 6],\n    [8, 146, 1, 6],\n    [8, 147, 4, 16],\n    [8, 148, 3, 16],\n    [8, 149, 16, 5],\n    [8, 150, 16, 3],\n    [8, 151, 16, 4],\n    [8, 152, 6, 4],\n    [8, 153, 16, 6],\n    [8, 154, 4, 0],\n    [8, 155, 4, 6],\n    [8, 156, 0, 4],\n    [8, 157, 2, 16],\n    [8, 158, 5, 5],\n    [8, 159, 5, 16],\n    [8, 160, 16, 7],\n    [8, 161, 16, 2],\n    [8, 162, 16, 8],\n    [8, 163, 2, 7],\n    [8, 164, 7, 2],\n    [8, 165, 3, 7],\n    [8, 166, 6, 5],\n    [8, 167, 5, 6],\n    [8, 168, 6, 16],\n    [8, 169, 16, 10],\n    [8, 170, 7, 3],\n    [8, 171, 7, 1],\n    [8, 172, 16, 9],\n    [8, 173, 7, 16],\n    [8, 174, 1, 16],\n    [8, 175, 1, 7],\n    [8, 176, 4, 7],\n    [8, 177, 16, 11],\n    [8, 178, 7, 4],\n    [8, 179, 16, 12],\n    [8, 180, 8, 16],\n    [8, 181, 16, 1],\n    [8, 182, 6, 6],\n    [8, 183, 9, 16],\n    [8, 184, 2, 8],\n    [8, 185, 5, 7],\n    [8, 186, 10, 16],\n    [8, 187, 16, 13],\n    [8, 188, 8, 3],\n    [8, 189, 8, 2],\n    [8, 190, 3, 8],\n    [8, 191, 5, 0],\n    [8, 192, 16, 14],\n    [8, 193, 11, 16],\n    [8, 194, 7, 5],\n    [8, 195, 4, 8],\n    [8, 196, 6, 7],\n    [8, 197, 7, 6],\n    [8, 198, 0, 5],\n    [9, 398, 8, 4],\n    [9, 399, 16, 15],\n    [9, 400, 12, 16],\n    [9, 401, 1, 8],\n    [9, 402, 8, 1],\n    [9, 403, 14, 16],\n    [9, 404, 5, 8],\n    [9, 405, 13, 16],\n    [9, 406, 3, 9],\n    [9, 407, 8, 5],\n    [9, 408, 7, 7],\n    [9, 409, 2, 9],\n    [9, 410, 8, 6],\n    [9, 411, 9, 2],\n    [9, 412, 9, 3],\n    [9, 413, 15, 16],\n    [9, 414, 4, 9],\n    [9, 415, 6, 8],\n    [9, 416, 6, 0],\n    [9, 417, 9, 4],\n    [9, 418, 5, 9],\n    [9, 419, 8, 7],\n    [9, 420, 7, 8],\n    [9, 421, 1, 9],\n    [9, 422, 10, 3],\n    [9, 423, 0, 6],\n    [9, 424, 10, 2],\n    [9, 425, 9, 1],\n    [9, 426, 9, 5],\n    [9, 427, 4, 10],\n    [9, 428, 2, 10],\n    [9, 429, 9, 6],\n    [9, 430, 3, 10],\n    [9, 431, 6, 9],\n    [9, 432, 10, 4],\n    [9, 433, 8, 8],\n    [9, 434, 10, 5],\n    [9, 435, 9, 7],\n    [9, 436, 11, 3],\n    [9, 437, 1, 10],\n    [9, 438, 7, 0],\n    [9, 439, 10, 6],\n    [9, 440, 7, 9],\n    [9, 441, 3, 11],\n    [9, 442, 5, 10],\n    [9, 443, 10, 1],\n    [9, 444, 4, 11],\n    [9, 445, 11, 2],\n    [9, 446, 13, 2],\n    [9, 447, 6, 10],\n    [9, 448, 13, 3],\n    [9, 449, 2, 11],\n    [9, 450, 16, 0],\n    [9, 451, 5, 11],\n    [9, 452, 11, 5],\n    [10, 906, 11, 4],\n    [10, 907, 9, 8],\n    [10, 908, 7, 10],\n    [10, 909, 8, 9],\n    [10, 910, 0, 16],\n    [10, 911, 4, 13],\n    [10, 912, 0, 7],\n    [10, 913, 3, 13],\n    [10, 914, 11, 6],\n    [10, 915, 13, 1],\n    [10, 916, 13, 4],\n    [10, 917, 12, 3],\n    [10, 918, 2, 13],\n    [10, 919, 13, 5],\n    [10, 920, 8, 10],\n    [10, 921, 6, 11],\n    [10, 922, 10, 8],\n    [10, 923, 10, 7],\n    [10, 924, 14, 2],\n    [10, 925, 12, 4],\n    [10, 926, 1, 11],\n    [10, 927, 4, 12],\n    [10, 928, 11, 1],\n    [10, 929, 3, 12],\n    [10, 930, 1, 13],\n    [10, 931, 12, 2],\n    [10, 932, 7, 11],\n    [10, 933, 3, 14],\n    [10, 934, 5, 12],\n    [10, 935, 5, 13],\n    [10, 936, 14, 4],\n    [10, 937, 4, 14],\n    [10, 938, 11, 7],\n    [10, 939, 14, 3],\n    [10, 940, 12, 5],\n    [10, 941, 13, 6],\n    [10, 942, 12, 6],\n    [10, 943, 8, 0],\n    [10, 944, 11, 8],\n    [10, 945, 2, 12],\n    [10, 946, 9, 9],\n    [10, 947, 14, 5],\n    [10, 948, 6, 13],\n    [10, 949, 10, 10],\n    [10, 950, 15, 2],\n    [10, 951, 8, 11],\n    [10, 952, 9, 10],\n    [10, 953, 14, 6],\n    [10, 954, 10, 9],\n    [10, 955, 5, 14],\n    [10, 956, 11, 9],\n    [10, 957, 14, 1],\n    [10, 958, 2, 14],\n    [10, 959, 6, 12],\n    [10, 960, 1, 12],\n    [10, 961, 13, 8],\n    [10, 962, 0, 8],\n    [10, 963, 13, 7],\n    [10, 964, 7, 12],\n    [10, 965, 12, 7],\n    [10, 966, 7, 13],\n    [10, 967, 15, 3],\n    [10, 968, 12, 1],\n    [10, 969, 6, 14],\n    [10, 970, 2, 15],\n    [10, 971, 15, 5],\n    [10, 972, 15, 4],\n    [10, 973, 1, 14],\n    [10, 974, 9, 11],\n    [10, 975, 4, 15],\n    [10, 976, 14, 7],\n    [10, 977, 8, 13],\n    [10, 978, 13, 9],\n    [10, 979, 8, 12],\n    [10, 980, 5, 15],\n    [10, 981, 3, 15],\n    [10, 982, 10, 11],\n    [10, 983, 11, 10],\n    [10, 984, 12, 8],\n    [10, 985, 15, 6],\n    [10, 986, 15, 7],\n    [10, 987, 8, 14],\n    [10, 988, 15, 1],\n    [10, 989, 7, 14],\n    [10, 990, 9, 0],\n    [10, 991, 0, 9],\n    [10, 992, 9, 13],\n    [10, 993, 9, 12],\n    [10, 994, 12, 9],\n    [10, 995, 14, 8],\n    [10, 996, 10, 13],\n    [10, 997, 14, 9],\n    [10, 998, 12, 10],\n    [10, 999, 6, 15],\n    [10, 1000, 7, 15],\n    [11, 2002, 9, 14],\n    [11, 2003, 15, 8],\n    [11, 2004, 11, 11],\n    [11, 2005, 11, 14],\n    [11, 2006, 1, 15],\n    [11, 2007, 10, 12],\n    [11, 2008, 10, 14],\n    [11, 2009, 13, 11],\n    [11, 2010, 13, 10],\n    [11, 2011, 11, 13],\n    [11, 2012, 11, 12],\n    [11, 2013, 8, 15],\n    [11, 2014, 14, 11],\n    [11, 2015, 13, 12],\n    [11, 2016, 12, 13],\n    [11, 2017, 15, 9],\n    [11, 2018, 14, 10],\n    [11, 2019, 10, 0],\n    [11, 2020, 12, 11],\n    [11, 2021, 9, 15],\n    [11, 2022, 0, 10],\n    [11, 2023, 12, 12],\n    [11, 2024, 11, 0],\n    [11, 2025, 12, 14],\n    [11, 2026, 10, 15],\n    [11, 2027, 13, 13],\n    [11, 2028, 0, 13],\n    [11, 2029, 14, 12],\n    [11, 2030, 15, 10],\n    [11, 2031, 15, 11],\n    [11, 2032, 11, 15],\n    [11, 2033, 14, 13],\n    [11, 2034, 13, 0],\n    [11, 2035, 0, 11],\n    [11, 2036, 13, 14],\n    [11, 2037, 15, 12],\n    [11, 2038, 15, 13],\n    [11, 2039, 12, 15],\n    [11, 2040, 14, 0],\n    [11, 2041, 14, 14],\n    [11, 2042, 13, 15],\n    [11, 2043, 12, 0],\n    [11, 2044, 14, 15],\n    [12, 4090, 0, 14],\n    [12, 4091, 0, 12],\n    [12, 4092, 15, 14],\n    [12, 4093, 15, 0],\n    [12, 4094, 0, 15],\n    [12, 4095, 15, 15]\n];\n\nconst HCB_SF = [\n    [1, 0, 60],\n    [3, 4, 59],\n    [4, 10, 61],\n    [4, 11, 58],\n    [4, 12, 62],\n    [5, 26, 57],\n    [5, 27, 63],\n    [6, 56, 56],\n    [6, 57, 64],\n    [6, 58, 55],\n    [6, 59, 65],\n    [7, 120, 66],\n    [7, 121, 54],\n    [7, 122, 67],\n    [8, 246, 53],\n    [8, 247, 68],\n    [8, 248, 52],\n    [8, 249, 69],\n    [8, 250, 51],\n    [9, 502, 70],\n    [9, 503, 50],\n    [9, 504, 49],\n    [9, 505, 71],\n    [10, 1012, 72],\n    [10, 1013, 48],\n    [10, 1014, 73],\n    [10, 1015, 47],\n    [10, 1016, 74],\n    [10, 1017, 46],\n    [11, 2036, 76],\n    [11, 2037, 75],\n    [11, 2038, 77],\n    [11, 2039, 78],\n    [11, 2040, 45],\n    [11, 2041, 43],\n    [12, 4084, 44],\n    [12, 4085, 79],\n    [12, 4086, 42],\n    [12, 4087, 41],\n    [12, 4088, 80],\n    [12, 4089, 40],\n    [13, 8180, 81],\n    [13, 8181, 39],\n    [13, 8182, 82],\n    [13, 8183, 38],\n    [13, 8184, 83],\n    [14, 16370, 37],\n    [14, 16371, 35],\n    [14, 16372, 85],\n    [14, 16373, 33],\n    [14, 16374, 36],\n    [14, 16375, 34],\n    [14, 16376, 84],\n    [14, 16377, 32],\n    [15, 32756, 87],\n    [15, 32757, 89],\n    [15, 32758, 30],\n    [15, 32759, 31],\n    [16, 65520, 86],\n    [16, 65521, 29],\n    [16, 65522, 26],\n    [16, 65523, 27],\n    [16, 65524, 28],\n    [16, 65525, 24],\n    [16, 65526, 88],\n    [17, 131054, 25],\n    [17, 131055, 22],\n    [17, 131056, 23],\n    [18, 262114, 90],\n    [18, 262115, 21],\n    [18, 262116, 19],\n    [18, 262117, 3],\n    [18, 262118, 1],\n    [18, 262119, 2],\n    [18, 262120, 0],\n    [19, 524242, 98],\n    [19, 524243, 99],\n    [19, 524244, 100],\n    [19, 524245, 101],\n    [19, 524246, 102],\n    [19, 524247, 117],\n    [19, 524248, 97],\n    [19, 524249, 91],\n    [19, 524250, 92],\n    [19, 524251, 93],\n    [19, 524252, 94],\n    [19, 524253, 95],\n    [19, 524254, 96],\n    [19, 524255, 104],\n    [19, 524256, 111],\n    [19, 524257, 112],\n    [19, 524258, 113],\n    [19, 524259, 114],\n    [19, 524260, 115],\n    [19, 524261, 116],\n    [19, 524262, 110],\n    [19, 524263, 105],\n    [19, 524264, 106],\n    [19, 524265, 107],\n    [19, 524266, 108],\n    [19, 524267, 109],\n    [19, 524268, 118],\n    [19, 524269, 6],\n    [19, 524270, 8],\n    [19, 524271, 9],\n    [19, 524272, 10],\n    [19, 524273, 5],\n    [19, 524274, 103],\n    [19, 524275, 120],\n    [19, 524276, 119],\n    [19, 524277, 4],\n    [19, 524278, 7],\n    [19, 524279, 15],\n    [19, 524280, 16],\n    [19, 524281, 18],\n    [19, 524282, 20],\n    [19, 524283, 17],\n    [19, 524284, 11],\n    [19, 524285, 12],\n    [19, 524286, 14],\n    [19, 524287, 13]\n];\n\nconst CODEBOOKS = [HCB1, HCB2, HCB3, HCB4, HCB5, HCB6, HCB7, HCB8, HCB9, HCB10, HCB11];\nconst UNSIGNED = [false, false, true, true, false, false, true, true, true, true, true],\n      QUAD_LEN = 4, \n      PAIR_LEN = 2;\n\nvar Huffman = {\n    findOffset: function(stream, table) {\n        var off = 0,\n            len = table[off][0],\n            cw = stream.read(len);\n            \n        while (cw !== table[off][1]) {\n            var j = table[++off][0] - len;\n            len = table[off][0];\n            cw <<= j;\n            cw |= stream.read(j);\n        }\n        \n        return off;\n    },\n    \n    signValues: function(stream, data, off, len) {\n        for (var i = off; i < off + len; i++) {\n            if (data[i] && stream.read(1))\n                data[i] = -data[i];\n        }\n    },\n    \n    getEscape: function(stream, s) {\n        var i = 4;\n        while (stream.read(1))\n            i++;\n            \n        var j = stream.read(i) | (1 << i);\n        return s < 0 ? -j : j;\n    },\n    \n    decodeScaleFactor: function(stream) {\n        var offset = this.findOffset(stream, HCB_SF);\n        return HCB_SF[offset][2];\n    },\n    \n    decodeSpectralData: function(stream, cb, data, off) {\n        var HCB = CODEBOOKS[cb - 1],\n            offset = this.findOffset(stream, HCB);\n            \n        data[off] = HCB[offset][2];\n        data[off + 1] = HCB[offset][3];\n        \n        if (cb < 5) {\n            data[off + 2] = HCB[offset][4];\n            data[off + 3] = HCB[offset][5];\n        }\n        \n        // sign and escape\n        if (cb < 11) {\n            if (UNSIGNED[cb - 1])\n                this.signValues(stream, data, off, cb < 5 ? QUAD_LEN : PAIR_LEN);\n                \n        } else if (cb === 11 || cb > 15) {\n            this.signValues(stream, data, off, cb < 5 ? QUAD_LEN : PAIR_LEN);\n            \n            if (Math.abs(data[off]) === 16) \n                data[off] = this.getEscape(stream, data[off]);\n                \n            if (Math.abs(data[off + 1]) === 16)\n                data[off + 1] = this.getEscape(stream, data[off + 1]);\n        } else {\n            throw new Error(\"Huffman: unknown spectral codebook: \" + cb);\n        }\n    }\n};\n\nmodule.exports = Huffman;\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar tables = require('./tables');\nvar Huffman = require('./huffman');\nvar TNS = require('./tns');\n    \n// Individual Channel Stream\nfunction ICStream(config) {\n    this.info = new ICSInfo();\n    this.bandTypes = new Int32Array(MAX_SECTIONS);\n    this.sectEnd = new Int32Array(MAX_SECTIONS);\n    this.data = new Float32Array(config.frameLength);\n    this.scaleFactors = new Float32Array(MAX_SECTIONS);\n    this.randomState = 0x1F2E3D4C;\n    this.tns = new TNS(config);\n    this.specBuf = new Int32Array(4);\n}\n      \nICStream.ZERO_BT = 0;         // Scalefactors and spectral data are all zero.\nICStream.FIRST_PAIR_BT = 5;   // This and later band types encode two values (rather than four) with one code word.\nICStream.ESC_BT = 11;         // Spectral data are coded with an escape sequence.\nICStream.NOISE_BT = 13;       // Spectral data are scaled white noise not coded in the bitstream.\nICStream.INTENSITY_BT2 = 14;  // Scalefactor data are intensity stereo positions.\nICStream.INTENSITY_BT = 15;   // Scalefactor data are intensity stereo positions.\n\nICStream.ONLY_LONG_SEQUENCE = 0;\nICStream.LONG_START_SEQUENCE = 1;\nICStream.EIGHT_SHORT_SEQUENCE = 2;\nICStream.LONG_STOP_SEQUENCE = 3;\n\nconst MAX_SECTIONS = 120,\n      MAX_WINDOW_GROUP_COUNT = 8;\n\nconst SF_DELTA = 60,\n      SF_OFFSET = 200;\n\nICStream.prototype = {\n    decode: function(stream, config, commonWindow) {\n        this.globalGain = stream.read(8);\n        \n        if (!commonWindow)\n            this.info.decode(stream, config, commonWindow);\n            \n        this.decodeBandTypes(stream, config);\n        this.decodeScaleFactors(stream);\n        \n        if (this.pulsePresent = stream.read(1)) {\n            if (this.info.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE)\n                throw new Error(\"Pulse tool not allowed in eight short sequence.\");\n                \n            this.decodePulseData(stream);\n        }\n        \n        if (this.tnsPresent = stream.read(1)) {\n            this.tns.decode(stream, this.info);\n        }\n        \n        if (this.gainPresent = stream.read(1)) {\n            throw new Error(\"TODO: decode gain control/SSR\");\n        }\n        \n        this.decodeSpectralData(stream);\n    },\n    \n    decodeBandTypes: function(stream, config) {\n        var bits = this.info.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE ? 3 : 5,\n            groupCount = this.info.groupCount,\n            maxSFB = this.info.maxSFB,\n            bandTypes = this.bandTypes,\n            sectEnd = this.sectEnd,\n            idx = 0,\n            escape = (1 << bits) - 1;\n        \n        for (var g = 0; g < groupCount; g++) {\n            var k = 0;\n            while (k < maxSFB) {\n                var end = k,\n                    bandType = stream.read(4);\n                    \n                if (bandType === 12)\n                    throw new Error(\"Invalid band type: 12\");\n                    \n                var incr;\n                while ((incr = stream.read(bits)) === escape)\n                    end += incr;\n                    \n                end += incr;\n                \n                if (end > maxSFB)\n                    throw new Error(\"Too many bands (\" + end + \" > \" + maxSFB + \")\");\n                    \n                for (; k < end; k++) {\n                    bandTypes[idx] = bandType;\n                    sectEnd[idx++] = end;\n                }\n            }\n        }\n    },\n    \n    decodeScaleFactors: function(stream) {\n        var groupCount = this.info.groupCount,\n            maxSFB = this.info.maxSFB,\n            offset = [this.globalGain, this.globalGain - 90, 0], // spectrum, noise, intensity\n            idx = 0,\n            noiseFlag = true,\n            scaleFactors = this.scaleFactors,\n            sectEnd = this.sectEnd,\n            bandTypes = this.bandTypes;\n                        \n        for (var g = 0; g < groupCount; g++) {\n            for (var i = 0; i < maxSFB;) {\n                var runEnd = sectEnd[idx];\n                \n                switch (bandTypes[idx]) {\n                    case ICStream.ZERO_BT:\n                        for (; i < runEnd; i++, idx++) {\n                            scaleFactors[idx] = 0;\n                        }\n                        break;\n                        \n                    case ICStream.INTENSITY_BT:\n                    case ICStream.INTENSITY_BT2:\n                        for(; i < runEnd; i++, idx++) {\n                            offset[2] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\n                            var tmp = Math.min(Math.max(offset[2], -155), 100);\n                            scaleFactors[idx] = tables.SCALEFACTOR_TABLE[-tmp + SF_OFFSET];\n                        }\n                        break;\n                        \n                    case ICStream.NOISE_BT:\n                        for(; i < runEnd; i++, idx++) {\n                            if (noiseFlag) {\n                                offset[1] += stream.read(9) - 256;\n                                noiseFlag = false;\n                            } else {\n                                offset[1] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\n                            }\n                            var tmp = Math.min(Math.max(offset[1], -100), 155);\n                            scaleFactors[idx] = -tables.SCALEFACTOR_TABLE[tmp + SF_OFFSET];\n                        }\n                        break;\n                        \n                    default:\n                        for(; i < runEnd; i++, idx++) {\n                            offset[0] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\n                            if(offset[0] > 255) \n                                throw new Error(\"Scalefactor out of range: \" + offset[0]);\n                                \n                            scaleFactors[idx] = tables.SCALEFACTOR_TABLE[offset[0] - 100 + SF_OFFSET];\n                        }\n                        break;\n                }\n            }\n        }\n    },\n    \n    decodePulseData: function(stream) {\n        var pulseCount = stream.read(2) + 1,\n            pulseSWB = stream.read(6);\n            \n        if (pulseSWB >= this.info.swbCount)\n            throw new Error(\"Pulse SWB out of range: \" + pulseSWB);\n            \n        if (!this.pulseOffset || this.pulseOffset.length !== pulseCount) {\n            // only reallocate if needed\n            this.pulseOffset = new Int32Array(pulseCount);\n            this.pulseAmp = new Int32Array(pulseCount);\n        }\n        \n        this.pulseOffset[0] = this.info.swbOffsets[pulseSWB] + stream.read(5);\n        this.pulseAmp[0] = stream.read(4);\n        \n        if (this.pulseOffset[0] > 1023)\n            throw new Error(\"Pulse offset out of range: \" + this.pulseOffset[0]);\n        \n        for (var i = 1; i < pulseCount; i++) {\n            this.pulseOffset[i] = stream.read(5) + this.pulseOffset[i - 1];\n            if (this.pulseOffset[i] > 1023)\n                throw new Error(\"Pulse offset out of range: \" + this.pulseOffset[i]);\n                \n            this.pulseAmp[i] = stream.read(4);\n        }\n    },\n    \n    decodeSpectralData: function(stream) {\n        var data = this.data,\n            info = this.info,\n            maxSFB = info.maxSFB,\n            windowGroups = info.groupCount,\n            offsets = info.swbOffsets,\n            bandTypes = this.bandTypes,\n            scaleFactors = this.scaleFactors,\n            buf = this.specBuf;\n            \n        var groupOff = 0, idx = 0;\n        for (var g = 0; g < windowGroups; g++) {\n            var groupLen = info.groupLength[g];\n            \n            for (var sfb = 0; sfb < maxSFB; sfb++, idx++) {\n                var hcb = bandTypes[idx],\n                    off = groupOff + offsets[sfb],\n                    width = offsets[sfb + 1] - offsets[sfb];\n                    \n                if (hcb === ICStream.ZERO_BT || hcb === ICStream.INTENSITY_BT || hcb === ICStream.INTENSITY_BT2) {\n                    for (var group = 0; group < groupLen; group++, off += 128) {\n                        for (var i = off; i < off + width; i++) {\n                            data[i] = 0;\n                        }\n                    }\n                } else if (hcb === ICStream.NOISE_BT) {\n                    // fill with random values\n                    for (var group = 0; group < groupLen; group++, off += 128) {\n                        var energy = 0;\n                        \n                        for (var k = 0; k < width; k++) {\n                            this.randomState *= 1664525 + 1013904223;\n                            data[off + k] = this.randomState;\n                            energy += data[off + k] * data[off + k];\n                        }\n                        \n                        var scale = scaleFactors[idx] / Math.sqrt(energy);\n                        for (var k = 0; k < width; k++) {\n                            data[off + k] *= scale;\n                        }\n                    }\n                } else {\n                    for (var group = 0; group < groupLen; group++, off += 128) {\n                        var num = (hcb >= ICStream.FIRST_PAIR_BT) ? 2 : 4;\n                        for (var k = 0; k < width; k += num) {\n                            Huffman.decodeSpectralData(stream, hcb, buf, 0);\n                            \n                            // inverse quantization & scaling\n                            for (var j = 0; j < num; j++) {\n                                data[off + k + j] = (buf[j] > 0) ? tables.IQ_TABLE[buf[j]] : -tables.IQ_TABLE[-buf[j]];\n                                data[off + k + j] *= scaleFactors[idx];\n                            }\n                        }\n                    }\n                }\n            }\n            groupOff += groupLen << 7;\n        }\n        \n        // add pulse data, if present\n        if (this.pulsePresent) {\n            throw new Error('TODO: add pulse data');\n        }\n    }\n}\n\n// Individual Channel Stream Info\nfunction ICSInfo() {\n    this.windowShape = new Int32Array(2);\n    this.windowSequence = ICStream.ONLY_LONG_SEQUENCE;\n    this.groupLength = new Int32Array(MAX_WINDOW_GROUP_COUNT);\n    this.ltpData1Present = false;\n    this.ltpData2Present = false;\n}\n\nICSInfo.prototype = {\n    decode: function(stream, config, commonWindow) {\n        stream.advance(1); // reserved\n        \n        this.windowSequence = stream.read(2);\n        this.windowShape[0] = this.windowShape[1];\n        this.windowShape[1] = stream.read(1);\n        \n        this.groupCount = 1;\n        this.groupLength[0] = 1;\n        \n        if (this.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE) {\n            this.maxSFB = stream.read(4);\n            for (var i = 0; i < 7; i++) {\n                if (stream.read(1)) {\n                    this.groupLength[this.groupCount - 1]++;\n                } else {\n                    this.groupCount++;\n                    this.groupLength[this.groupCount - 1] = 1;\n                }\n            }\n            \n            this.windowCount = 8;\n            this.swbOffsets = tables.SWB_OFFSET_128[config.sampleIndex];\n            this.swbCount = tables.SWB_SHORT_WINDOW_COUNT[config.sampleIndex];\n            this.predictorPresent = false;\n        } else {\n            this.maxSFB = stream.read(6);\n            this.windowCount = 1;\n            this.swbOffsets = tables.SWB_OFFSET_1024[config.sampleIndex];\n            this.swbCount = tables.SWB_LONG_WINDOW_COUNT[config.sampleIndex];\n            this.predictorPresent = !!stream.read(1);\n            \n            if (this.predictorPresent)\n                this.decodePrediction(stream, config, commonWindow);\n        }\n    },\n    \n    decodePrediction: function(stream, config, commonWindow) {\n        throw new Error('Prediction not implemented.');\n        \n        switch (config.profile) {\n            case AOT_AAC_MAIN:\n                throw new Error('Prediction not implemented.');\n                break;\n                \n            case AOT_AAC_LTP:\n                throw new Error('LTP prediction not implemented.');\n                break;\n                \n            default:\n                throw new Error('Unsupported profile for prediction ' + config.profile);\n        }\n    }\n};\n\nmodule.exports = ICStream;\n",
    "###\n   AAC.js - Advanced Audio Coding decoder in JavaScript\n   Created by Devon Govett\n   Copyright (c) 2012, Official.fm Labs\n\n   AAC.js is free software; you can redistribute it and/or modify it\n   under the terms of the GNU Lesser General Public License as\n   published by the Free Software Foundation; either version 3 of the\n   License, or (at your option) any later version.\n\n   AAC.js is distributed in the hope that it will be useful, but WITHOUT\n   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General\n   Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with this library.\n   If not, see <http://www.gnu.org/licenses/>.\n###\n\nADTSDemuxer = require '../../demuxers/adts'\nDecoder     = require '../../decoder'\nBitstream   = require '../../core/bitstream'\nStream      = require '../../core/stream'\nICStream    = require './ics'\nCPEElement  = require './cpe'\nCCEElement  = require './cce'\nFilterBank  = require './filter_bank'\ntables      = require './tables'\n\nclass AACDecoder extends Decoder\n    Decoder.register('mp4a', AACDecoder)\n    Decoder.register('aac ', AACDecoder)\n\n    # AAC profiles\n    AOT_AAC_MAIN = 1 # no\n    AOT_AAC_LC   = 2   # yes\n    AOT_AAC_LTP  = 4  # no\n    AOT_ESCAPE   = 31\n\n    # Channel configurations\n    CHANNEL_CONFIG_NONE                              = 0\n    CHANNEL_CONFIG_MONO                              = 1\n    CHANNEL_CONFIG_STEREO                            = 2\n    CHANNEL_CONFIG_STEREO_PLUS_CENTER                = 3\n    CHANNEL_CONFIG_STEREO_PLUS_CENTER_PLUS_REAR_MONO = 4\n    CHANNEL_CONFIG_FIVE                              = 5\n    CHANNEL_CONFIG_FIVE_PLUS_ONE                     = 6\n    CHANNEL_CONFIG_SEVEN_PLUS_ONE                    = 8\n\n    init: ->\n      @format.floatingPoint = true\n\n    setCookie: (buffer) ->\n        CHANNEL_CONFIG_FIVE_PLUS_ONE\n        data = Stream.fromBuffer(buffer)\n        stream = new Bitstream(data)\n\n        @config = {}\n\n        @config.profile = stream.read(5)\n        if @config.profile is AOT_ESCAPE\n            @config.profile = 32 + stream.read(6)\n\n        @config.sampleIndex = stream.read(4)\n        if @config.sampleIndex is 0x0f\n            @config.sampleRate = stream.read(24)\n            for i in [0...tables.SAMPLE_RATES.length]\n                if tables.SAMPLE_RATES[i] is @config.sampleRate\n                    @config.sampleIndex = i\n                    break\n        else\n            @config.sampleRate = tables.SAMPLE_RATES[@config.sampleIndex]\n\n        @config.chanConfig = stream.read(4)\n        @format.channelsPerFrame = @config.chanConfig # sometimes m4a files encode this wrong\n\n        switch @config.profile\n            when AOT_AAC_LTP, AOT_AAC_MAIN, AOT_AAC_LC\n                if stream.read(1) # frameLengthFlag\n                    throw new Error('frameLengthFlag not supported')\n\n                @config.frameLength = 1024\n\n                if stream.read(1) # dependsOnCoreCoder\n                    stream.advance(14) # coreCoderDelay\n\n                if stream.read(1) # extensionFlag\n                    if @config.profile > 16 # error resiliant profile\n                        @config.sectionDataResilience = stream.read(1)\n                        @config.scalefactorResilience = stream.read(1)\n                        @config.spectralDataResilience = stream.read(1)\n\n                    stream.advance(1)\n\n                if @config.chanConfig is CHANNEL_CONFIG_NONE\n                    stream.advance(4) # element_instance_tag\n                    throw new Error('PCE unimplemented')\n            else\n                throw new Error(\"AAC profile#{@config.profile}not supported.\")\n\n        @filter_bank = new FilterBank(false, @config.chanConfig)\n        @ics = new ICStream(@config)\n        @cpe = new CPEElement(@config)\n        @cce = new CCEElement(@config)\n\n    SCE_ELEMENT = 0\n    CPE_ELEMENT = 1\n    CCE_ELEMENT = 2\n    LFE_ELEMENT = 3\n    DSE_ELEMENT = 4\n    PCE_ELEMENT = 5\n    FIL_ELEMENT = 6\n    END_ELEMENT = 7\n\n    # The main decoding function.\n    readChunk: ->\n        stream = @bitstream\n\n        # check if there is an ADTS header, and read it if so\n        ADTSDemuxer.readHeader(stream) if stream.peek(12) is 0xfff\n\n        @cces = []\n        elements = []\n        config = @config\n        frameLength = config.frameLength\n        elementType = null\n\n        while (elementType = stream.read(3)) isnt END_ELEMENT\n            id = stream.read(4)\n            console.log(elementType)\n\n            switch elementType\n                # single channel and low frequency elements\n                when SCE_ELEMENT, LFE_ELEMENT\n                    ics = @ics\n                    ics.id = id\n                    elements.push(ics)\n                    ics.decode(stream, config, false)\n\n                # channel pair element\n                when CPE_ELEMENT\n                    cpe = @cpe\n                    cpe.id = id\n                    elements.push(cpe)\n                    cpe.decode(stream, config)\n\n                # channel coupling element\n                when CCE_ELEMENT\n                    cce = @cce\n                    @cces.push(cce)\n                    cce.decode(stream, config)\n\n                # data-stream element\n                when DSE_ELEMENT\n                    align = stream.read(1)\n                    count = stream.read(8)\n\n                    count += stream.read(8) if count is 255\n\n                    stream.align() if align\n\n                    # skip for now...\n                    stream.advance(count * 8)\n\n                # program configuration element\n                when PCE_ELEMENT\n                    throw new Error(\"TODO: PCE_ELEMENT\")\n\n                # filler element\n                when FIL_ELEMENT\n                    if id is 15\n                        id += stream.read(8) - 1\n\n                    # skip for now...\n                    stream.advance(id * 8)\n\n                else\n                    throw new Error('Unknown element')\n\n        stream.align()\n        @process(elements)\n\n        # Interleave channels\n        data = @data\n        channels = data.length\n        output = new Float32Array(frameLength * channels)\n        j = 0\n\n        for k in [0...frameLength]\n            for i in [0...channels]\n                output[j++] = data[i][k] / 32768\n\n        output\n\n    process: (elements) ->\n        channels = @config.chanConfig\n\n        # if channels is 1 and psPresent\n        # TODO: sbrPresent (2)\n        mult = 1\n\n        len = mult * @config.frameLength\n        data = @data = []\n\n        # Initialize channels\n        for i in [0...channels]\n            data[i] = new Float32Array(len)\n\n        channel = 0\n        for i in [0...elements.length]\n            break if channel >= channels\n            e = elements[i]\n\n            if e instanceof ICStream # SCE or LFE element\n                channel += @processSingle(e, channel)\n            else if e instanceof CPEElement\n                @processPair(e, channel)\n                channel += 2\n            else if e instanceof CCEElement\n                channel++\n            else\n                throw new Error(\"Unknown element found.\")\n\n    processSingle: (element, channel) ->\n        profile = @config.profile\n        info = element.info\n        data = element.data\n\n        if profile is AOT_AAC_MAIN\n            throw new Error(\"Main prediction unimplemented\")\n\n        if profile is AOT_AAC_LTP\n            throw new Error(\"LTP prediction unimplemented\")\n\n        @applyChannelCoupling(element, CCEElement.BEFORE_TNS, data, null)\n\n        if element.tnsPresent\n            element.tns.process(element, data, false)\n\n        @applyChannelCoupling(element, CCEElement.AFTER_TNS, data, null)\n\n        # filterbank\n        @filter_bank.process(info, data, @data[channel], channel)\n\n        if profile is AOT_AAC_LTP\n            throw new Error(\"LTP prediction unimplemented\")\n\n        @applyChannelCoupling(element, CCEElement.AFTER_IMDCT, @data[channel], null)\n\n        if element.gainPresent\n            throw new Error(\"Gain control not implemented\")\n\n        if @sbrPresent\n            throw new Error(\"SBR not implemented\")\n\n        1\n\n    processPair: (element, channel) ->\n        profile = @config.profile\n        left = element.left\n        right = element.right\n        l_info = left.info\n        r_info = right.info\n        l_data = left.data\n        r_data = right.data\n\n        # Mid-side stereo\n        if (element.commonWindow && element.maskPresent)\n            @processMS(element, l_data, r_data)\n\n        if profile is AOT_AAC_MAIN\n            throw new Error(\"Main prediction unimplemented\")\n\n        # Intensity stereo\n        @processIS(element, l_data, r_data)\n\n        if profile is AOT_AAC_LTP\n            throw new Error(\"LTP prediction unimplemented\")\n\n        @applyChannelCoupling(element, CCEElement.BEFORE_TNS, l_data, r_data)\n\n        left.tns.process(left, l_data, false) if left.tnsPresent\n\n        right.tns.process(right, r_data, false) if right.tnsPresent\n\n        @applyChannelCoupling(element, CCEElement.AFTER_TNS, l_data, r_data)\n\n        # filterbank\n        @filter_bank.process(l_info, l_data, @data[channel], channel)\n        @filter_bank.process(r_info, r_data, @data[channel + 1], channel + 1)\n\n        if profile is AOT_AAC_LTP\n            throw new Error(\"LTP prediction unimplemented\")\n\n        @applyChannelCoupling(element, CCEElement.AFTER_IMDCT, @data[channel], @data[channel + 1])\n\n        if left.gainPresent\n            throw new Error(\"Gain control not implemented\")\n\n        if right.gainPresent\n            throw new Error(\"Gain control not implemented\")\n\n        if @sbrPresent\n            throw new Error(\"SBR not implemented\")\n\n    # Intensity stereo\n    processIS: (element, left, right) ->\n        ics = element.right\n        info = ics.info\n        offsets = info.swbOffsets\n        windowGroups = info.groupCount\n        maxSFB = info.maxSFB\n        bandTypes = ics.bandTypes\n        sectEnd = ics.sectEnd\n        scaleFactors = ics.scaleFactors\n\n        idx = 0\n        groupOff = 0\n        for g in [0...windowGroups]\n            i = 0\n            while i < maxSFB\n                end = sectEnd[idx]\n\n                if bandTypes[idx] is ICStream.INTENSITY_BT or bandTypes[idx] is ICStream.INTENSITY_BT2\n                    while i < end\n                        c = if bandTypes[idx] is ICStream.INTENSITY_BT then 1 else -1\n                        if element.maskPresent\n                            c *= if element.ms_used[idx] then -1 else 1\n\n                        scale = c * scaleFactors[idx]\n                        for w in [0...info.groupLength[g]]\n                            offset = groupOff + w * 128 + offsets[i]\n                            len = offsets[i + 1] - offsets[i]\n\n                            for j in [j...len]\n                                right[offset + j] = left[offset + j] * scale\n                        i++\n                        idx++\n                else\n                    idx += end - i\n                    i = end\n\n            groupOff += info.groupLength[g] * 128\n\n    processMS: (element, left, right) ->\n        ics = element.left\n        info = ics.info\n        offsets = info.swbOffsets\n        windowGroups = info.groupCount\n        maxSFB = info.maxSFB\n        sfbCBl = ics.bandTypes\n        sfbCBr = element.right.bandTypes\n\n        groupOff = 0\n        idx = 0\n        for g in [0...windowGroups]\n            for i in [0...maxSFB]\n                if element.ms_used[idx] and sfbCBl[idx] < ICStream.NOISE_BT and sfbCBr[idx] < ICStream.NOISE_BT\n                    for w in [0...info.groupLength[g]]\n                        offset = groupOff + w * 128 + offsets[i]\n                        for j in [0...offsets[i + 1] - offsets[i]]\n                            t = left[offset + j] - right[offset + j]\n                            left[offset + j] += right[offset + j]\n                            right[offset + j] = t\n                idx++\n            groupOff += info.groupLength[g] * 128\n\n    applyChannelCoupling: (element, couplingPoint, data1, data2) ->\n        cces = @cces\n        isChannelPair = element instanceof CPEElement\n        applyCoupling = couplingPoint is CCEElement.AFTER_IMDCT ? 'applyIndependentCoupling' : 'applyDependentCoupling'\n\n        for i in [0...cces.length]\n            cce = cces[i]\n            index = 0\n\n            if cce.couplingPoint is couplingPoint\n                for c in [0...cce.coupledCount]\n                    chSelect = cce.chSelect[c]\n                    if cce.channelPair[c] is isChannelPair and cce.idSelect[c] is element.id\n                        unless chSelect is 1\n                            cce[applyCoupling](index, data1)\n                            index++ if chSelect\n\n                        cce[applyCoupling](index++, data2) unless chSelect is 2\n\n                    else\n                        index += 1 + (chSelect is 3 ? 1 : 0)\n\nmodule.exports = AACDecoder",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar tables = require('./mdct_tables');\nvar FFT = require('./fft');\n\n// Modified Discrete Cosine Transform\nfunction MDCT(length) {\n    this.N = length;\n    this.N2 = length >>> 1;\n    this.N4 = length >>> 2;\n    this.N8 = length >>> 3;\n    \n    switch (length) {\n        case 2048:\n            this.sincos = tables.MDCT_TABLE_2048;\n            break;\n            \n        case 256:\n            this.sincos = tables.MDCT_TABLE_256;\n            break;\n            \n        case 1920:\n            this.sincos = tables.MDCT_TABLE_1920;\n            break;\n            \n        case 240:\n            this.sincos = tables.MDCT_TABLE_240;\n            break;\n            \n        default:\n            throw new Error(\"unsupported MDCT length: \" + length);\n    }\n    \n    this.fft = new FFT(this.N4);\n    \n    this.buf = new Array(this.N4);\n    for (var i = 0; i < this.N4; i++) {\n        this.buf[i] = new Float32Array(2);\n    }\n    \n    this.tmp = new Float32Array(2);\n}\n\nMDCT.prototype.process = function(input, inOffset, output, outOffset) {\n    // local access\n    var N2 = this.N2,\n        N4 = this.N4,\n        N8 = this.N8,\n        buf = this.buf,\n        tmp = this.tmp,\n        sincos = this.sincos,\n        fft = this.fft;\n    \n    // pre-IFFT complex multiplication\n    for (var k = 0; k < N4; k++) {\n        buf[k][1] = (input[inOffset + 2 * k] * sincos[k][0]) + (input[inOffset + N2 - 1 - 2 * k] * sincos[k][1]);\n        buf[k][0] = (input[inOffset + N2 - 1 - 2 * k] * sincos[k][0]) - (input[inOffset + 2 * k] * sincos[k][1]);\n    }\n    \n    // complex IFFT, non-scaling\n    fft.process(buf, false);\n    \n    // post-IFFT complex multiplication\n    for (var k = 0; k < N4; k++) {\n        tmp[0] = buf[k][0];\n        tmp[1] = buf[k][1];\n        buf[k][1] = (tmp[1] * sincos[k][0]) + (tmp[0] * sincos[k][1]);\n        buf[k][0] = (tmp[0] * sincos[k][0]) - (tmp[1] * sincos[k][1]);\n    }\n    \n    // reordering\n    for (var k = 0; k < N8; k += 2) {\n        output[outOffset + 2 * k] = buf[N8 + k][1];\n        output[outOffset + 2 + 2 * k] = buf[N8 + 1 + k][1];\n\n        output[outOffset + 1 + 2 * k] = -buf[N8 - 1 - k][0];\n        output[outOffset + 3 + 2 * k] = -buf[N8 - 2 - k][0];\n\n        output[outOffset + N4 + 2 * k] = buf[k][0];\n        output[outOffset + N4 + 2 + 2 * k] = buf[1 + k][0];\n\n        output[outOffset + N4 + 1 + 2 * k] = -buf[N4 - 1 - k][1];\n        output[outOffset + N4 + 3 + 2 * k] = -buf[N4 - 2 - k][1];\n\n        output[outOffset + N2 + 2 * k] = buf[N8 + k][0];\n        output[outOffset + N2 + 2 + 2 * k] = buf[N8 + 1 + k][0];\n\n        output[outOffset + N2 + 1 + 2 * k] = -buf[N8 - 1 - k][1];\n        output[outOffset + N2 + 3 + 2 * k] = -buf[N8 - 2 - k][1];\n\n        output[outOffset + N2 + N4 + 2 * k] = -buf[k][1];\n        output[outOffset + N2 + N4 + 2 + 2 * k] = -buf[1 + k][1];\n\n        output[outOffset + N2 + N4 + 1 + 2 * k] = buf[N4 - 1 - k][0];\n        output[outOffset + N2 + N4 + 3 + 2 * k] = buf[N4 - 2 - k][0];\n    }\n};\n\nmodule.exports = MDCT;\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nexports.MDCT_TABLE_2048 = [\n    [0.031249997702054, 0.000011984224612],\n    [0.031249813866531, 0.000107857810004],\n    [0.031249335895858, 0.000203730380198],\n    [0.031248563794535, 0.000299601032804],\n    [0.031247497569829, 0.000395468865451],\n    [0.031246137231775, 0.000491332975794],\n    [0.031244482793177, 0.000587192461525],\n    [0.031242534269608, 0.000683046420376],\n    [0.031240291679407, 0.000778893950134],\n    [0.031237755043684, 0.000874734148645],\n    [0.031234924386313, 0.000970566113826],\n    [0.031231799733938, 0.001066388943669],\n    [0.031228381115970, 0.001162201736253],\n    [0.031224668564585, 0.001258003589751],\n    [0.031220662114728, 0.001353793602441],\n    [0.031216361804108, 0.001449570872710],\n    [0.031211767673203, 0.001545334499065],\n    [0.031206879765253, 0.001641083580144],\n    [0.031201698126266, 0.001736817214719],\n    [0.031196222805014, 0.001832534501709],\n    [0.031190453853031, 0.001928234540186],\n    [0.031184391324617, 0.002023916429386],\n    [0.031178035276836, 0.002119579268713],\n    [0.031171385769513, 0.002215222157753],\n    [0.031164442865236, 0.002310844196278],\n    [0.031157206629353, 0.002406444484258],\n    [0.031149677129975, 0.002502022121865],\n    [0.031141854437973, 0.002597576209488],\n    [0.031133738626977, 0.002693105847734],\n    [0.031125329773375, 0.002788610137442],\n    [0.031116627956316, 0.002884088179689],\n    [0.031107633257703, 0.002979539075801],\n    [0.031098345762200, 0.003074961927355],\n    [0.031088765557222, 0.003170355836197],\n    [0.031078892732942, 0.003265719904442],\n    [0.031068727382288, 0.003361053234488],\n    [0.031058269600939, 0.003456354929021],\n    [0.031047519487329, 0.003551624091024],\n    [0.031036477142640, 0.003646859823790],\n    [0.031025142670809, 0.003742061230921],\n    [0.031013516178519, 0.003837227416347],\n    [0.031001597775203, 0.003932357484328],\n    [0.030989387573042, 0.004027450539462],\n    [0.030976885686963, 0.004122505686697],\n    [0.030964092234638, 0.004217522031340],\n    [0.030951007336485, 0.004312498679058],\n    [0.030937631115663, 0.004407434735897],\n    [0.030923963698074, 0.004502329308281],\n    [0.030910005212362, 0.004597181503027],\n    [0.030895755789908, 0.004691990427350],\n    [0.030881215564835, 0.004786755188872],\n    [0.030866384674000, 0.004881474895632],\n    [0.030851263256996, 0.004976148656090],\n    [0.030835851456154, 0.005070775579142],\n    [0.030820149416533, 0.005165354774124],\n    [0.030804157285929, 0.005259885350819],\n    [0.030787875214864, 0.005354366419469],\n    [0.030771303356593, 0.005448797090784],\n    [0.030754441867095, 0.005543176475946],\n    [0.030737290905077, 0.005637503686619],\n    [0.030719850631972, 0.005731777834961],\n    [0.030702121211932, 0.005825998033626],\n    [0.030684102811835, 0.005920163395780],\n    [0.030665795601276, 0.006014273035101],\n    [0.030647199752570, 0.006108326065793],\n    [0.030628315440748, 0.006202321602594],\n    [0.030609142843557, 0.006296258760782],\n    [0.030589682141455, 0.006390136656185],\n    [0.030569933517616, 0.006483954405188],\n    [0.030549897157919, 0.006577711124743],\n    [0.030529573250956, 0.006671405932375],\n    [0.030508961988022, 0.006765037946194],\n    [0.030488063563118, 0.006858606284900],\n    [0.030466878172949, 0.006952110067791],\n    [0.030445406016919, 0.007045548414774],\n    [0.030423647297133, 0.007138920446372],\n    [0.030401602218392, 0.007232225283733],\n    [0.030379270988192, 0.007325462048634],\n    [0.030356653816724, 0.007418629863497],\n    [0.030333750916869, 0.007511727851390],\n    [0.030310562504198, 0.007604755136040],\n    [0.030287088796968, 0.007697710841838],\n    [0.030263330016124, 0.007790594093851],\n    [0.030239286385293, 0.007883404017824],\n    [0.030214958130781, 0.007976139740197],\n    [0.030190345481576, 0.008068800388104],\n    [0.030165448669342, 0.008161385089390],\n    [0.030140267928416, 0.008253892972610],\n    [0.030114803495809, 0.008346323167047],\n    [0.030089055611203, 0.008438674802711],\n    [0.030063024516947, 0.008530947010354],\n    [0.030036710458054, 0.008623138921475],\n    [0.030010113682202, 0.008715249668328],\n    [0.029983234439732, 0.008807278383932],\n    [0.029956072983640, 0.008899224202078],\n    [0.029928629569580, 0.008991086257336],\n    [0.029900904455860, 0.009082863685067],\n    [0.029872897903441, 0.009174555621425],\n    [0.029844610175929, 0.009266161203371],\n    [0.029816041539579, 0.009357679568679],\n    [0.029787192263292, 0.009449109855944],\n    [0.029758062618606, 0.009540451204587],\n    [0.029728652879702, 0.009631702754871],\n    [0.029698963323395, 0.009722863647900],\n    [0.029668994229134, 0.009813933025633],\n    [0.029638745879000, 0.009904910030891],\n    [0.029608218557702, 0.009995793807363],\n    [0.029577412552575, 0.010086583499618],\n    [0.029546328153577, 0.010177278253107],\n    [0.029514965653285, 0.010267877214177],\n    [0.029483325346896, 0.010358379530076],\n    [0.029451407532220, 0.010448784348962],\n    [0.029419212509679, 0.010539090819911],\n    [0.029386740582307, 0.010629298092923],\n    [0.029353992055740, 0.010719405318933],\n    [0.029320967238220, 0.010809411649818],\n    [0.029287666440590, 0.010899316238403],\n    [0.029254089976290, 0.010989118238474],\n    [0.029220238161353, 0.011078816804778],\n    [0.029186111314406, 0.011168411093039],\n    [0.029151709756664, 0.011257900259961],\n    [0.029117033811927, 0.011347283463239],\n    [0.029082083806579, 0.011436559861563],\n    [0.029046860069582, 0.011525728614630],\n    [0.029011362932476, 0.011614788883150],\n    [0.028975592729373, 0.011703739828853],\n    [0.028939549796957, 0.011792580614500],\n    [0.028903234474475, 0.011881310403886],\n    [0.028866647103744, 0.011969928361855],\n    [0.028829788029135, 0.012058433654299],\n    [0.028792657597583, 0.012146825448172],\n    [0.028755256158571, 0.012235102911499],\n    [0.028717584064137, 0.012323265213377],\n    [0.028679641668864, 0.012411311523990],\n    [0.028641429329882, 0.012499241014612],\n    [0.028602947406859, 0.012587052857618],\n    [0.028564196262001, 0.012674746226488],\n    [0.028525176260050, 0.012762320295819],\n    [0.028485887768276, 0.012849774241331],\n    [0.028446331156478, 0.012937107239875],\n    [0.028406506796976, 0.013024318469437],\n    [0.028366415064615, 0.013111407109155],\n    [0.028326056336751, 0.013198372339315],\n    [0.028285430993258, 0.013285213341368],\n    [0.028244539416515, 0.013371929297933],\n    [0.028203381991411, 0.013458519392807],\n    [0.028161959105334, 0.013544982810971],\n    [0.028120271148172, 0.013631318738598],\n    [0.028078318512309, 0.013717526363062],\n    [0.028036101592619, 0.013803604872943],\n    [0.027993620786463, 0.013889553458039],\n    [0.027950876493687, 0.013975371309367],\n    [0.027907869116616, 0.014061057619178],\n    [0.027864599060052, 0.014146611580959],\n    [0.027821066731270, 0.014232032389445],\n    [0.027777272540012, 0.014317319240622],\n    [0.027733216898487, 0.014402471331737],\n    [0.027688900221361, 0.014487487861307],\n    [0.027644322925762, 0.014572368029123],\n    [0.027599485431266, 0.014657111036262],\n    [0.027554388159903, 0.014741716085090],\n    [0.027509031536144, 0.014826182379271],\n    [0.027463415986904, 0.014910509123778],\n    [0.027417541941533, 0.014994695524894],\n    [0.027371409831816, 0.015078740790225],\n    [0.027325020091965, 0.015162644128704],\n    [0.027278373158618, 0.015246404750603],\n    [0.027231469470833, 0.015330021867534],\n    [0.027184309470088, 0.015413494692460],\n    [0.027136893600268, 0.015496822439704],\n    [0.027089222307671, 0.015580004324954],\n    [0.027041296040997, 0.015663039565269],\n    [0.026993115251345, 0.015745927379091],\n    [0.026944680392213, 0.015828666986247],\n    [0.026895991919487, 0.015911257607961],\n    [0.026847050291442, 0.015993698466859],\n    [0.026797855968734, 0.016075988786976],\n    [0.026748409414401, 0.016158127793763],\n    [0.026698711093851, 0.016240114714099],\n    [0.026648761474864, 0.016321948776289],\n    [0.026598561027585, 0.016403629210082],\n    [0.026548110224519, 0.016485155246669],\n    [0.026497409540530, 0.016566526118696],\n    [0.026446459452830, 0.016647741060271],\n    [0.026395260440982, 0.016728799306966],\n    [0.026343812986890, 0.016809700095831],\n    [0.026292117574797, 0.016890442665397],\n    [0.026240174691280, 0.016971026255683],\n    [0.026187984825246, 0.017051450108208],\n    [0.026135548467924, 0.017131713465990],\n    [0.026082866112867, 0.017211815573560],\n    [0.026029938255941, 0.017291755676967],\n    [0.025976765395322, 0.017371533023784],\n    [0.025923348031494, 0.017451146863116],\n    [0.025869686667242, 0.017530596445607],\n    [0.025815781807646, 0.017609881023449],\n    [0.025761633960080, 0.017688999850383],\n    [0.025707243634204, 0.017767952181715],\n    [0.025652611341960, 0.017846737274313],\n    [0.025597737597568, 0.017925354386623],\n    [0.025542622917522, 0.018003802778671],\n    [0.025487267820581, 0.018082081712071],\n    [0.025431672827768, 0.018160190450031],\n    [0.025375838462365, 0.018238128257362],\n    [0.025319765249906, 0.018315894400484],\n    [0.025263453718173, 0.018393488147432],\n    [0.025206904397193, 0.018470908767865],\n    [0.025150117819228, 0.018548155533070],\n    [0.025093094518776, 0.018625227715971],\n    [0.025035835032562, 0.018702124591135],\n    [0.024978339899534, 0.018778845434780],\n    [0.024920609660858, 0.018855389524780],\n    [0.024862644859912, 0.018931756140672],\n    [0.024804446042284, 0.019007944563666],\n    [0.024746013755764, 0.019083954076646],\n    [0.024687348550337, 0.019159783964183],\n    [0.024628450978184, 0.019235433512536],\n    [0.024569321593670, 0.019310902009663],\n    [0.024509960953345, 0.019386188745225],\n    [0.024450369615932, 0.019461293010596],\n    [0.024390548142329, 0.019536214098866],\n    [0.024330497095598, 0.019610951304848],\n    [0.024270217040961, 0.019685503925087],\n    [0.024209708545799, 0.019759871257867],\n    [0.024148972179639, 0.019834052603212],\n    [0.024088008514157, 0.019908047262901],\n    [0.024026818123164, 0.019981854540467],\n    [0.023965401582609, 0.020055473741208],\n    [0.023903759470567, 0.020128904172192],\n    [0.023841892367236, 0.020202145142264],\n    [0.023779800854935, 0.020275195962052],\n    [0.023717485518092, 0.020348055943974],\n    [0.023654946943242, 0.020420724402244],\n    [0.023592185719023, 0.020493200652878],\n    [0.023529202436167, 0.020565484013703],\n    [0.023465997687496, 0.020637573804361],\n    [0.023402572067918, 0.020709469346314],\n    [0.023338926174419, 0.020781169962854],\n    [0.023275060606058, 0.020852674979108],\n    [0.023210975963963, 0.020923983722044],\n    [0.023146672851322, 0.020995095520475],\n    [0.023082151873380, 0.021066009705072],\n    [0.023017413637435, 0.021136725608363],\n    [0.022952458752826, 0.021207242564742],\n    [0.022887287830934, 0.021277559910478],\n    [0.022821901485173, 0.021347676983716],\n    [0.022756300330983, 0.021417593124488],\n    [0.022690484985827, 0.021487307674717],\n    [0.022624456069185, 0.021556819978223],\n    [0.022558214202547, 0.021626129380729],\n    [0.022491760009405, 0.021695235229869],\n    [0.022425094115252, 0.021764136875192],\n    [0.022358217147572, 0.021832833668171],\n    [0.022291129735838, 0.021901324962204],\n    [0.022223832511501, 0.021969610112625],\n    [0.022156326107988, 0.022037688476709],\n    [0.022088611160696, 0.022105559413676],\n    [0.022020688306983, 0.022173222284699],\n    [0.021952558186166, 0.022240676452909],\n    [0.021884221439510, 0.022307921283403],\n    [0.021815678710228, 0.022374956143245],\n    [0.021746930643469, 0.022441780401478],\n    [0.021677977886316, 0.022508393429127],\n    [0.021608821087780, 0.022574794599206],\n    [0.021539460898790, 0.022640983286719],\n    [0.021469897972190, 0.022706958868676],\n    [0.021400132962735, 0.022772720724087],\n    [0.021330166527077, 0.022838268233979],\n    [0.021259999323769, 0.022903600781391],\n    [0.021189632013250, 0.022968717751391],\n    [0.021119065257845, 0.023033618531071],\n    [0.021048299721754, 0.023098302509561],\n    [0.020977336071050, 0.023162769078031],\n    [0.020906174973670, 0.023227017629698],\n    [0.020834817099409, 0.023291047559828],\n    [0.020763263119915, 0.023354858265748],\n    [0.020691513708680, 0.023418449146848],\n    [0.020619569541038, 0.023481819604585],\n    [0.020547431294155, 0.023544969042494],\n    [0.020475099647023, 0.023607896866186],\n    [0.020402575280455, 0.023670602483363],\n    [0.020329858877078, 0.023733085303813],\n    [0.020256951121327, 0.023795344739427],\n    [0.020183852699437, 0.023857380204193],\n    [0.020110564299439, 0.023919191114211],\n    [0.020037086611150, 0.023980776887692],\n    [0.019963420326171, 0.024042136944968],\n    [0.019889566137877, 0.024103270708495],\n    [0.019815524741412, 0.024164177602859],\n    [0.019741296833681, 0.024224857054779],\n    [0.019666883113346, 0.024285308493120],\n    [0.019592284280817, 0.024345531348888],\n    [0.019517501038246, 0.024405525055242],\n    [0.019442534089523, 0.024465289047500],\n    [0.019367384140264, 0.024524822763141],\n    [0.019292051897809, 0.024584125641809],\n    [0.019216538071215, 0.024643197125323],\n    [0.019140843371246, 0.024702036657681],\n    [0.019064968510369, 0.024760643685063],\n    [0.018988914202748, 0.024819017655836],\n    [0.018912681164234, 0.024877158020562],\n    [0.018836270112363, 0.024935064232003],\n    [0.018759681766343, 0.024992735745123],\n    [0.018682916847054, 0.025050172017095],\n    [0.018605976077037, 0.025107372507308],\n    [0.018528860180486, 0.025164336677369],\n    [0.018451569883247, 0.025221063991110],\n    [0.018374105912805, 0.025277553914591],\n    [0.018296468998280, 0.025333805916107],\n    [0.018218659870421, 0.025389819466194],\n    [0.018140679261596, 0.025445594037630],\n    [0.018062527905790, 0.025501129105445],\n    [0.017984206538592, 0.025556424146920],\n    [0.017905715897192, 0.025611478641598],\n    [0.017827056720375, 0.025666292071285],\n    [0.017748229748511, 0.025720863920056],\n    [0.017669235723550, 0.025775193674260],\n    [0.017590075389012, 0.025829280822525],\n    [0.017510749489986, 0.025883124855762],\n    [0.017431258773116, 0.025936725267170],\n    [0.017351603986600, 0.025990081552242],\n    [0.017271785880180, 0.026043193208768],\n    [0.017191805205132, 0.026096059736841],\n    [0.017111662714267, 0.026148680638861],\n    [0.017031359161915, 0.026201055419541],\n    [0.016950895303924, 0.026253183585908],\n    [0.016870271897651, 0.026305064647313],\n    [0.016789489701954, 0.026356698115431],\n    [0.016708549477186, 0.026408083504269],\n    [0.016627451985187, 0.026459220330167],\n    [0.016546197989277, 0.026510108111806],\n    [0.016464788254250, 0.026560746370212],\n    [0.016383223546365, 0.026611134628757],\n    [0.016301504633341, 0.026661272413168],\n    [0.016219632284346, 0.026711159251530],\n    [0.016137607269996, 0.026760794674288],\n    [0.016055430362340, 0.026810178214254],\n    [0.015973102334858, 0.026859309406613],\n    [0.015890623962454, 0.026908187788922],\n    [0.015807996021446, 0.026956812901119],\n    [0.015725219289558, 0.027005184285527],\n    [0.015642294545918, 0.027053301486856],\n    [0.015559222571044, 0.027101164052208],\n    [0.015476004146842, 0.027148771531083],\n    [0.015392640056594, 0.027196123475380],\n    [0.015309131084956, 0.027243219439406],\n    [0.015225478017946, 0.027290058979875],\n    [0.015141681642938, 0.027336641655915],\n    [0.015057742748656, 0.027382967029073],\n    [0.014973662125164, 0.027429034663317],\n    [0.014889440563862, 0.027474844125040],\n    [0.014805078857474, 0.027520394983066],\n    [0.014720577800046, 0.027565686808654],\n    [0.014635938186934, 0.027610719175499],\n    [0.014551160814797, 0.027655491659740],\n    [0.014466246481592, 0.027700003839960],\n    [0.014381195986567, 0.027744255297195],\n    [0.014296010130247, 0.027788245614933],\n    [0.014210689714436, 0.027831974379120],\n    [0.014125235542201, 0.027875441178165],\n    [0.014039648417870, 0.027918645602941],\n    [0.013953929147020, 0.027961587246792],\n    [0.013868078536476, 0.028004265705534],\n    [0.013782097394294, 0.028046680577462],\n    [0.013695986529763, 0.028088831463351],\n    [0.013609746753390, 0.028130717966461],\n    [0.013523378876898, 0.028172339692540],\n    [0.013436883713214, 0.028213696249828],\n    [0.013350262076462, 0.028254787249062],\n    [0.013263514781960, 0.028295612303478],\n    [0.013176642646205, 0.028336171028814],\n    [0.013089646486871, 0.028376463043317],\n    [0.013002527122799, 0.028416487967743],\n    [0.012915285373990, 0.028456245425361],\n    [0.012827922061597, 0.028495735041960],\n    [0.012740438007915, 0.028534956445849],\n    [0.012652834036379, 0.028573909267859],\n    [0.012565110971550, 0.028612593141354],\n    [0.012477269639111, 0.028651007702224],\n    [0.012389310865858, 0.028689152588899],\n    [0.012301235479693, 0.028727027442343],\n    [0.012213044309615, 0.028764631906065],\n    [0.012124738185712, 0.028801965626115],\n    [0.012036317939156, 0.028839028251097],\n    [0.011947784402191, 0.028875819432161],\n    [0.011859138408130, 0.028912338823015],\n    [0.011770380791341, 0.028948586079925],\n    [0.011681512387245, 0.028984560861718],\n    [0.011592534032306, 0.029020262829785],\n    [0.011503446564022, 0.029055691648087],\n    [0.011414250820918, 0.029090846983152],\n    [0.011324947642537, 0.029125728504087],\n    [0.011235537869437, 0.029160335882573],\n    [0.011146022343175, 0.029194668792871],\n    [0.011056401906305, 0.029228726911828],\n    [0.010966677402371, 0.029262509918876],\n    [0.010876849675891, 0.029296017496036],\n    [0.010786919572361, 0.029329249327922],\n    [0.010696887938235, 0.029362205101743],\n    [0.010606755620926, 0.029394884507308],\n    [0.010516523468793, 0.029427287237024],\n    [0.010426192331137, 0.029459412985906],\n    [0.010335763058187, 0.029491261451573],\n    [0.010245236501099, 0.029522832334255],\n    [0.010154613511943, 0.029554125336796],\n    [0.010063894943698, 0.029585140164654],\n    [0.009973081650240, 0.029615876525905],\n    [0.009882174486340, 0.029646334131247],\n    [0.009791174307650, 0.029676512694001],\n    [0.009700081970699, 0.029706411930116],\n    [0.009608898332881, 0.029736031558168],\n    [0.009517624252453, 0.029765371299366],\n    [0.009426260588521, 0.029794430877553],\n    [0.009334808201034, 0.029823210019210],\n    [0.009243267950778, 0.029851708453456],\n    [0.009151640699363, 0.029879925912053],\n    [0.009059927309220, 0.029907862129408],\n    [0.008968128643591, 0.029935516842573],\n    [0.008876245566520, 0.029962889791254],\n    [0.008784278942845, 0.029989980717805],\n    [0.008692229638191, 0.030016789367235],\n    [0.008600098518961, 0.030043315487212],\n    [0.008507886452329, 0.030069558828062],\n    [0.008415594306230, 0.030095519142772],\n    [0.008323222949351, 0.030121196186994],\n    [0.008230773251129, 0.030146589719046],\n    [0.008138246081733, 0.030171699499915],\n    [0.008045642312067, 0.030196525293257],\n    [0.007952962813750, 0.030221066865402],\n    [0.007860208459119, 0.030245323985357],\n    [0.007767380121212, 0.030269296424803],\n    [0.007674478673766, 0.030292983958103],\n    [0.007581504991203, 0.030316386362302],\n    [0.007488459948628, 0.030339503417126],\n    [0.007395344421816, 0.030362334904989],\n    [0.007302159287206, 0.030384880610993],\n    [0.007208905421891, 0.030407140322928],\n    [0.007115583703613, 0.030429113831278],\n    [0.007022195010752, 0.030450800929220],\n    [0.006928740222316, 0.030472201412626],\n    [0.006835220217939, 0.030493315080068],\n    [0.006741635877866, 0.030514141732814],\n    [0.006647988082948, 0.030534681174838],\n    [0.006554277714635, 0.030554933212813],\n    [0.006460505654964, 0.030574897656119],\n    [0.006366672786553, 0.030594574316845],\n    [0.006272779992593, 0.030613963009786],\n    [0.006178828156839, 0.030633063552447],\n    [0.006084818163601, 0.030651875765048],\n    [0.005990750897737, 0.030670399470520],\n    [0.005896627244644, 0.030688634494512],\n    [0.005802448090250, 0.030706580665388],\n    [0.005708214321004, 0.030724237814232],\n    [0.005613926823871, 0.030741605774849],\n    [0.005519586486321, 0.030758684383764],\n    [0.005425194196321, 0.030775473480228],\n    [0.005330750842327, 0.030791972906214],\n    [0.005236257313276, 0.030808182506425],\n    [0.005141714498576, 0.030824102128288],\n    [0.005047123288102, 0.030839731621963],\n    [0.004952484572181, 0.030855070840339],\n    [0.004857799241589, 0.030870119639036],\n    [0.004763068187541, 0.030884877876411],\n    [0.004668292301681, 0.030899345413553],\n    [0.004573472476075, 0.030913522114288],\n    [0.004478609603205, 0.030927407845180],\n    [0.004383704575956, 0.030941002475530],\n    [0.004288758287610, 0.030954305877381],\n    [0.004193771631837, 0.030967317925516],\n    [0.004098745502689, 0.030980038497461],\n    [0.004003680794587, 0.030992467473486],\n    [0.003908578402316, 0.031004604736602],\n    [0.003813439221017, 0.031016450172571],\n    [0.003718264146176, 0.031028003669899],\n    [0.003623054073616, 0.031039265119839],\n    [0.003527809899492, 0.031050234416394],\n    [0.003432532520278, 0.031060911456318],\n    [0.003337222832760, 0.031071296139114],\n    [0.003241881734029, 0.031081388367037],\n    [0.003146510121474, 0.031091188045095],\n    [0.003051108892766, 0.031100695081051],\n    [0.002955678945860, 0.031109909385419],\n    [0.002860221178978, 0.031118830871473],\n    [0.002764736490604, 0.031127459455239],\n    [0.002669225779478, 0.031135795055501],\n    [0.002573689944583, 0.031143837593803],\n    [0.002478129885137, 0.031151586994444],\n    [0.002382546500589, 0.031159043184484],\n    [0.002286940690606, 0.031166206093743],\n    [0.002191313355067, 0.031173075654800],\n    [0.002095665394051, 0.031179651802998],\n    [0.001999997707835, 0.031185934476438],\n    [0.001904311196878, 0.031191923615985],\n    [0.001808606761820, 0.031197619165268],\n    [0.001712885303465, 0.031203021070678],\n    [0.001617147722782, 0.031208129281370],\n    [0.001521394920889, 0.031212943749264],\n    [0.001425627799047, 0.031217464429043],\n    [0.001329847258653, 0.031221691278159],\n    [0.001234054201231, 0.031225624256825],\n    [0.001138249528420, 0.031229263328024],\n    [0.001042434141971, 0.031232608457502],\n    [0.000946608943736, 0.031235659613775],\n    [0.000850774835656, 0.031238416768124],\n    [0.000754932719759, 0.031240879894597],\n    [0.000659083498149, 0.031243048970010],\n    [0.000563228072993, 0.031244923973948],\n    [0.000467367346520, 0.031246504888762],\n    [0.000371502221008, 0.031247791699571],\n    [0.000275633598775, 0.031248784394264],\n    [0.000179762382174, 0.031249482963498],\n    [0.000083889473581, 0.031249887400697]\n];\n\nexports.MDCT_TABLE_256 = [\n    [0.088387931675923, 0.000271171628935],\n    [0.088354655998507, 0.002440238387037],\n    [0.088268158780110, 0.004607835236780],\n    [0.088128492123423, 0.006772656498875],\n    [0.087935740158418, 0.008933398165942],\n    [0.087690018991670, 0.011088758687994],\n    [0.087391476636423, 0.013237439756448],\n    [0.087040292923427, 0.015378147086172],\n    [0.086636679392621, 0.017509591195118],\n    [0.086180879165703, 0.019630488181053],\n    [0.085673166799686, 0.021739560494940],\n    [0.085113848121515, 0.023835537710479],\n    [0.084503260043847, 0.025917157289369],\n    [0.083841770362110, 0.027983165341813],\n    [0.083129777532952, 0.030032317381813],\n    [0.082367710434230, 0.032063379076803],\n    [0.081556028106671, 0.034075126991164],\n    [0.080695219477356, 0.036066349323177],\n    [0.079785803065216, 0.038035846634965],\n    [0.078828326668693, 0.039982432574992],\n    [0.077823367035766, 0.041904934592675],\n    [0.076771529516540, 0.043802194644686],\n    [0.075673447698606, 0.045673069892513],\n    [0.074529783025390, 0.047516433390863],\n    [0.073341224397728, 0.049331174766491],\n    [0.072108487758894, 0.051116200887052],\n    [0.070832315663343, 0.052870436519557],\n    [0.069513476829429, 0.054592824978055],\n    [0.068152765676348, 0.056282328760143],\n    [0.066751001845620, 0.057937930171918],\n    [0.065309029707361, 0.059558631940996],\n    [0.063827717851668, 0.061143457817234],\n    [0.062307958565413, 0.062691453160784],\n    [0.060750667294763, 0.064201685517134],\n    [0.059156782093749, 0.065673245178784],\n    [0.057527263059216, 0.067105245733220],\n    [0.055863091752499, 0.068496824596852],\n    [0.054165270608165, 0.069847143534609],\n    [0.052434822330188, 0.071155389164853],\n    [0.050672789275903, 0.072420773449336],\n    [0.048880232828135, 0.073642534167879],\n    [0.047058232755862, 0.074819935377512],\n    [0.045207886563797, 0.075952267855771],\n    [0.043330308831298, 0.077038849527912],\n    [0.041426630540984, 0.078079025877766],\n    [0.039497998397473, 0.079072170341994],\n    [0.037545574136653, 0.080017684687506],\n    [0.035570533825892, 0.080914999371817],\n    [0.033574067155622, 0.081763573886112],\n    [0.031557376722714, 0.082562897080836],\n    [0.029521677306074, 0.083312487473584],\n    [0.027468195134911, 0.084011893539132],\n    [0.025398167150101, 0.084660693981419],\n    [0.023312840259098, 0.085258497987320],\n    [0.021213470584847, 0.085804945462053],\n    [0.019101322709138, 0.086299707246093],\n    [0.016977668910873, 0.086742485313442],\n    [0.014843788399692, 0.087133012951149],\n    [0.012700966545425, 0.087471054919968],\n    [0.010550494103830, 0.087756407596056],\n    [0.008393666439096, 0.087988899093631],\n    [0.006231782743558, 0.088168389368510],\n    [0.004066145255116, 0.088294770302461],\n    [0.001898058472816, 0.088367965768336]\n];                                      \n\nexports.MDCT_TABLE_1920 = [             \n    [0.032274858518097, 0.000013202404176],\n    [0.032274642494505, 0.000118821372483],\n    [0.032274080835421, 0.000224439068308],\n    [0.032273173546860, 0.000330054360572],\n    [0.032271920638538, 0.000435666118218],\n    [0.032270322123873, 0.000541273210231],\n    [0.032268378019984, 0.000646874505642],\n    [0.032266088347691, 0.000752468873546],\n    [0.032263453131514, 0.000858055183114],\n    [0.032260472399674, 0.000963632303600],\n    [0.032257146184092, 0.001069199104358],\n    [0.032253474520390, 0.001174754454853],\n    [0.032249457447888, 0.001280297224671],\n    [0.032245095009606, 0.001385826283535],\n    [0.032240387252262, 0.001491340501313],\n    [0.032235334226272, 0.001596838748031],\n    [0.032229935985750, 0.001702319893890],\n    [0.032224192588507, 0.001807782809271],\n    [0.032218104096050, 0.001913226364749],\n    [0.032211670573582, 0.002018649431111],\n    [0.032204892090000, 0.002124050879359],\n    [0.032197768717898, 0.002229429580728],\n    [0.032190300533560, 0.002334784406698],\n    [0.032182487616965, 0.002440114229003],\n    [0.032174330051782, 0.002545417919644],\n    [0.032165827925374, 0.002650694350905],\n    [0.032156981328790, 0.002755942395358],\n    [0.032147790356771, 0.002861160925883],\n    [0.032138255107744, 0.002966348815672],\n    [0.032128375683825, 0.003071504938250],\n    [0.032118152190814, 0.003176628167476],\n    [0.032107584738196, 0.003281717377568],\n    [0.032096673439141, 0.003386771443102],\n    [0.032085418410500, 0.003491789239036],\n    [0.032073819772804, 0.003596769640711],\n    [0.032061877650267, 0.003701711523874],\n    [0.032049592170778, 0.003806613764680],\n    [0.032036963465906, 0.003911475239711],\n    [0.032023991670893, 0.004016294825985],\n    [0.032010676924657, 0.004121071400967],\n    [0.031997019369789, 0.004225803842586],\n    [0.031983019152549, 0.004330491029241],\n    [0.031968676422869, 0.004435131839816],\n    [0.031953991334348, 0.004539725153692],\n    [0.031938964044252, 0.004644269850758],\n    [0.031923594713510, 0.004748764811426],\n    [0.031907883506716, 0.004853208916638],\n    [0.031891830592124, 0.004957601047881],\n    [0.031875436141648, 0.005061940087200],\n    [0.031858700330859, 0.005166224917208],\n    [0.031841623338985, 0.005270454421097],\n    [0.031824205348907, 0.005374627482653],\n    [0.031806446547156, 0.005478742986267],\n    [0.031788347123916, 0.005582799816945],\n    [0.031769907273017, 0.005686796860323],\n    [0.031751127191935, 0.005790733002674],\n    [0.031732007081789, 0.005894607130928],\n    [0.031712547147340, 0.005998418132675],\n    [0.031692747596989, 0.006102164896182],\n    [0.031672608642773, 0.006205846310406],\n    [0.031652130500364, 0.006309461265002],\n    [0.031631313389067, 0.006413008650337],\n    [0.031610157531816, 0.006516487357501],\n    [0.031588663155172, 0.006619896278321],\n    [0.031566830489325, 0.006723234305370],\n    [0.031544659768083, 0.006826500331981],\n    [0.031522151228878, 0.006929693252258],\n    [0.031499305112758, 0.007032811961088],\n    [0.031476121664387, 0.007135855354151],\n    [0.031452601132040, 0.007238822327937],\n    [0.031428743767604, 0.007341711779751],\n    [0.031404549826572, 0.007444522607730],\n    [0.031380019568042, 0.007547253710853],\n    [0.031355153254712, 0.007649903988952],\n    [0.031329951152882, 0.007752472342725],\n    [0.031304413532445, 0.007854957673748],\n    [0.031278540666888, 0.007957358884484],\n    [0.031252332833290, 0.008059674878300],\n    [0.031225790312316, 0.008161904559473],\n    [0.031198913388214, 0.008264046833205],\n    [0.031171702348814, 0.008366100605636],\n    [0.031144157485525, 0.008468064783849],\n    [0.031116279093331, 0.008569938275893],\n    [0.031088067470786, 0.008671719990782],\n    [0.031059522920014, 0.008773408838517],\n    [0.031030645746705, 0.008875003730092],\n    [0.031001436260110, 0.008976503577507],\n    [0.030971894773039, 0.009077907293780],\n    [0.030942021601857, 0.009179213792959],\n    [0.030911817066483, 0.009280421990133],\n    [0.030881281490382, 0.009381530801444],\n    [0.030850415200566, 0.009482539144097],\n    [0.030819218527589, 0.009583445936373],\n    [0.030787691805541, 0.009684250097643],\n    [0.030755835372048, 0.009784950548375],\n    [0.030723649568268, 0.009885546210147],\n    [0.030691134738883, 0.009986036005661],\n    [0.030658291232103, 0.010086418858753],\n    [0.030625119399655, 0.010186693694402],\n    [0.030591619596781, 0.010286859438745],\n    [0.030557792182239, 0.010386915019088],\n    [0.030523637518292, 0.010486859363916],\n    [0.030489155970710, 0.010586691402906],\n    [0.030454347908763, 0.010686410066936],\n    [0.030419213705216, 0.010786014288099],\n    [0.030383753736329, 0.010885502999714],\n    [0.030347968381849, 0.010984875136338],\n    [0.030311858025010, 0.011084129633775],\n    [0.030275423052523, 0.011183265429088],\n    [0.030238663854579, 0.011282281460612],\n    [0.030201580824838, 0.011381176667967],\n    [0.030164174360430, 0.011479949992062],\n    [0.030126444861948, 0.011578600375117],\n    [0.030088392733446, 0.011677126760663],\n    [0.030050018382430, 0.011775528093563],\n    [0.030011322219859, 0.011873803320018],\n    [0.029972304660138, 0.011971951387578],\n    [0.029932966121114, 0.012069971245157],\n    [0.029893307024070, 0.012167861843041],\n    [0.029853327793724, 0.012265622132901],\n    [0.029813028858222, 0.012363251067801],\n    [0.029772410649132, 0.012460747602215],\n    [0.029731473601443, 0.012558110692033],\n    [0.029690218153558, 0.012655339294575],\n    [0.029648644747289, 0.012752432368600],\n    [0.029606753827855, 0.012849388874320],\n    [0.029564545843872, 0.012946207773407],\n    [0.029522021247356, 0.013042888029011],\n    [0.029479180493710, 0.013139428605762],\n    [0.029436024041725, 0.013235828469789],\n    [0.029392552353570, 0.013332086588727],\n    [0.029348765894794, 0.013428201931728],\n    [0.029304665134313, 0.013524173469475],\n    [0.029260250544412, 0.013620000174189],\n    [0.029215522600735, 0.013715681019643],\n    [0.029170481782283, 0.013811214981173],\n    [0.029125128571406, 0.013906601035686],\n    [0.029079463453801, 0.014001838161674],\n    [0.029033486918505, 0.014096925339225],\n    [0.028987199457889, 0.014191861550031],\n    [0.028940601567655, 0.014286645777401],\n    [0.028893693746829, 0.014381277006273],\n    [0.028846476497755, 0.014475754223221],\n    [0.028798950326094, 0.014570076416472],\n    [0.028751115740811, 0.014664242575910],\n    [0.028702973254178, 0.014758251693091],\n    [0.028654523381760, 0.014852102761253],\n    [0.028605766642418, 0.014945794775326],\n    [0.028556703558297, 0.015039326731945],\n    [0.028507334654823, 0.015132697629457],\n    [0.028457660460698, 0.015225906467935],\n    [0.028407681507891, 0.015318952249187],\n    [0.028357398331639, 0.015411833976768],\n    [0.028306811470432, 0.015504550655988],\n    [0.028255921466016, 0.015597101293927],\n    [0.028204728863381, 0.015689484899442],\n    [0.028153234210760, 0.015781700483179],\n    [0.028101438059619, 0.015873747057582],\n    [0.028049340964652, 0.015965623636907],\n    [0.027996943483779, 0.016057329237229],\n    [0.027944246178133, 0.016148862876456],\n    [0.027891249612061, 0.016240223574335],\n    [0.027837954353113, 0.016331410352467],\n    [0.027784360972039, 0.016422422234315],\n    [0.027730470042780, 0.016513258245214],\n    [0.027676282142466, 0.016603917412384],\n    [0.027621797851405, 0.016694398764938],\n    [0.027567017753080, 0.016784701333894],\n    [0.027511942434143, 0.016874824152183],\n    [0.027456572484404, 0.016964766254662],\n    [0.027400908496833, 0.017054526678124],\n    [0.027344951067546, 0.017144104461307],\n    [0.027288700795801, 0.017233498644904],\n    [0.027232158283994, 0.017322708271577],\n    [0.027175324137651, 0.017411732385960],\n    [0.027118198965418, 0.017500570034678],\n    [0.027060783379060, 0.017589220266351],\n    [0.027003077993454, 0.017677682131607],\n    [0.026945083426576, 0.017765954683088],\n    [0.026886800299502, 0.017854036975468],\n    [0.026828229236397, 0.017941928065456],\n    [0.026769370864511, 0.018029627011808],\n    [0.026710225814170, 0.018117132875340],\n    [0.026650794718768, 0.018204444718934],\n    [0.026591078214767, 0.018291561607551],\n    [0.026531076941680, 0.018378482608238],\n    [0.026470791542075, 0.018465206790142],\n    [0.026410222661558, 0.018551733224515],\n    [0.026349370948775, 0.018638060984730],\n    [0.026288237055398, 0.018724189146286],\n    [0.026226821636121, 0.018810116786819],\n    [0.026165125348656, 0.018895842986112],\n    [0.026103148853718, 0.018981366826109],\n    [0.026040892815028, 0.019066687390916],\n    [0.025978357899296, 0.019151803766819],\n    [0.025915544776223, 0.019236715042290],\n    [0.025852454118485, 0.019321420307998],\n    [0.025789086601733, 0.019405918656817],\n    [0.025725442904582, 0.019490209183837],\n    [0.025661523708606, 0.019574290986376],\n    [0.025597329698327, 0.019658163163984],\n    [0.025532861561211, 0.019741824818458],\n    [0.025468119987662, 0.019825275053848],\n    [0.025403105671008, 0.019908512976470],\n    [0.025337819307501, 0.019991537694913],\n    [0.025272261596305, 0.020074348320047],\n    [0.025206433239491, 0.020156943965039],\n    [0.025140334942028, 0.020239323745355],\n    [0.025073967411776, 0.020321486778774],\n    [0.025007331359476, 0.020403432185395],\n    [0.024940427498748, 0.020485159087650],\n    [0.024873256546079, 0.020566666610309],\n    [0.024805819220816, 0.020647953880491],\n    [0.024738116245157, 0.020729020027676],\n    [0.024670148344147, 0.020809864183709],\n    [0.024601916245669, 0.020890485482816],\n    [0.024533420680433, 0.020970883061607],\n    [0.024464662381971, 0.021051056059087],\n    [0.024395642086630, 0.021131003616670],\n    [0.024326360533561, 0.021210724878181],\n    [0.024256818464715, 0.021290218989868],\n    [0.024187016624830, 0.021369485100415],\n    [0.024116955761430, 0.021448522360944],\n    [0.024046636624808, 0.021527329925030],\n    [0.023976059968027, 0.021605906948708],\n    [0.023905226546906, 0.021684252590480],\n    [0.023834137120014, 0.021762366011328],\n    [0.023762792448662, 0.021840246374720],\n    [0.023691193296893, 0.021917892846620],\n    [0.023619340431478, 0.021995304595495],\n    [0.023547234621902, 0.022072480792330],\n    [0.023474876640361, 0.022149420610628],\n    [0.023402267261751, 0.022226123226426],\n    [0.023329407263659, 0.022302587818300],\n    [0.023256297426359, 0.022378813567377],\n    [0.023182938532797, 0.022454799657339],\n    [0.023109331368588, 0.022530545274437],\n    [0.023035476722006, 0.022606049607496],\n    [0.022961375383975, 0.022681311847926],\n    [0.022887028148061, 0.022756331189727],\n    [0.022812435810462, 0.022831106829504],\n    [0.022737599170003, 0.022905637966469],\n    [0.022662519028125, 0.022979923802453],\n    [0.022587196188874, 0.023053963541915],\n    [0.022511631458899, 0.023127756391950],\n    [0.022435825647437, 0.023201301562294],\n    [0.022359779566306, 0.023274598265338],\n    [0.022283494029900, 0.023347645716133],\n    [0.022206969855176, 0.023420443132400],\n    [0.022130207861645, 0.023492989734537],\n    [0.022053208871367, 0.023565284745628],\n    [0.021975973708940, 0.023637327391451],\n    [0.021898503201489, 0.023709116900488],\n    [0.021820798178663, 0.023780652503931],\n    [0.021742859472618, 0.023851933435691],\n    [0.021664687918017, 0.023922958932406],\n    [0.021586284352013, 0.023993728233451],\n    [0.021507649614247, 0.024064240580942],\n    [0.021428784546832, 0.024134495219750],\n    [0.021349689994350, 0.024204491397504],\n    [0.021270366803840, 0.024274228364600],\n    [0.021190815824791, 0.024343705374213],\n    [0.021111037909128, 0.024412921682298],\n    [0.021031033911210, 0.024481876547605],\n    [0.020950804687815, 0.024550569231683],\n    [0.020870351098134, 0.024618998998889],\n    [0.020789674003759, 0.024687165116394],\n    [0.020708774268678, 0.024755066854194],\n    [0.020627652759262, 0.024822703485116],\n    [0.020546310344257, 0.024890074284826],\n    [0.020464747894775, 0.024957178531837],\n    [0.020382966284284, 0.025024015507516],\n    [0.020300966388600, 0.025090584496093],\n    [0.020218749085876, 0.025156884784668],\n    [0.020136315256592, 0.025222915663218],\n    [0.020053665783549, 0.025288676424605],\n    [0.019970801551857, 0.025354166364584],\n    [0.019887723448925, 0.025419384781811],\n    [0.019804432364452, 0.025484330977848],\n    [0.019720929190419, 0.025549004257175],\n    [0.019637214821078, 0.025613403927192],\n    [0.019553290152943, 0.025677529298230],\n    [0.019469156084779, 0.025741379683559],\n    [0.019384813517595, 0.025804954399392],\n    [0.019300263354632, 0.025868252764895],\n    [0.019215506501354, 0.025931274102193],\n    [0.019130543865439, 0.025994017736379],\n    [0.019045376356769, 0.026056482995518],\n    [0.018960004887419, 0.026118669210657],\n    [0.018874430371648, 0.026180575715833],\n    [0.018788653725892, 0.026242201848076],\n    [0.018702675868750, 0.026303546947421],\n    [0.018616497720974, 0.026364610356909],\n    [0.018530120205464, 0.026425391422602],\n    [0.018443544247254, 0.026485889493583],\n    [0.018356770773502, 0.026546103921965],\n    [0.018269800713483, 0.026606034062902],\n    [0.018182634998576, 0.026665679274589],\n    [0.018095274562256, 0.026725038918274],\n    [0.018007720340083, 0.026784112358263],\n    [0.017919973269692, 0.026842898961926],\n    [0.017832034290785, 0.026901398099707],\n    [0.017743904345116, 0.026959609145127],\n    [0.017655584376488, 0.027017531474792],\n    [0.017567075330734, 0.027075164468401],\n    [0.017478378155718, 0.027132507508750],\n    [0.017389493801313, 0.027189559981742],\n    [0.017300423219401, 0.027246321276391],\n    [0.017211167363854, 0.027302790784828],\n    [0.017121727190533, 0.027358967902310],\n    [0.017032103657269, 0.027414852027226],\n    [0.016942297723858, 0.027470442561102],\n    [0.016852310352050, 0.027525738908608],\n    [0.016762142505537, 0.027580740477564],\n    [0.016671795149944, 0.027635446678948],\n    [0.016581269252819, 0.027689856926900],\n    [0.016490565783622, 0.027743970638730],\n    [0.016399685713714, 0.027797787234924],\n    [0.016308630016347, 0.027851306139149],\n    [0.016217399666655, 0.027904526778260],\n    [0.016125995641641, 0.027957448582309],\n    [0.016034418920170, 0.028010070984544],\n    [0.015942670482954, 0.028062393421421],\n    [0.015850751312545, 0.028114415332610],\n    [0.015758662393324, 0.028166136160998],\n    [0.015666404711489, 0.028217555352697],\n    [0.015573979255046, 0.028268672357047],\n    [0.015481387013797, 0.028319486626627],\n    [0.015388628979331, 0.028369997617257],\n    [0.015295706145012, 0.028420204788004],\n    [0.015202619505968, 0.028470107601191],\n    [0.015109370059084, 0.028519705522399],\n    [0.015015958802984, 0.028568998020472],\n    [0.014922386738030, 0.028617984567529],\n    [0.014828654866302, 0.028666664638963],\n    [0.014734764191593, 0.028715037713449],\n    [0.014640715719398, 0.028763103272951],\n    [0.014546510456900, 0.028810860802724],\n    [0.014452149412962, 0.028858309791325],\n    [0.014357633598114, 0.028905449730613],\n    [0.014262964024545, 0.028952280115756],\n    [0.014168141706090, 0.028998800445240],\n    [0.014073167658220, 0.029045010220868],\n    [0.013978042898030, 0.029090908947771],\n    [0.013882768444231, 0.029136496134411],\n    [0.013787345317136, 0.029181771292585],\n    [0.013691774538648, 0.029226733937433],\n    [0.013596057132255, 0.029271383587441],\n    [0.013500194123014, 0.029315719764447],\n    [0.013404186537539, 0.029359741993647],\n    [0.013308035403995, 0.029403449803598],\n    [0.013211741752084, 0.029446842726223],\n    [0.013115306613032, 0.029489920296820],\n    [0.013018731019584, 0.029532682054063],\n    [0.012922016005985, 0.029575127540008],\n    [0.012825162607977, 0.029617256300097],\n    [0.012728171862781, 0.029659067883165],\n    [0.012631044809089, 0.029700561841444],\n    [0.012533782487056, 0.029741737730567],\n    [0.012436385938281, 0.029782595109573],\n    [0.012338856205805, 0.029823133540913],\n    [0.012241194334091, 0.029863352590452],\n    [0.012143401369021, 0.029903251827477],\n    [0.012045478357878, 0.029942830824699],\n    [0.011947426349339, 0.029982089158259],\n    [0.011849246393462, 0.030021026407731],\n    [0.011750939541676, 0.030059642156129],\n    [0.011652506846768, 0.030097935989909],\n    [0.011553949362874, 0.030135907498976],\n    [0.011455268145464, 0.030173556276684],\n    [0.011356464251335, 0.030210881919845],\n    [0.011257538738598, 0.030247884028732],\n    [0.011158492666665, 0.030284562207083],\n    [0.011059327096240, 0.030320916062102],\n    [0.010960043089307, 0.030356945204470],\n    [0.010860641709118, 0.030392649248343],\n    [0.010761124020182, 0.030428027811361],\n    [0.010661491088253, 0.030463080514646],\n    [0.010561743980319, 0.030497806982812],\n    [0.010461883764593, 0.030532206843968],\n    [0.010361911510496, 0.030566279729717],\n    [0.010261828288652, 0.030600025275167],\n    [0.010161635170872, 0.030633443118931],\n    [0.010061333230142, 0.030666532903129],\n    [0.009960923540617, 0.030699294273397],\n    [0.009860407177603, 0.030731726878888],\n    [0.009759785217550, 0.030763830372273],\n    [0.009659058738038, 0.030795604409750],\n    [0.009558228817767, 0.030827048651045],\n    [0.009457296536545, 0.030858162759415],\n    [0.009356262975275, 0.030888946401653],\n    [0.009255129215945, 0.030919399248091],\n    [0.009153896341616, 0.030949520972603],\n    [0.009052565436412, 0.030979311252611],\n    [0.008951137585505, 0.031008769769084],\n    [0.008849613875105, 0.031037896206544],\n    [0.008747995392451, 0.031066690253072],\n    [0.008646283225794, 0.031095151600306],\n    [0.008544478464390, 0.031123279943448],\n    [0.008442582198486, 0.031151074981266],\n    [0.008340595519310, 0.031178536416098],\n    [0.008238519519057, 0.031205663953853],\n    [0.008136355290878, 0.031232457304017],\n    [0.008034103928871, 0.031258916179656],\n    [0.007931766528065, 0.031285040297416],\n    [0.007829344184412, 0.031310829377528],\n    [0.007726837994772, 0.031336283143813],\n    [0.007624249056906, 0.031361401323680],\n    [0.007521578469457, 0.031386183648135],\n    [0.007418827331946, 0.031410629851778],\n    [0.007315996744755, 0.031434739672811],\n    [0.007213087809115, 0.031458512853036],\n    [0.007110101627101, 0.031481949137863],\n    [0.007007039301610, 0.031505048276306],\n    [0.006903901936357, 0.031527810020993],\n    [0.006800690635862, 0.031550234128164],\n    [0.006697406505433, 0.031572320357675],\n    [0.006594050651161, 0.031594068473000],\n    [0.006490624179905, 0.031615478241233],\n    [0.006387128199278, 0.031636549433095],\n    [0.006283563817639, 0.031657281822929],\n    [0.006179932144080, 0.031677675188707],\n    [0.006076234288412, 0.031697729312034],\n    [0.005972471361157, 0.031717443978146],\n    [0.005868644473532, 0.031736818975914],\n    [0.005764754737440, 0.031755854097848],\n    [0.005660803265456, 0.031774549140098],\n    [0.005556791170816, 0.031792903902453],\n    [0.005452719567407, 0.031810918188350],\n    [0.005348589569753, 0.031828591804869],\n    [0.005244402293001, 0.031845924562742],\n    [0.005140158852914, 0.031862916276347],\n    [0.005035860365855, 0.031879566763717],\n    [0.004931507948778, 0.031895875846539],\n    [0.004827102719212, 0.031911843350155],\n    [0.004722645795254, 0.031927469103567],\n    [0.004618138295554, 0.031942752939435],\n    [0.004513581339303, 0.031957694694082],\n    [0.004408976046222, 0.031972294207493],\n    [0.004304323536549, 0.031986551323320],\n    [0.004199624931030, 0.032000465888879],\n    [0.004094881350902, 0.032014037755158],\n    [0.003990093917884, 0.032027266776813],\n    [0.003885263754166, 0.032040152812170],\n    [0.003780391982394, 0.032052695723232],\n    [0.003675479725661, 0.032064895375674],\n    [0.003570528107494, 0.032076751638847],\n    [0.003465538251839, 0.032088264385780],\n    [0.003360511283053, 0.032099433493181],\n    [0.003255448325892, 0.032110258841438],\n    [0.003150350505494, 0.032120740314619],\n    [0.003045218947373, 0.032130877800478],\n    [0.002940054777404, 0.032140671190449],\n    [0.002834859121810, 0.032150120379653],\n    [0.002729633107153, 0.032159225266897],\n    [0.002624377860318, 0.032167985754674],\n    [0.002519094508504, 0.032176401749168],\n    [0.002413784179212, 0.032184473160250],\n    [0.002308448000231, 0.032192199901481],\n    [0.002203087099626, 0.032199581890114],\n    [0.002097702605728, 0.032206619047093],\n    [0.001992295647121, 0.032213311297057],\n    [0.001886867352628, 0.032219658568338],\n    [0.001781418851302, 0.032225660792960],\n    [0.001675951272410, 0.032231317906644],\n    [0.001570465745428, 0.032236629848809],\n    [0.001464963400018, 0.032241596562566],\n    [0.001359445366028, 0.032246217994727],\n    [0.001253912773470, 0.032250494095799],\n    [0.001148366752513, 0.032254424819990],\n    [0.001042808433471, 0.032258010125204],\n    [0.000937238946789, 0.032261249973045],\n    [0.000831659423030, 0.032264144328817],\n    [0.000726070992868, 0.032266693161525],\n    [0.000620474787068, 0.032268896443871],\n    [0.000514871936481, 0.032270754152261],\n    [0.000409263572030, 0.032272266266801],\n    [0.000303650824695, 0.032273432771295],\n    [0.000198034825504, 0.032274253653254],\n    [0.000092416705518, 0.032274728903884]\n];\n\nexports.MDCT_TABLE_240 = [              \n    [0.091286604111815, 0.000298735779793],\n    [0.091247502481454, 0.002688238127538],\n    [0.091145864370807, 0.005075898091152],\n    [0.090981759437558, 0.007460079287760],\n    [0.090755300151030, 0.009839147718664],\n    [0.090466641715108, 0.012211472889198],\n    [0.090115981961863, 0.014575428926191],\n    [0.089703561215976, 0.016929395692256],\n    [0.089229662130024, 0.019271759896156],\n    [0.088694609490769, 0.021600916198470],\n    [0.088098769996564, 0.023915268311810],\n    [0.087442552006035, 0.026213230094844],\n    [0.086726405258214, 0.028493226639351],\n    [0.085950820564309, 0.030753695349588],\n    [0.085116329471329, 0.032993087013213],\n    [0.084223503897785, 0.035209866863042],\n    [0.083272955741727, 0.037402515628894],\n    [0.082265336461381, 0.039569530578832],\n    [0.081201336628670, 0.041709426549053],\n    [0.080081685455930, 0.043820736961749],\n    [0.078907150296148, 0.045902014830227],\n    [0.077678536117054, 0.047951833750597],\n    [0.076396684949434, 0.049968788879362],\n    [0.075062475310050, 0.051951497896226],\n    [0.073676821599542, 0.053898601951466],\n    [0.072240673475749, 0.055808766597225],\n    [0.070755015202858, 0.057680682702068],\n    [0.069220864976840, 0.059513067348201],\n    [0.067639274227625, 0.061304664710718],\n    [0.066011326898512, 0.063054246918278],\n    [0.064338138703282, 0.064760614894630],\n    [0.062620856361546, 0.066422599180399],\n    [0.060860656812842, 0.068039060734572],\n    [0.059058746410016, 0.069608891715145],\n    [0.057216360092450, 0.071131016238378],\n    [0.055334760539699, 0.072604391116154],\n    [0.053415237306106, 0.074028006570930],\n    [0.051459105937014, 0.075400886927784],\n    [0.049467707067153, 0.076722091283096],\n    [0.047442405501835, 0.077990714149396],\n    [0.045384589281588, 0.079205886075941],\n    [0.043295668730857, 0.080366774244592],\n    [0.041177075491445, 0.081472583040586],\n    [0.039030261541332, 0.082522554597810],\n    [0.036856698199564, 0.083515969318206],\n    [0.034657875117883, 0.084452146364948],\n    [0.032435299259796, 0.085330444129049],\n    [0.030190493867775, 0.086150260669096],\n    [0.027924997419306, 0.086911034123781],\n    [0.025640362572491, 0.087612243096981],\n    [0.023338155101933, 0.088253407015092],\n    [0.021019952825636, 0.088834086456390],\n    [0.018687344523641, 0.089353883452193],\n    [0.016341928849164, 0.089812441759604],\n    [0.013985313232951, 0.090209447105664],\n    [0.011619112781631, 0.090544627402740],\n    [0.009244949170797, 0.090817752935000],\n    [0.006864449533597, 0.091028636515846],\n    [0.004479245345574, 0.091177133616206],\n    [0.002090971306534, 0.091263142463585]\n];                    ",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n/********************************************************************************\n * Sample offset into the window indicating the beginning of a scalefactor\n * window band\n *\n * scalefactor window band - term for scalefactor bands within a window,\n * given in Table 4.110 to Table 4.128.\n *\n * scalefactor band - a set of spectral coefficients which are scaled by one\n * scalefactor. In case of EIGHT_SHORT_SEQUENCE and grouping a scalefactor band\n * may contain several scalefactor window bands of corresponding frequency. For\n * all other window_sequences scalefactor bands and scalefactor window bands are\n * identical.\n *******************************************************************************/\nconst SWB_OFFSET_1024_96 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  44,  48,  52,  56,  64,\n     72,  80,  88,  96, 108, 120, 132, 144,\n    156, 172, 188, 212, 240, 276, 320, 384,\n    448, 512, 576, 640, 704, 768, 832, 896,\n    960, 1024\n]);\n\nconst SWB_OFFSET_128_96 = new Uint16Array([\n    0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128\n]);\n\nconst SWB_OFFSET_1024_64 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  44,  48,  52,  56,  64,\n     72,  80,  88, 100, 112, 124, 140, 156,\n    172, 192, 216, 240, 268, 304, 344, 384,\n    424, 464, 504, 544, 584, 624, 664, 704,\n    744, 784, 824, 864, 904, 944, 984, 1024\n]);\n\nconst SWB_OFFSET_128_64 = new Uint16Array([\n    0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128\n]);\n\nconst SWB_OFFSET_1024_48 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  48,  56,  64,  72,  80,\n     88,  96, 108, 120, 132, 144, 160, 176,\n    196, 216, 240, 264, 292, 320, 352, 384,\n    416, 448, 480, 512, 544, 576, 608, 640,\n    672, 704, 736, 768, 800, 832, 864, 896,\n    928, 1024\n]);\n\nconst SWB_OFFSET_128_48 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  28,  36,\n    44,  56,  68,  80,  96, 112, 128\n]);\n\nconst SWB_OFFSET_1024_32 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  48,  56,  64,  72,  80,\n     88,  96, 108, 120, 132, 144, 160, 176,\n    196, 216, 240, 264, 292, 320, 352, 384,\n    416, 448, 480, 512, 544, 576, 608, 640,\n    672, 704, 736, 768, 800, 832, 864, 896,\n    928, 960, 992, 1024\n]);\n\nconst SWB_OFFSET_1024_24 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  44,  52,  60,  68,  76,\n     84,  92, 100, 108, 116, 124, 136, 148,\n    160, 172, 188, 204, 220, 240, 260, 284,\n    308, 336, 364, 396, 432, 468, 508, 552,\n    600, 652, 704, 768, 832, 896, 960, 1024\n]);\n\nconst SWB_OFFSET_128_24 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  24,  28,\n    36,  44,  52,  64,  76,  92, 108, 128\n]);\n\nconst SWB_OFFSET_1024_16 = new Uint16Array([\n      0,   8,  16,  24,  32,  40,  48,  56,\n     64,  72,  80,  88, 100, 112, 124, 136,\n    148, 160, 172, 184, 196, 212, 228, 244,\n    260, 280, 300, 320, 344, 368, 396, 424,\n    456, 492, 532, 572, 616, 664, 716, 772,\n    832, 896, 960, 1024\n]);\n\nconst SWB_OFFSET_128_16 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  24,  28,\n    32,  40,  48,  60,  72,  88, 108, 128\n]);\n\nconst SWB_OFFSET_1024_8 = new Uint16Array([\n      0,  12,  24,  36,  48,  60,  72,  84,\n     96, 108, 120, 132, 144, 156, 172, 188,\n    204, 220, 236, 252, 268, 288, 308, 328,\n    348, 372, 396, 420, 448, 476, 508, 544,\n    580, 620, 664, 712, 764, 820, 880, 944,\n    1024\n]);\n\nconst SWB_OFFSET_128_8 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  24,  28,\n    36,  44,  52,  60,  72,  88, 108, 128\n]);\n\nexports.SWB_OFFSET_1024 = [\n    SWB_OFFSET_1024_96,\n    SWB_OFFSET_1024_96,\n    SWB_OFFSET_1024_64,\n    SWB_OFFSET_1024_48,\n    SWB_OFFSET_1024_48,\n    SWB_OFFSET_1024_32,\n    SWB_OFFSET_1024_24,\n    SWB_OFFSET_1024_24,\n    SWB_OFFSET_1024_16,\n    SWB_OFFSET_1024_16,\n    SWB_OFFSET_1024_16,\n    SWB_OFFSET_1024_8\n];\n\nexports.SWB_OFFSET_128 = [\n    SWB_OFFSET_128_96,\n    SWB_OFFSET_128_96,\n    SWB_OFFSET_128_64,\n    SWB_OFFSET_128_48,\n    SWB_OFFSET_128_48,\n    SWB_OFFSET_128_48,\n    SWB_OFFSET_128_24,\n    SWB_OFFSET_128_24,\n    SWB_OFFSET_128_16,\n    SWB_OFFSET_128_16,\n    SWB_OFFSET_128_16,\n    SWB_OFFSET_128_8\n];\n\nexports.SWB_SHORT_WINDOW_COUNT = new Uint8Array([\n    12, 12, 12, 14, 14, 14, 15, 15, 15, 15, 15, 15\n]);\n\nexports.SWB_LONG_WINDOW_COUNT = new Uint8Array([\n    41, 41, 47, 49, 49, 51, 47, 47, 43, 43, 43, 40\n]);\n\n/*\n * Scalefactor lookup table\n */\nexports.SCALEFACTOR_TABLE = (function() {\n    var table = new Float32Array(428);\n    \n    for (var i = 0; i < 428; i++) {\n        table[i] = Math.pow(2, (i - 200) / 4);\n    }\n    \n    return table;\n})();\n\n\n/**\n * Inverse quantization lookup table\n */\nexports.IQ_TABLE = (function() {\n    var table = new Float32Array(8191),\n        four_thirds = 4/3;\n        \n    for (var i = 0; i < 8191; i++) {\n        table[i] = Math.pow(i, four_thirds);\n    }\n    \n    return table;\n})();\n\nexports.SAMPLE_RATES = new Int32Array([\n    96000, 88200, 64000, 48000, 44100, 32000,\n    24000, 22050, 16000, 12000, 11025, 8000, 7350    \n]);\n",
    "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n    \n// Temporal Noise Shaping\nfunction TNS(config) {\n    this.maxBands = TNS_MAX_BANDS_1024[config.sampleIndex]\n    this.nFilt = new Int32Array(8);\n    this.length = new Array(8);\n    this.direction = new Array(8);\n    this.order = new Array(8);\n    this.coef = new Array(8);\n    \n    // Probably could allocate these as needed\n    for (var w = 0; w < 8; w++) {\n        this.length[w] = new Int32Array(4);\n        this.direction[w] = new Array(4);\n        this.order[w] = new Int32Array(4);\n        this.coef[w] = new Array(4);\n        \n        for (var filt = 0; filt < 4; filt++) {\n            this.coef[w][filt] = new Float32Array(TNS_MAX_ORDER);\n        }\n    }\n    \n    this.lpc = new Float32Array(TNS_MAX_ORDER);\n    this.tmp = new Float32Array(TNS_MAX_ORDER);\n}\n\nconst TNS_MAX_ORDER = 20,\n      SHORT_BITS = [1, 4, 3],\n      LONG_BITS = [2, 6, 5];\n      \nconst TNS_COEF_1_3 = [0.00000000, -0.43388373, 0.64278758, 0.34202015],\n\n      TNS_COEF_0_3 = [0.00000000, -0.43388373, -0.78183150, -0.97492790,\n                      0.98480773, 0.86602539, 0.64278758, 0.34202015],\n                      \n      TNS_COEF_1_4 = [0.00000000, -0.20791170, -0.40673664, -0.58778524,\n                      0.67369562, 0.52643216, 0.36124167, 0.18374951],\n                      \n      TNS_COEF_0_4 = [0.00000000, -0.20791170, -0.40673664, -0.58778524,\n                      -0.74314481, -0.86602539, -0.95105654, -0.99452192,\n                      0.99573416, 0.96182561, 0.89516330, 0.79801720,\n                      0.67369562, 0.52643216, 0.36124167, 0.18374951],\n                      \n      TNS_TABLES = [TNS_COEF_0_3, TNS_COEF_0_4, TNS_COEF_1_3, TNS_COEF_1_4];\n      \nconst TNS_MAX_BANDS_1024 = [31, 31, 34, 40, 42, 51, 46, 46, 42, 42, 42, 39, 39],\n      TNS_MAX_BANDS_128 = [9, 9, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14];\n\nTNS.prototype.decode = function(stream, info) {\n    var windowCount = info.windowCount,\n        bits = info.windowSequence === 2 ? SHORT_BITS : LONG_BITS;\n    \n    for (var w = 0; w < windowCount; w++) {\n        if (this.nFilt[w] = stream.read(bits[0])) {\n            var coefRes = stream.read(1),\n                nFilt_w = this.nFilt[w],\n                length_w = this.length[w],\n                order_w = this.order[w],\n                direction_w = this.direction[w],\n                coef_w = this.coef[w];\n            \n            for (var filt = 0; filt < nFilt_w; filt++) {\n                length_w[filt] = stream.read(bits[1]);\n                \n                if ((order_w[filt] = stream.read(bits[2])) > 20)\n                    throw new Error(\"TNS filter out of range: \" + order_w[filt]);\n                \n                if (order_w[filt]) {\n                    direction_w[filt] = !!stream.read(1);\n                    var coefCompress = stream.read(1),\n                        coefLen = coefRes + 3 - coefCompress,\n                        tmp = 2 * coefCompress + coefRes,\n                        table = TNS_TABLES[tmp],\n                        order_w_filt = order_w[filt],\n                        coef_w_filt = coef_w[filt];\n                        \n                    for (var i = 0; i < order_w_filt; i++)\n                        coef_w_filt[i] = table[stream.read(coefLen)];\n                }\n                    \n            }\n        }\n    }\n};\n\nTNS.prototype.process = function(ics, data, decode) {\n    var mmm = Math.min(this.maxBands, ics.maxSFB),\n        lpc = this.lpc,\n        tmp = this.tmp,\n        info = ics.info,\n        windowCount = info.windowCount;\n        \n    for (var w = 0; w < windowCount; w++) {\n        var bottom = info.swbCount,\n            nFilt_w = this.nFilt[w],\n            length_w = this.length[w],\n            order_w = this.order[w],\n            coef_w = this.coef[w],\n            direction_w = this.direction[w];\n        \n        for (var filt = 0; filt < nFilt_w; filt++) {\n            var top = bottom,\n                bottom = Math.max(0, tmp - length_w[filt]),\n                order = order_w[filt];\n                \n            if (order === 0) continue;\n            \n            // calculate lpc coefficients\n            var autoc = coef_w[filt];\n            for (var i = 0; i < order; i++) {\n                var r = -autoc[i];\n                lpc[i] = r;\n\n                for (var j = 0, len = (i + 1) >> 1; j < len; j++) {\n                    var f = lpc[j],\n                        b = lpc[i - 1 - j];\n\n                    lpc[j] = f + r * b;\n                    lpc[i - 1 - j] = b + r * f;\n                }\n            }\n            \n            var start = info.swbOffsets[Math.min(bottom, mmm)],\n                end = info.swbOffsets[Math.min(top, mmm)],\n                size,\n                inc = 1;\n                \n            if ((size = end - start) <= 0) continue;\n            \n            if (direction_w[filt]) {\n                inc = -1;\n                start = end - 1;\n            }\n            \n            start += w * 128;\n            \n            if (decode) {\n                // ar filter\n                for (var m = 0; m < size; m++, start += inc) {\n                    for (var i = 1; i <= Math.min(m, order); i++) {\n                        data[start] -= data[start - i * inc] * lpc[i - 1];\n                    }\n                }\n            } else {\n                // ma filter\n                for (var m = 0; m < size; m++, start += inc) {\n                    tmp[0] = data[start];\n                    \n                    for (var i = 1; i <= Math.min(m, order); i++)\n                        data[start] += tmp[i] * lpc[i - 1];\n                    \n                    for (var i = order; i > 0; i--)\n                        tmp[i] = tmp[i - 1];\n                }\n            }\n        }\n    }\n};\n    \nmodule.exports = TNS;\n",
    "Decoder = require '../decoder'\n\nclass LPCMDecoder extends Decoder\n    Decoder.register('lpcm', LPCMDecoder)\n    \n    readChunk: =>\n        stream = @stream\n        littleEndian = @format.littleEndian\n        chunkSize = Math.min(4096, stream.remainingBytes())\n        samples = chunkSize / (@format.bitsPerChannel / 8) | 0\n        \n        if chunkSize < @format.bitsPerChannel / 8\n            return null\n        \n        if @format.floatingPoint\n            switch @format.bitsPerChannel\n                when 32\n                    output = new Float32Array(samples)\n                    for i in [0...samples] by 1\n                        output[i] = stream.readFloat32(littleEndian)\n                        \n                when 64\n                    output = new Float64Array(samples)\n                    for i in [0...samples] by 1\n                        output[i] = stream.readFloat64(littleEndian)\n                        \n                else\n                    throw new Error 'Unsupported bit depth.'\n            \n        else\n            switch @format.bitsPerChannel\n                when 8\n                    output = new Int8Array(samples)\n                    for i in [0...samples] by 1\n                        output[i] = stream.readInt8()\n                \n                when 16\n                    output = new Int16Array(samples)\n                    for i in [0...samples] by 1\n                        output[i] = stream.readInt16(littleEndian)\n                    \n                when 24\n                    output = new Int32Array(samples)\n                    for i in [0...samples] by 1\n                        output[i] = stream.readInt24(littleEndian)\n                \n                when 32\n                    output = new Int32Array(samples)\n                    for i in [0...samples] by 1\n                        output[i] = stream.readInt32(littleEndian)\n                    \n                else\n                    throw new Error 'Unsupported bit depth.'\n        \n        return output",
    "Decoder = require '../decoder'\n\nclass XLAWDecoder extends Decoder\n    Decoder.register('ulaw', XLAWDecoder)\n    Decoder.register('alaw', XLAWDecoder)\n    \n    SIGN_BIT   = 0x80\n    QUANT_MASK = 0xf\n    SEG_SHIFT  = 4\n    SEG_MASK   = 0x70\n    BIAS       = 0x84\n    \n    init: ->\n        @format.bitsPerChannel = 16\n        @table = table = new Int16Array(256)\n        \n        if @format.formatID is 'ulaw'\n            for i in [0...256]\n                # Complement to obtain normal u-law value.\n                val = ~i\n            \n                # Extract and bias the quantization bits. Then\n                # shift up by the segment number and subtract out the bias.\n                t = ((val & QUANT_MASK) << 3) + BIAS\n                t <<= (val & SEG_MASK) >>> SEG_SHIFT\n            \n                table[i] = if val & SIGN_BIT then BIAS - t else t - BIAS\n                                \n        else\n            for i in [0...256]\n                val = i ^ 0x55\n                t = val & QUANT_MASK\n                seg = (val & SEG_MASK) >>> SEG_SHIFT\n                \n                if seg\n                    t = (t + t + 1 + 32) << (seg + 2)\n                else\n                    t = (t + t + 1) << 3\n                    \n                table[i] = if val & SIGN_BIT then t else -t\n                \n        return\n            \n    readChunk: =>\n        {stream, table} = this\n        \n        samples = Math.min(4096, @stream.remainingBytes())\n        return if samples is 0\n        \n        output = new Int16Array(samples)\n        for i in [0...samples] by 1\n            output[i] = table[stream.readUInt8()]\n            \n        return output",
    "EventEmitter = require './core/events'\nBufferList = require './core/bufferlist'\nStream = require './core/stream'\n\nclass Demuxer extends EventEmitter\n    @probe: (buffer) ->\n        return false\n    \n    constructor: (source, chunk) ->\n        list = new BufferList\n        list.append chunk\n        @stream = new Stream(list)\n        \n        received = false\n        source.on 'data', (chunk) =>\n            received = true\n            list.append chunk\n            @readChunk chunk\n            \n        source.on 'error', (err) =>\n            @emit 'error', err\n            \n        source.on 'end', =>\n            # if there was only one chunk received, read it\n            @readChunk chunk unless received\n            @emit 'end'\n        \n        @seekPoints = []\n        @init()\n            \n    init: ->\n        return\n            \n    readChunk: (chunk) ->\n        return\n        \n    addSeekPoint: (offset, timestamp) ->\n        index = @searchTimestamp timestamp\n        @seekPoints.splice index, 0, \n            offset: offset\n            timestamp: timestamp\n        \n    searchTimestamp: (timestamp, backward) ->\n        low = 0\n        high = @seekPoints.length\n        \n        # optimize appending entries\n        if high > 0 and @seekPoints[high - 1].timestamp < timestamp\n            return high\n        \n        while low < high\n            mid = (low + high) >> 1\n            time = @seekPoints[mid].timestamp\n            \n            if time < timestamp\n                low = mid + 1\n                \n            else if time >= timestamp\n                high = mid\n                \n        if high > @seekPoints.length\n            high = @seekPoints.length\n            \n        return high\n        \n    seek: (timestamp) ->\n        if @format and @format.framesPerPacket > 0 and @format.bytesPerPacket > 0\n            seekPoint =\n                timestamp: timestamp\n                offset: @format.bytesPerPacket * timestamp / @format.framesPerPacket\n                \n            return seekPoint\n        else\n            index = @searchTimestamp timestamp\n            return @seekPoints[index]\n        \n    formats = []\n    @register: (demuxer) ->\n        formats.push demuxer\n            \n    @find: (buffer) ->\n        stream = Stream.fromBuffer(buffer)        \n        for format in formats\n            offset = stream.offset\n            try\n                 return format if format.probe(stream)\n            catch e\n                # an underflow or other error occurred\n                \n            stream.seek(offset)\n            \n        return null\n        \nmodule.exports = Demuxer\n",
    "tables = require '../decoders/aac/tables'\nDemuxer = require '../demuxer'\nBitstream = require '../core/bitstream'\nBuffer = require '../core/buffer'\n\nclass ADTSDemuxer extends Demuxer\n    Demuxer.register(ADTSDemuxer)\n\n    @probe: (stream) ->\n        offset = stream.offset\n\n        # attempt to find ADTS syncword\n        while stream.available(2)\n            if (stream.readUInt16() & 0xfff6) is 0xfff0\n                stream.seek(offset)\n                return true\n\n        stream.seek(offset)\n        return false\n\n    init: ->\n        @bitstream = new Bitstream(@stream)\n\n    # Reads an ADTS header\n    # See http://wiki.multimedia.cx/index.php?title=ADTS\n    @readHeader: (stream) ->\n        throw new Error('Invalid ADTS header.') unless stream.read(12) is 0xfff\n\n        ret = {}\n        stream.advance(3); # mpeg version and layer\n        protectionAbsent = !!stream.read(1)\n\n        ret.profile = stream.read(2) + 1\n        ret.samplingIndex = stream.read(4)\n\n        stream.advance(1); # private\n        ret.chanConfig = stream.read(3)\n        stream.advance(4) # original/copy, home, copywrite, and copywrite start\n\n        ret.frameLength = stream.read(13)\n        stream.advance(11) # fullness\n\n        ret.numFrames = stream.read(2) + 1\n\n        stream.advance(16) if (!protectionAbsent)\n        return ret\n\n    readChunk: ->\n        unless @sentHeader\n            offset = @stream.offset;\n            header = ADTSDemuxer.readHeader(@bitstream)\n            format =\n                formatID: 'aac '\n                sampleRate: tables.SAMPLE_RATES[header.samplingIndex]\n                channelsPerFrame: header.chanConfig\n                bitsPerChannel: 16\n\n            @emit('format', format)\n\n            # generate a magic cookie from the ADTS header\n            cookie = new Uint8Array(2)\n            cookie[0] = (header.profile << 3) | ((header.samplingIndex >> 1) & 7)\n            cookie[1] = ((header.samplingIndex & 1) << 7) | (header.chanConfig << 3)\n            @emit('cookie', new Buffer(cookie))\n\n            @stream.seek(offset)\n            @sentHeader = true\n\n        while @stream.available(1)\n            buffer = @stream.readSingleBuffer(@stream.remainingBytes())\n            @emit('data', buffer)",
    "Demuxer = require '../demuxer'\n\nclass AIFFDemuxer extends Demuxer\n    Demuxer.register(AIFFDemuxer)\n    \n    @probe: (buffer) ->\n        return buffer.peekString(0, 4) is 'FORM' && \n               buffer.peekString(8, 4) in ['AIFF', 'AIFC']\n        \n    readChunk: ->\n        if not @readStart and @stream.available(12)\n            if @stream.readString(4) isnt 'FORM'\n                return @emit 'error', 'Invalid AIFF.'\n                \n            @fileSize = @stream.readUInt32()\n            @fileType = @stream.readString(4)\n            @readStart = true\n            \n            if @fileType not in ['AIFF', 'AIFC']\n                return @emit 'error', 'Invalid AIFF.'\n        \n        while @stream.available(1)\n            if not @readHeaders and @stream.available(8)\n                @type = @stream.readString(4)\n                @len = @stream.readUInt32()\n                \n            switch @type\n                when 'COMM'\n                    return unless @stream.available(@len)\n                    \n                    @format =\n                        formatID: 'lpcm'\n                        channelsPerFrame: @stream.readUInt16()\n                        sampleCount: @stream.readUInt32()\n                        bitsPerChannel: @stream.readUInt16()\n                        sampleRate: @stream.readFloat80()\n                        framesPerPacket: 1\n                        littleEndian: false\n                        floatingPoint: false\n                        \n                    @format.bytesPerPacket = (@format.bitsPerChannel / 8) * @format.channelsPerFrame\n                    \n                    if @fileType is 'AIFC'\n                        format = @stream.readString(4)\n                        \n                        @format.littleEndian = format is 'sowt' and @format.bitsPerChannel > 8\n                        @format.floatingPoint = format in ['fl32', 'fl64']\n                        \n                        format = 'lpcm' if format in ['twos', 'sowt', 'fl32', 'fl64', 'NONE']\n                        @format.formatID = format\n                        @len -= 4\n                        \n                    @stream.advance(@len - 18)\n                    @emit 'format', @format\n                    @emit 'duration', @format.sampleCount / @format.sampleRate * 1000 | 0\n                    \n                when 'SSND'\n                    unless @readSSNDHeader and @stream.available(4)\n                        offset = @stream.readUInt32()\n                        @stream.advance(4) # skip block size\n                        @stream.advance(offset) # skip to data\n                        @readSSNDHeader = true\n                        \n                    buffer = @stream.readSingleBuffer(@len)\n                    @len -= buffer.length\n                    @readHeaders = @len > 0\n                    @emit 'data', buffer\n                    \n                else\n                    return unless @stream.available(@len)\n                    @stream.advance(@len)\n                        \n            @readHeaders = false unless @type is 'SSND'\n            \n        return",
    "Demuxer = require '../demuxer'\n\nclass AUDemuxer extends Demuxer\n    Demuxer.register(AUDemuxer)\n    \n    @probe: (buffer) ->\n        return buffer.peekString(0, 4) is '.snd'\n        \n    bps = [8, 8, 16, 24, 32, 32, 64]\n    bps[26] = 8\n    \n    formats = \n        1: 'ulaw'\n        27: 'alaw'\n        \n    readChunk: ->\n        if not @readHeader and @stream.available(24)\n            if @stream.readString(4) isnt '.snd'\n                return @emit 'error', 'Invalid AU file.'\n                \n            size = @stream.readUInt32()\n            dataSize = @stream.readUInt32()\n            encoding = @stream.readUInt32()\n            \n            @format = \n                formatID: formats[encoding] or 'lpcm'\n                littleEndian: false\n                floatingPoint: encoding in [6, 7]\n                bitsPerChannel: bps[encoding - 1]\n                sampleRate: @stream.readUInt32()\n                channelsPerFrame: @stream.readUInt32()\n                framesPerPacket: 1\n            \n            if not @format.bitsPerChannel?\n                return @emit 'error', 'Unsupported encoding in AU file.'\n            \n            @format.bytesPerPacket = (@format.bitsPerChannel / 8) * @format.channelsPerFrame\n            \n            if dataSize isnt 0xffffffff\n                bytes = @format.bitsPerChannel / 8\n                @emit 'duration', dataSize / bytes / @format.channelsPerFrame / @format.sampleRate * 1000 | 0\n            \n            @emit 'format', @format\n            @readHeader = true\n            \n        if @readHeader\n            while @stream.available(1)\n                @emit 'data', @stream.readSingleBuffer(@stream.remainingBytes())\n                \n        return",
    "Demuxer = require '../demuxer'\nM4ADemuxer = require './m4a'\n\nclass CAFDemuxer extends Demuxer\n    Demuxer.register(CAFDemuxer)\n    \n    @probe: (buffer) ->\n        return buffer.peekString(0, 4) is 'caff'\n        \n    readChunk: ->\n        if not @format and @stream.available(64) # Number out of my behind\n            if @stream.readString(4) isnt 'caff'\n                return @emit 'error', \"Invalid CAF, does not begin with 'caff'\"\n                \n            # skip version and flags\n            @stream.advance(4)\n            \n            if @stream.readString(4) isnt 'desc'\n                return @emit 'error', \"Invalid CAF, 'caff' is not followed by 'desc'\"\n                \n            unless @stream.readUInt32() is 0 and @stream.readUInt32() is 32\n                return @emit 'error', \"Invalid 'desc' size, should be 32\"\n                \n            @format = {}\n            @format.sampleRate = @stream.readFloat64()\n            @format.formatID = @stream.readString(4)\n            \n            flags = @stream.readUInt32()\n            if @format.formatID is 'lpcm'\n                @format.floatingPoint = Boolean(flags & 1)\n                @format.littleEndian = Boolean(flags & 2)\n             \n            @format.bytesPerPacket = @stream.readUInt32()\n            @format.framesPerPacket = @stream.readUInt32()\n            @format.channelsPerFrame = @stream.readUInt32()\n            @format.bitsPerChannel = @stream.readUInt32()\n                \n            @emit 'format', @format\n            \n        while @stream.available(1)\n            unless @headerCache\n                @headerCache =\n                    type: @stream.readString(4)\n                    oversize: @stream.readUInt32() isnt 0\n                    size: @stream.readUInt32()\n                \n                if @headerCache.oversize\n                    return @emit 'error', \"Holy Shit, an oversized file, not supported in JS\"\n            \n            switch @headerCache.type\n                when 'kuki'\n                    if @stream.available(@headerCache.size)\n                        if @format.formatID is 'aac ' # variations needed?\n                            offset = @stream.offset + @headerCache.size\n                            if cookie = M4ADemuxer.readEsds(@stream)\n                                @emit 'cookie', cookie\n                                \n                            @stream.seek offset # skip extra garbage\n                    \n                        else\n                            buffer = @stream.readBuffer(@headerCache.size)\n                            @emit 'cookie', buffer\n                        \n                        @headerCache = null\n                        \n                when 'pakt'\n                    if @stream.available(@headerCache.size)\n                        if @stream.readUInt32() isnt 0\n                            return @emit 'error', 'Sizes greater than 32 bits are not supported.'\n                            \n                        @numPackets = @stream.readUInt32()\n                        \n                        if @stream.readUInt32() isnt 0\n                            return @emit 'error', 'Sizes greater than 32 bits are not supported.'\n                            \n                        @numFrames = @stream.readUInt32()\n                        @primingFrames = @stream.readUInt32()\n                        @remainderFrames = @stream.readUInt32()\n                        \n                        @emit 'duration', @numFrames / @format.sampleRate * 1000 | 0\n                        @sentDuration = true\n                        \n                        byteOffset = 0\n                        sampleOffset = 0\n                        for i in [0...@numPackets] by 1\n                            @addSeekPoint byteOffset, sampleOffset\n                            byteOffset += @format.bytesPerPacket or M4ADemuxer.readDescrLen(@stream)\n                            sampleOffset += @format.framesPerPacket or M4ADemuxer.readDescrLen(@stream)\n                        \n                        @headerCache = null\n                        \n                when 'info'\n                    entries = @stream.readUInt32()\n                    metadata = {}\n                    \n                    for i in [0...entries]\n                        # null terminated strings\n                        key = @stream.readString(null)\n                        value = @stream.readString(null)                        \n                        metadata[key] = value\n                    \n                    @emit 'metadata', metadata\n                    @headerCache = null\n                    \n                when 'data'\n                    unless @sentFirstDataChunk\n                        # skip edit count\n                        @stream.advance(4)\n                        @headerCache.size -= 4\n\n                        # calculate the duration based on bytes per packet if no packet table\n                        if @format.bytesPerPacket isnt 0 and not @sentDuration\n                            @numFrames = @headerCache.size / @format.bytesPerPacket\n                            @emit 'duration', @numFrames / @format.sampleRate * 1000 | 0\n                            \n                        @sentFirstDataChunk = true\n                \n                    buffer = @stream.readSingleBuffer(@headerCache.size)\n                    @headerCache.size -= buffer.length\n                    @emit 'data', buffer\n                    \n                    if @headerCache.size <= 0\n                        @headerCache = null\n                    \n                else\n                    if @stream.available(@headerCache.size)\n                        @stream.advance(@headerCache.size)\n                        @headerCache = null\n                        \n        return",
    "Demuxer = require '../demuxer'\n\nclass M4ADemuxer extends Demuxer\n    Demuxer.register(M4ADemuxer)\n    \n    # common file type identifiers\n    # see http://mp4ra.org/filetype.html for a complete list\n    TYPES = ['M4A ', 'M4P ', 'M4B ', 'M4V ', 'isom', 'mp42', 'qt  ']\n    \n    @probe: (buffer) ->\n        return buffer.peekString(4, 4) is 'ftyp' and\n               buffer.peekString(8, 4) in TYPES\n        \n    init: ->\n        # current atom heirarchy stacks\n        @atoms = []\n        @offsets = []\n        \n        # m4a files can have multiple tracks\n        @track = null\n        @tracks = []\n        \n    # lookup table for atom handlers\n    atoms = {}\n    \n    # lookup table of container atom names\n    containers = {}\n    \n    # declare a function to be used for parsing a given atom name\n    atom = (name, fn) ->        \n        c = []\n        for container in name.split('.').slice(0, -1)\n            c.push container\n            containers[c.join('.')] = true\n            \n        atoms[name] ?= {}\n        atoms[name].fn = fn\n        \n    # declare a function to be called after parsing of an atom and all sub-atoms has completed\n    after = (name, fn) ->\n        atoms[name] ?= {}\n        atoms[name].after = fn\n        \n    readChunk: ->\n        @break = false\n        \n        while @stream.available(1) and not @break\n            # if we're ready to read a new atom, add it to the stack\n            if not @readHeaders\n                return unless @stream.available(8)\n                \n                @len = @stream.readUInt32() - 8\n                @type = @stream.readString(4)\n                \n                continue if @len is 0\n                \n                @atoms.push @type\n                @offsets.push @stream.offset + @len\n                @readHeaders = true\n                \n            # find a handler for the current atom heirarchy\n            path = @atoms.join '.'                \n            handler = atoms[path]\n            \n            if handler?.fn\n                # wait until we have enough data, unless this is the mdat atom\n                return unless @stream.available(@len) or path is 'mdat'\n\n                # call the parser for the atom type\n                handler.fn.call(this)\n                \n                # check if this atom can contain sub-atoms\n                if path of containers\n                    @readHeaders = false\n                    \n            # handle container atoms\n            else if path of containers\n                @readHeaders = false\n                \n            # unknown atom\n            else\n                # wait until we have enough data\n                return unless @stream.available(@len)\n                @stream.advance(@len)\n                \n            # pop completed items from the stack\n            while @stream.offset >= @offsets[@offsets.length - 1]\n                # call after handler\n                handler = atoms[@atoms.join '.']\n                if handler?.after\n                    handler.after.call(this)\n                \n                type = @atoms.pop()\n                @offsets.pop()\n                @readHeaders = false\n                \n    atom 'ftyp', ->\n        if @stream.readString(4) not in TYPES\n            return @emit 'error', 'Not a valid M4A file.'\n        \n        @stream.advance(@len - 4)\n    \n    atom 'moov.trak', ->\n        @track = {}\n        @tracks.push @track\n        \n    atom 'moov.trak.tkhd', ->\n        @stream.advance(4) # version and flags\n        \n        @stream.advance(8) # creation and modification time\n        @track.id = @stream.readUInt32()\n        \n        @stream.advance(@len - 16)\n        \n    atom 'moov.trak.mdia.hdlr', ->\n        @stream.advance(4) # version and flags\n        \n        @stream.advance(4) # component type\n        @track.type = @stream.readString(4)\n        \n        @stream.advance(12) # component manufacturer, flags, and mask\n        @stream.advance(@len - 24) # component name\n    \n    atom 'moov.trak.mdia.mdhd', ->\n        @stream.advance(4) # version and flags\n        @stream.advance(8) # creation and modification dates\n        \n        @track.timeScale = @stream.readUInt32()\n        @track.duration = @stream.readUInt32()\n        \n        @stream.advance(4) # language and quality\n        \n    # corrections to bits per channel, base on formatID\n    # (ffmpeg appears to always encode the bitsPerChannel as 16)\n    BITS_PER_CHANNEL = \n        ulaw: 8\n        alaw: 8\n        in24: 24\n        in32: 32\n        fl32: 32\n        fl64: 64\n        \n    atom 'moov.trak.mdia.minf.stbl.stsd', ->\n        @stream.advance(4) # version and flags\n        \n        numEntries = @stream.readUInt32()\n        \n        # just ignore the rest of the atom if this isn't an audio track\n        if @track.type isnt 'soun'\n            return @stream.advance(@len - 8)\n        \n        if numEntries isnt 1\n            return @emit 'error', \"Only expecting one entry in sample description atom!\"\n            \n        @stream.advance(4) # size\n        \n        format = @track.format = {}\n        format.formatID = @stream.readString(4)\n        \n        @stream.advance(6) # reserved\n        @stream.advance(2) # data reference index\n        \n        version = @stream.readUInt16()\n        @stream.advance(6) # skip revision level and vendor\n        \n        format.channelsPerFrame = @stream.readUInt16()\n        format.bitsPerChannel = @stream.readUInt16()\n        \n        @stream.advance(4) # skip compression id and packet size\n        \n        format.sampleRate = @stream.readUInt16()\n        @stream.advance(2)\n        \n        if version is 1\n            format.framesPerPacket = @stream.readUInt32()\n            @stream.advance(4) # bytes per packet\n            format.bytesPerFrame = @stream.readUInt32()\n            @stream.advance(4) # bytes per sample\n            \n        else if version isnt 0\n            @emit 'error', 'Unknown version in stsd atom'\n            \n        if BITS_PER_CHANNEL[format.formatID]?\n            format.bitsPerChannel = BITS_PER_CHANNEL[format.formatID]\n            \n        format.floatingPoint = format.formatID in ['fl32', 'fl64']\n        format.littleEndian = format.formatID is 'sowt' and format.bitsPerChannel > 8\n        \n        if format.formatID in ['twos', 'sowt', 'in24', 'in32', 'fl32', 'fl64', 'raw ', 'NONE']\n            format.formatID = 'lpcm'\n        \n    atom 'moov.trak.mdia.minf.stbl.stsd.alac', ->\n        @stream.advance(4)\n        @track.cookie = @stream.readBuffer(@len - 4)\n        \n    atom 'moov.trak.mdia.minf.stbl.stsd.esds', ->\n        offset = @stream.offset + @len\n        @track.cookie = M4ADemuxer.readEsds @stream\n        @stream.seek offset # skip garbage at the end \n        \n    atom 'moov.trak.mdia.minf.stbl.stsd.wave.enda', ->\n        @track.format.littleEndian = !!@stream.readUInt16()\n        \n    # reads a variable length integer\n    @readDescrLen: (stream) ->\n        len = 0\n        count = 4\n\n        while count--\n            c = stream.readUInt8()\n            len = (len << 7) | (c & 0x7f)\n            break unless c & 0x80\n\n        return len\n        \n    @readEsds: (stream) ->\n        stream.advance(4) # version and flags\n        \n        tag = stream.readUInt8()\n        len = M4ADemuxer.readDescrLen(stream)\n\n        if tag is 0x03 # MP4ESDescrTag\n            stream.advance(2) # id\n            flags = stream.readUInt8()\n\n            if flags & 0x80 # streamDependenceFlag\n                stream.advance(2)\n\n            if flags & 0x40 # URL_Flag\n                stream.advance stream.readUInt8()\n\n            if flags & 0x20 # OCRstreamFlag\n                stream.advance(2)\n\n        else\n            stream.advance(2) # id\n\n        tag = stream.readUInt8()\n        len = M4ADemuxer.readDescrLen(stream)\n            \n        if tag is 0x04 # MP4DecConfigDescrTag\n            codec_id = stream.readUInt8() # might want this... (isom.c:35)\n            stream.advance(1) # stream type\n            stream.advance(3) # buffer size\n            stream.advance(4) # max bitrate\n            stream.advance(4) # avg bitrate\n\n            tag = stream.readUInt8()\n            len = M4ADemuxer.readDescrLen(stream)\n            \n            if tag is 0x05 # MP4DecSpecificDescrTag\n                return stream.readBuffer(len)\n        \n        return null\n        \n    # time to sample\n    atom 'moov.trak.mdia.minf.stbl.stts', ->\n        @stream.advance(4) # version and flags\n        \n        entries = @stream.readUInt32()\n        @track.stts = []\n        for i in [0...entries] by 1\n            @track.stts[i] =\n                count: @stream.readUInt32()\n                duration: @stream.readUInt32()\n                \n        @setupSeekPoints()\n    \n    # sample to chunk\n    atom 'moov.trak.mdia.minf.stbl.stsc', ->\n        @stream.advance(4) # version and flags\n        \n        entries = @stream.readUInt32()\n        @track.stsc = []\n        for i in [0...entries] by 1\n            @track.stsc[i] = \n                first: @stream.readUInt32()\n                count: @stream.readUInt32()\n                id: @stream.readUInt32()\n                \n        @setupSeekPoints()\n        \n    # sample size\n    atom 'moov.trak.mdia.minf.stbl.stsz', ->\n        @stream.advance(4) # version and flags\n        \n        @track.sampleSize = @stream.readUInt32()\n        entries = @stream.readUInt32()\n        \n        if @track.sampleSize is 0 and entries > 0\n            @track.sampleSizes = []\n            for i in [0...entries] by 1\n                @track.sampleSizes[i] = @stream.readUInt32()\n                \n        @setupSeekPoints()\n    \n    # chunk offsets\n    atom 'moov.trak.mdia.minf.stbl.stco', -> # TODO: co64\n        @stream.advance(4) # version and flags\n        \n        entries = @stream.readUInt32()\n        @track.chunkOffsets = []\n        for i in [0...entries] by 1\n            @track.chunkOffsets[i] = @stream.readUInt32()\n            \n        @setupSeekPoints()\n        \n    # chapter track reference\n    atom 'moov.trak.tref.chap', ->\n        entries = @len >> 2\n        @track.chapterTracks = []\n        for i in [0...entries] by 1\n            @track.chapterTracks[i] = @stream.readUInt32()\n            \n        return\n        \n    # once we have all the information we need, generate the seek table for this track\n    setupSeekPoints: ->\n        return unless @track.chunkOffsets? and @track.stsc? and @track.sampleSize? and @track.stts?\n        \n        stscIndex = 0\n        sttsIndex = 0\n        sttsIndex = 0\n        sttsSample = 0\n        sampleIndex = 0\n        \n        offset = 0\n        timestamp = 0\n        @track.seekPoints = []\n        \n        for position, i in @track.chunkOffsets\n            for j in [0...@track.stsc[stscIndex].count] by 1\n                # push the timestamp and both the physical position in the file\n                # and the offset without gaps from the start of the data\n                @track.seekPoints.push\n                    offset: offset\n                    position: position\n                    timestamp: timestamp\n                \n                size = @track.sampleSize or @track.sampleSizes[sampleIndex++]\n                offset += size\n                position += size\n                timestamp += @track.stts[sttsIndex].duration\n                \n                if sttsIndex + 1 < @track.stts.length and ++sttsSample is @track.stts[sttsIndex].count\n                    sttsSample = 0\n                    sttsIndex++\n                    \n            if stscIndex + 1 < @track.stsc.length and i + 1 is @track.stsc[stscIndex + 1].first\n                stscIndex++\n        \n    after 'moov', ->        \n        # if the mdat block was at the beginning rather than the end, jump back to it\n        if @mdatOffset?\n            @stream.seek @mdatOffset - 8\n            \n        # choose a track\n        for track in @tracks when track.type is 'soun'\n            @track = track\n            break\n            \n        if @track.type isnt 'soun'\n            @track = null\n            return @emit 'error', 'No audio tracks in m4a file.'\n            \n        # emit info\n        @emit 'format', @track.format\n        @emit 'duration', @track.duration / @track.timeScale * 1000 | 0\n        if @track.cookie\n            @emit 'cookie', @track.cookie\n        \n        # use the seek points from the selected track\n        @seekPoints = @track.seekPoints\n        \n    atom 'mdat', ->\n        if not @startedData\n            @mdatOffset ?= @stream.offset\n            \n            # if we haven't read the headers yet, the mdat atom was at the beginning\n            # rather than the end. Skip over it for now to read the headers first, and\n            # come back later.\n            if @tracks.length is 0\n                bytes = Math.min(@stream.remainingBytes(), @len)\n                @stream.advance bytes\n                @len -= bytes\n                return\n            \n            @chunkIndex = 0\n            @stscIndex = 0\n            @sampleIndex = 0\n            @tailOffset = 0\n            @tailSamples = 0\n            \n            @startedData = true\n            \n        # read the chapter information if any\n        unless @readChapters\n            @readChapters = @parseChapters()\n            return if @break = not @readChapters\n            @stream.seek @mdatOffset\n            \n        # get the starting offset\n        offset = @track.chunkOffsets[@chunkIndex] + @tailOffset\n        length = 0\n        \n        # make sure we have enough data to get to the offset\n        unless @stream.available(offset - @stream.offset)\n            @break = true\n            return\n        \n        # seek to the offset\n        @stream.seek(offset)\n        \n        # calculate the maximum length we can read at once\n        while @chunkIndex < @track.chunkOffsets.length\n            # calculate the size in bytes of the chunk using the sample size table\n            numSamples = @track.stsc[@stscIndex].count - @tailSamples\n            chunkSize = 0\n            for sample in [0...numSamples] by 1\n                size = @track.sampleSize or @track.sampleSizes[@sampleIndex]\n                \n                # if we don't have enough data to add this sample, jump out\n                break unless @stream.available(length + size)\n                \n                length += size\n                chunkSize += size\n                @sampleIndex++\n            \n            # if we didn't make it through the whole chunk, add what we did use to the tail\n            if sample < numSamples\n                @tailOffset += chunkSize\n                @tailSamples += sample\n                break\n            else\n                # otherwise, we can move to the next chunk\n                @chunkIndex++\n                @tailOffset = 0\n                @tailSamples = 0\n                \n                # if we've made it to the end of a list of subsequent chunks with the same number of samples,\n                # go to the next sample to chunk entry\n                if @stscIndex + 1 < @track.stsc.length and @chunkIndex + 1 is @track.stsc[@stscIndex + 1].first\n                    @stscIndex++\n                \n                # if the next chunk isn't right after this one, jump out\n                if offset + length isnt @track.chunkOffsets[@chunkIndex]\n                    break\n        \n        # emit some data if we have any, otherwise wait for more\n        if length > 0\n            @emit 'data', @stream.readBuffer(length)\n            @break = @chunkIndex is @track.chunkOffsets.length\n        else\n            @break = true\n            \n    parseChapters: ->\n        return true unless @track.chapterTracks?.length > 0\n\n        # find the chapter track\n        id = @track.chapterTracks[0]\n        for track in @tracks\n            break if track.id is id\n\n        if track.id isnt id\n            @emit 'error', 'Chapter track does not exist.'\n\n        @chapters ?= []\n        \n        # use the seek table offsets to find chapter titles\n        while @chapters.length < track.seekPoints.length\n            point = track.seekPoints[@chapters.length]\n            \n            # make sure we have enough data\n            return false unless @stream.available(point.position - @stream.offset + 32)\n\n            # jump to the title offset\n            @stream.seek point.position\n\n            # read the length of the title string\n            len = @stream.readUInt16()\n            title = null\n            \n            return false unless @stream.available(len)\n            \n            # if there is a BOM marker, read a utf16 string\n            if len > 2\n                bom = @stream.peekUInt16()\n                if bom in [0xfeff, 0xfffe]\n                    title = @stream.readString(len, 'utf16-bom')\n\n            # otherwise, use utf8\n            title ?= @stream.readString(len, 'utf8')\n            \n            # add the chapter title, timestamp, and duration\n            nextTimestamp = track.seekPoints[@chapters.length + 1]?.timestamp ? track.duration\n            @chapters.push\n                title: title\n                timestamp: point.timestamp / track.timeScale * 1000 | 0\n                duration: (nextTimestamp - point.timestamp) / track.timeScale * 1000 | 0\n                \n        # we're done, so emit the chapter data\n        @emit 'chapters', @chapters\n        return true\n        \n    # metadata chunk\n    atom 'moov.udta.meta', ->\n        @metadata = {}        \n        @stream.advance(4) # version and flags\n        \n    # emit when we're done\n    after 'moov.udta.meta', ->\n        @emit 'metadata', @metadata\n\n    # convienience function to generate metadata atom handler\n    meta = (field, name, fn) ->\n        atom \"moov.udta.meta.ilst.#{field}.data\", ->\n            @stream.advance(8)\n            @len -= 8\n            fn.call this, name\n\n    # string field reader\n    string = (field) ->\n        @metadata[field] = @stream.readString(@len, 'utf8')\n\n    # from http://atomicparsley.sourceforge.net/mpeg-4files.html\n    meta '©alb', 'album', string\n    meta '©arg', 'arranger', string\n    meta '©art', 'artist', string\n    meta '©ART', 'artist', string\n    meta 'aART', 'albumArtist', string\n    meta 'catg', 'category', string\n    meta '©com', 'composer', string\n    meta '©cpy', 'copyright', string\n    meta 'cprt', 'copyright', string\n    meta '©cmt', 'comments', string\n    meta '©day', 'releaseDate', string\n    meta 'desc', 'description', string\n    meta '©gen', 'genre', string # custom genres\n    meta '©grp', 'grouping', string\n    meta '©isr', 'ISRC', string\n    meta 'keyw', 'keywords', string\n    meta '©lab', 'recordLabel', string\n    meta 'ldes', 'longDescription', string\n    meta '©lyr', 'lyrics', string\n    meta '©nam', 'title', string\n    meta '©phg', 'recordingCopyright', string\n    meta '©prd', 'producer', string\n    meta '©prf', 'performers', string\n    meta 'purd', 'purchaseDate', string\n    meta 'purl', 'podcastURL', string\n    meta '©swf', 'songwriter', string\n    meta '©too', 'encoder', string\n    meta '©wrt', 'composer', string\n\n    meta 'covr', 'coverArt', (field) ->\n        @metadata[field] = @stream.readBuffer(@len)\n\n    # standard genres\n    genres = [\n        \"Blues\", \"Classic Rock\", \"Country\", \"Dance\", \"Disco\", \"Funk\", \"Grunge\", \n        \"Hip-Hop\", \"Jazz\", \"Metal\", \"New Age\", \"Oldies\", \"Other\", \"Pop\", \"R&B\",\n        \"Rap\", \"Reggae\", \"Rock\", \"Techno\", \"Industrial\", \"Alternative\", \"Ska\", \n        \"Death Metal\", \"Pranks\", \"Soundtrack\", \"Euro-Techno\", \"Ambient\", \n        \"Trip-Hop\", \"Vocal\", \"Jazz+Funk\", \"Fusion\", \"Trance\", \"Classical\", \n        \"Instrumental\", \"Acid\", \"House\", \"Game\", \"Sound Clip\", \"Gospel\", \"Noise\",\n        \"AlternRock\", \"Bass\", \"Soul\", \"Punk\", \"Space\", \"Meditative\", \"Instrumental Pop\", \n        \"Instrumental Rock\", \"Ethnic\", \"Gothic\",  \"Darkwave\", \"Techno-Industrial\", \n        \"Electronic\", \"Pop-Folk\", \"Eurodance\", \"Dream\", \"Southern Rock\", \"Comedy\", \n        \"Cult\", \"Gangsta\", \"Top 40\", \"Christian Rap\", \"Pop/Funk\", \"Jungle\", \n        \"Native American\", \"Cabaret\", \"New Wave\", \"Psychadelic\", \"Rave\", \"Showtunes\",\n        \"Trailer\", \"Lo-Fi\", \"Tribal\", \"Acid Punk\", \"Acid Jazz\", \"Polka\", \"Retro\", \n        \"Musical\", \"Rock & Roll\", \"Hard Rock\", \"Folk\", \"Folk/Rock\", \"National Folk\", \n        \"Swing\", \"Fast Fusion\", \"Bebob\", \"Latin\", \"Revival\", \"Celtic\", \"Bluegrass\",\n        \"Avantgarde\", \"Gothic Rock\", \"Progressive Rock\", \"Psychedelic Rock\", \"Symphonic Rock\",\n        \"Slow Rock\", \"Big Band\", \"Chorus\", \"Easy Listening\", \"Acoustic\", \"Humour\", \"Speech\", \n        \"Chanson\", \"Opera\", \"Chamber Music\", \"Sonata\", \"Symphony\", \"Booty Bass\", \"Primus\", \n        \"Porn Groove\", \"Satire\", \"Slow Jam\", \"Club\", \"Tango\", \"Samba\", \"Folklore\", \"Ballad\", \n        \"Power Ballad\", \"Rhythmic Soul\", \"Freestyle\", \"Duet\", \"Punk Rock\", \"Drum Solo\", \n        \"A Capella\", \"Euro-House\", \"Dance Hall\"\n    ]\n\n    meta 'gnre', 'genre', (field) ->\n        @metadata[field] = genres[@stream.readUInt16() - 1]\n\n    meta 'tmpo', 'tempo', (field) ->\n        @metadata[field] = @stream.readUInt16()\n\n    meta 'rtng', 'rating', (field) ->\n        rating = @stream.readUInt8()\n        @metadata[field] = if rating is 2 then 'Clean' else if rating isnt 0 then 'Explicit' else 'None'\n\n    diskTrack = (field) ->\n        @stream.advance(2)\n        @metadata[field] = @stream.readUInt16() + ' of ' + @stream.readUInt16()\n        @stream.advance(@len - 6)\n\n    meta 'disk', 'diskNumber', diskTrack\n    meta 'trkn', 'trackNumber', diskTrack\n\n    bool = (field) ->\n        @metadata[field] = @stream.readUInt8() is 1\n\n    meta 'cpil', 'compilation', bool\n    meta 'pcst', 'podcast', bool\n    meta 'pgap', 'gapless', bool\n    \nmodule.exports = M4ADemuxer\n",
    "Demuxer = require '../demuxer'\n\nclass WAVEDemuxer extends Demuxer\n    Demuxer.register(WAVEDemuxer)\n    \n    @probe: (buffer) ->\n        return buffer.peekString(0, 4) is 'RIFF' && \n               buffer.peekString(8, 4) is 'WAVE'\n               \n    formats = \n        0x0001: 'lpcm'\n        0x0003: 'lpcm'\n        0x0006: 'alaw'\n        0x0007: 'ulaw'\n               \n    readChunk: ->\n        if not @readStart and @stream.available(12)\n            if @stream.readString(4) isnt 'RIFF'\n                return @emit 'error', 'Invalid WAV file.'\n                \n            @fileSize = @stream.readUInt32(true)\n            @readStart = true\n            \n            if @stream.readString(4) isnt 'WAVE'\n                return @emit 'error', 'Invalid WAV file.'\n                \n        while @stream.available(1)\n            if not @readHeaders and @stream.available(8)\n                @type = @stream.readString(4)\n                @len = @stream.readUInt32(true) # little endian\n                \n            switch @type\n                when 'fmt '\n                    encoding = @stream.readUInt16(true)\n                    if encoding not of formats\n                        return @emit 'error', 'Unsupported format in WAV file.'\n                        \n                    @format = \n                        formatID: formats[encoding]\n                        floatingPoint: encoding is 0x0003\n                        littleEndian: formats[encoding] is 'lpcm'\n                        channelsPerFrame: @stream.readUInt16(true)\n                        sampleRate: @stream.readUInt32(true)\n                        framesPerPacket: 1\n                        \n                    @stream.advance(4) # bytes/sec.\n                    @stream.advance(2) # block align\n                    \n                    @format.bitsPerChannel = @stream.readUInt16(true)\n                    @format.bytesPerPacket = (@format.bitsPerChannel / 8) * @format.channelsPerFrame\n                    \n                    @emit 'format', @format\n\n                    # Advance to the next chunk\n                    @stream.advance(@len - 16)\n                    \n                when 'data'\n                    if not @sentDuration\n                        bytes = @format.bitsPerChannel / 8\n                        @emit 'duration', @len / bytes / @format.channelsPerFrame / @format.sampleRate * 1000 | 0\n                        @sentDuration = true\n                \n                    buffer = @stream.readSingleBuffer(@len)\n                    @len -= buffer.length\n                    @readHeaders = @len > 0\n                    @emit 'data', buffer\n                    \n                else\n                    return unless @stream.available(@len)\n                    @stream.advance(@len)\n                        \n            @readHeaders = false unless @type is 'data'\n            \n        return",
    "#\n# The AudioDevice class is responsible for interfacing with various audio\n# APIs in browsers, and for keeping track of the current playback time\n# based on the device hardware time and the play/pause/seek state\n#\n\nEventEmitter = require './core/events'\n\nclass AudioDevice extends EventEmitter\n    constructor: (@sampleRate, @channels) ->\n        @playing = false\n        @currentTime = 0\n        @_lastTime = 0\n        \n    start: ->\n        return if @playing\n        @playing = true\n        \n        @device ?= AudioDevice.create(@sampleRate, @channels)\n        unless @device\n            throw new Error \"No supported audio device found.\"\n            \n        @_lastTime = @device.getDeviceTime()\n            \n        @_timer = setInterval @updateTime, 200\n        @device.on 'refill', @refill = (buffer) =>\n            @emit 'refill', buffer\n        \n    stop: ->\n        return unless @playing\n        @playing = false\n        \n        @device.off 'refill', @refill\n        clearInterval @_timer\n        \n    destroy: ->\n        @stop()\n        @device.destroy()\n        \n    seek: (@currentTime) ->\n        @_lastTime = @device.getDeviceTime() if @playing\n        @emit 'timeUpdate', @currentTime\n        \n    updateTime: =>\n        time = @device.getDeviceTime()\n        @currentTime += (time - @_lastTime) / @device.sampleRate * 1000 | 0\n        @_lastTime = time\n        @emit 'timeUpdate', @currentTime\n        \n    devices = []\n    @register: (device) ->\n        devices.push(device)\n\n    @create: (sampleRate, channels) ->\n        for device in devices when device.supported\n            return new device(sampleRate, channels)\n\n        return null\n        \nmodule.exports = AudioDevice\n",
    "EventEmitter = require '../core/events'\nAudioDevice = require '../device'\nAVBuffer = require '../core/buffer'\n\nclass MozillaAudioDevice extends EventEmitter\n    AudioDevice.register(MozillaAudioDevice)\n    \n    # determine whether this device is supported by the browser\n    @supported: Audio? and 'mozWriteAudio' of new Audio\n    \n    constructor: (@sampleRate, @channels) ->        \n        @audio = new Audio\n        @audio.mozSetup(@channels, @sampleRate)\n        \n        @writePosition = 0\n        @prebufferSize = @sampleRate / 2\n        @tail = null\n        \n        @timer = createTimer @refill, 100\n        \n    refill: =>\n        if @tail\n            written = @audio.mozWriteAudio(@tail)\n            @writePosition += written\n            \n            if @writePosition < @tail.length\n                @tail = @tail.subarray(written)\n            else    \n                @tail = null\n            \n        currentPosition = @audio.mozCurrentSampleOffset()\n        available = currentPosition + @prebufferSize - @writePosition\n        if available > 0\n            buffer = new Float32Array(available)\n            @emit 'refill', buffer\n            \n            written = @audio.mozWriteAudio(buffer)\n            if written < buffer.length\n                @tail = buffer.subarray(written)\n                \n            @writePosition += written\n            \n        return\n        \n    destroy: ->\n        destroyTimer @timer\n        \n    getDeviceTime: ->\n        return @audio.mozCurrentSampleOffset() / @channels\n    \n    # Use an inline worker to get setInterval\n    # without being clamped in background tabs\n    createTimer = (fn, interval) ->\n        url = AVBuffer.makeBlobURL(\"setInterval(function() { postMessage('ping'); }, #{interval});\")\n        return setInterval fn, interval unless url?\n                \n        worker = new Worker(url)\n        worker.onmessage = fn\n        worker.url = url\n        \n        return worker\n        \n    destroyTimer = (timer) ->\n        if timer.terminate\n            timer.terminate()\n            URL.revokeObjectURL(timer.url)\n        else\n            clearInterval timer",
    "/*\n * This resampler is from XAudioJS: https://github.com/grantgalitz/XAudioJS\n * Planned to be replaced with src.js, eventually: https://github.com/jussi-kalliokoski/src.js\n */\n\n//JavaScript Audio Resampler (c) 2011 - Grant Galitz\nfunction Resampler(fromSampleRate, toSampleRate, channels, outputBufferSize, noReturn) {\n\tthis.fromSampleRate = fromSampleRate;\n\tthis.toSampleRate = toSampleRate;\n\tthis.channels = channels | 0;\n\tthis.outputBufferSize = outputBufferSize;\n\tthis.noReturn = !!noReturn;\n\tthis.initialize();\n}\n\nResampler.prototype.initialize = function () {\n\t//Perform some checks:\n\tif (this.fromSampleRate > 0 && this.toSampleRate > 0 && this.channels > 0) {\n\t\tif (this.fromSampleRate == this.toSampleRate) {\n\t\t\t//Setup a resampler bypass:\n\t\t\tthis.resampler = this.bypassResampler;\t\t//Resampler just returns what was passed through.\n\t\t\tthis.ratioWeight = 1;\n\t\t}\n\t\telse {\n\t\t\tif (this.fromSampleRate < this.toSampleRate) {\n\t\t\t\t/*\n\t\t\t\t\tUse generic linear interpolation if upsampling,\n\t\t\t\t\tas linear interpolation produces a gradient that we want\n\t\t\t\t\tand works fine with two input sample points per output in this case.\n\t\t\t\t*/\n\t\t\t\tthis.compileLinearInterpolationFunction();\n\t\t\t\tthis.lastWeight = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t/*\n\t\t\t\t\tCustom resampler I wrote that doesn't skip samples\n\t\t\t\t\tlike standard linear interpolation in high downsampling.\n\t\t\t\t\tThis is more accurate than linear interpolation on downsampling.\n\t\t\t\t*/\n\t\t\t\tthis.compileMultiTapFunction();\n\t\t\t\tthis.tailExists = false;\n\t\t\t\tthis.lastWeight = 0;\n\t\t\t}\n\t\t\tthis.ratioWeight = this.fromSampleRate / this.toSampleRate;\n\t\t\tthis.initializeBuffers();\n\t\t}\n\t}\n\telse {\n\t\tthrow(new Error(\"Invalid settings specified for the resampler.\"));\n\t}\n};\n\nResampler.prototype.compileLinearInterpolationFunction = function () {\n\tvar toCompile = \"var bufferLength = buffer.length;\\\n\tvar outLength = this.outputBufferSize;\\\n\tif ((bufferLength % \" + this.channels + \") == 0) {\\\n\t\tif (bufferLength > 0) {\\\n\t\t\tvar ratioWeight = this.ratioWeight;\\\n\t\t\tvar weight = this.lastWeight;\\\n\t\t\tvar firstWeight = 0;\\\n\t\t\tvar secondWeight = 0;\\\n\t\t\tvar sourceOffset = 0;\\\n\t\t\tvar outputOffset = 0;\\\n\t\t\tvar outputBuffer = this.outputBuffer;\\\n\t\t\tfor (; weight < 1; weight += ratioWeight) {\\\n\t\t\t\tsecondWeight = weight % 1;\\\n\t\t\t\tfirstWeight = 1 - secondWeight;\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"outputBuffer[outputOffset++] = (this.lastOutput[\" + channel + \"] * firstWeight) + (buffer[\" + channel + \"] * secondWeight);\";\n\t}\n\ttoCompile += \"}\\\n\t\t\tweight -= 1;\\\n\t\t\tfor (bufferLength -= \" + this.channels + \", sourceOffset = Math.floor(weight) * \" + this.channels + \"; outputOffset < outLength && sourceOffset < bufferLength;) {\\\n\t\t\t\tsecondWeight = weight % 1;\\\n\t\t\t\tfirstWeight = 1 - secondWeight;\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"outputBuffer[outputOffset++] = (buffer[sourceOffset\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * firstWeight) + (buffer[sourceOffset + \" + (this.channels + channel) + \"] * secondWeight);\";\n\t}\n\ttoCompile += \"weight += ratioWeight;\\\n\t\t\t\tsourceOffset = Math.floor(weight) * \" + this.channels + \";\\\n\t\t\t}\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"this.lastOutput[\" + channel + \"] = buffer[sourceOffset++];\";\n\t}\n\ttoCompile += \"this.lastWeight = weight % 1;\\\n\t\t\treturn this.bufferSlice(outputOffset);\\\n\t\t}\\\n\t\telse {\\\n\t\t\treturn (this.noReturn) ? 0 : [];\\\n\t\t}\\\n\t}\\\n\telse {\\\n\t\tthrow(new Error(\\\"Buffer was of incorrect sample length.\\\"));\\\n\t}\";\n\tthis.resampler = Function(\"buffer\", toCompile);\n};\n\nResampler.prototype.compileMultiTapFunction = function () {\n\tvar toCompile = \"var bufferLength = buffer.length;\\\n\tvar outLength = this.outputBufferSize;\\\n\tif ((bufferLength % \" + this.channels + \") == 0) {\\\n\t\tif (bufferLength > 0) {\\\n\t\t\tvar ratioWeight = this.ratioWeight;\\\n\t\t\tvar weight = 0;\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"var output\" + channel + \" = 0;\"\n\t}\n\ttoCompile += \"var actualPosition = 0;\\\n\t\t\tvar amountToNext = 0;\\\n\t\t\tvar alreadyProcessedTail = !this.tailExists;\\\n\t\t\tthis.tailExists = false;\\\n\t\t\tvar outputBuffer = this.outputBuffer;\\\n\t\t\tvar outputOffset = 0;\\\n\t\t\tvar currentPosition = 0;\\\n\t\t\tdo {\\\n\t\t\t\tif (alreadyProcessedTail) {\\\n\t\t\t\t\tweight = ratioWeight;\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" = 0;\"\n\t}\n\ttoCompile += \"}\\\n\t\t\t\telse {\\\n\t\t\t\t\tweight = this.lastWeight;\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" = this.lastOutput[\" + channel + \"];\"\n\t}\n\ttoCompile += \"alreadyProcessedTail = true;\\\n\t\t\t\t}\\\n\t\t\t\twhile (weight > 0 && actualPosition < bufferLength) {\\\n\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\\\n\t\t\t\t\tif (weight >= amountToNext) {\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" += buffer[actualPosition++] * amountToNext;\"\n\t}\n\ttoCompile += \"currentPosition = actualPosition;\\\n\t\t\t\t\t\tweight -= amountToNext;\\\n\t\t\t\t\t}\\\n\t\t\t\t\telse {\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" += buffer[actualPosition\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * weight;\"\n\t}\n\ttoCompile += \"currentPosition += weight;\\\n\t\t\t\t\t\tweight = 0;\\\n\t\t\t\t\t\tbreak;\\\n\t\t\t\t\t}\\\n\t\t\t\t}\\\n\t\t\t\tif (weight == 0) {\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"outputBuffer[outputOffset++] = output\" + channel + \" / ratioWeight;\"\n\t}\n\ttoCompile += \"}\\\n\t\t\t\telse {\\\n\t\t\t\t\tthis.lastWeight = weight;\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"this.lastOutput[\" + channel + \"] = output\" + channel + \";\"\n\t}\n\ttoCompile += \"this.tailExists = true;\\\n\t\t\t\t\tbreak;\\\n\t\t\t\t}\\\n\t\t\t} while (actualPosition < bufferLength && outputOffset < outLength);\\\n\t\t\treturn this.bufferSlice(outputOffset);\\\n\t\t}\\\n\t\telse {\\\n\t\t\treturn (this.noReturn) ? 0 : [];\\\n\t\t}\\\n\t}\\\n\telse {\\\n\t\tthrow(new Error(\\\"Buffer was of incorrect sample length.\\\"));\\\n\t}\";\n\tthis.resampler = Function(\"buffer\", toCompile);\n};\n\nResampler.prototype.bypassResampler = function (buffer) {\n\tif (this.noReturn) {\n\t\t//Set the buffer passed as our own, as we don't need to resample it:\n\t\tthis.outputBuffer = buffer;\n\t\treturn buffer.length;\n\t}\n\telse {\n\t\t//Just return the buffer passsed:\n\t\treturn buffer;\n\t}\n};\n\nResampler.prototype.bufferSlice = function (sliceAmount) {\n\tif (this.noReturn) {\n\t\t//If we're going to access the properties directly from this object:\n\t\treturn sliceAmount;\n\t}\n\telse {\n\t\t//Typed array and normal array buffer section referencing:\n\t\ttry {\n\t\t\treturn this.outputBuffer.subarray(0, sliceAmount);\n\t\t}\n\t\tcatch (error) {\n\t\t\ttry {\n\t\t\t\t//Regular array pass:\n\t\t\t\tthis.outputBuffer.length = sliceAmount;\n\t\t\t\treturn this.outputBuffer;\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\t//Nightly Firefox 4 used to have the subarray function named as slice:\n\t\t\t\treturn this.outputBuffer.slice(0, sliceAmount);\n\t\t\t}\n\t\t}\n\t}\n};\n\nResampler.prototype.initializeBuffers = function () {\n\t//Initialize the internal buffer:\n\ttry {\n\t\tthis.outputBuffer = new Float32Array(this.outputBufferSize);\n\t\tthis.lastOutput = new Float32Array(this.channels);\n\t}\n\tcatch (error) {\n\t\tthis.outputBuffer = [];\n\t\tthis.lastOutput = [];\n\t}\n};\n\nmodule.exports = Resampler;\n",
    "EventEmitter = require '../core/events'\nAudioDevice = require '../device'\nResampler = require './resampler'\n\nclass WebAudioDevice extends EventEmitter\n    AudioDevice.register(WebAudioDevice)\n    \n    # determine whether this device is supported by the browser\n    AudioContext = global.AudioContext or global.webkitAudioContext\n    @supported = AudioContext and \n      (typeof AudioContext::[createProcessor = 'createScriptProcessor'] is 'function' or\n      typeof AudioContext::[createProcessor = 'createJavaScriptNode']  is 'function')\n    \n    # Chrome limits the number of AudioContexts that one can create,\n    # so use a lazily created shared context for all playback\n    sharedContext = null\n    \n    constructor: (@sampleRate, @channels) ->\n        @context = sharedContext ?= new AudioContext\n        @deviceSampleRate = @context.sampleRate\n        \n        # calculate the buffer size to read\n        @bufferSize = Math.ceil(4096 / (@deviceSampleRate / @sampleRate) * @channels)\n        @bufferSize += @bufferSize % @channels\n        \n        # if the sample rate doesn't match the hardware sample rate, create a resampler\n        if @deviceSampleRate isnt @sampleRate\n            @resampler = new Resampler(@sampleRate, @deviceSampleRate, @channels, 4096 * @channels)\n\n        @node = @context[createProcessor](4096, @channels, @channels)\n        @node.onaudioprocess = @refill\n        @node.connect(@context.destination)\n        \n    refill: (event) =>\n        outputBuffer = event.outputBuffer\n        channelCount = outputBuffer.numberOfChannels\n        channels = new Array(channelCount)\n        \n        # get output channels\n        for i in [0...channelCount] by 1\n            channels[i] = outputBuffer.getChannelData(i)\n        \n        # get audio data    \n        data = new Float32Array(@bufferSize)\n        @emit 'refill', data\n        \n        # resample if necessary    \n        if @resampler\n            data = @resampler.resampler(data)\n        \n        # write data to output\n        for i in [0...outputBuffer.length] by 1\n            for n in [0...channelCount] by 1\n                channels[n][i] = data[i * channelCount + n]\n                \n        return\n        \n    destroy: ->\n        @node.disconnect(0)\n        \n    getDeviceTime: ->\n        return @context.currentTime * @sampleRate",
    "class Filter\n    constructor: (context, key) ->\n        # default constructor takes a single value\n        # override to take more parameters\n        if context and key\n            Object.defineProperty this, 'value', \n                get: -> context[key]\n        \n    process: (buffer) ->\n        # override this method\n        return\n        \nmodule.exports = Filter\n",
    "Filter = require '../filter'\n\nclass BalanceFilter extends Filter\n    process: (buffer) ->\n        return if @value is 0\n        pan = Math.max(-50, Math.min(50, @value))\n        \n        for i in [0...buffer.length] by 2\n            buffer[i] *= Math.min(1, (50 - pan) / 50)\n            buffer[i + 1] *= Math.min(1, (50 + pan) / 50)\n            \n        return\n        \nmodule.exports = BalanceFilter\n",
    "Filter = require '../filter'\n\nclass VolumeFilter extends Filter\n    process: (buffer) ->\n        return if @value >= 100\n        vol = Math.max(0, Math.min(100, @value)) / 100\n        \n        for i in [0...buffer.length] by 1\n            buffer[i] *= vol\n            \n        return\n        \nmodule.exports = VolumeFilter\n",
    "#\n# The Player class plays back audio data from various sources\n# as decoded by the Asset class.  In addition, it handles\n# common audio filters like panning and volume adjustment,\n# and interfacing with AudioDevices to keep track of the \n# playback time.\n#\n\nEventEmitter = require './core/events'\nAsset = require './asset'\nVolumeFilter = require './filters/volume'\nBalanceFilter = require './filters/balance'\nQueue = require './queue'\nAudioDevice = require './device'\n\nclass Player extends EventEmitter\n    constructor: (@asset) ->\n        @playing = false\n        @buffered = 0\n        @currentTime = 0\n        @duration = 0\n        @volume = 100\n        @pan = 0 # -50 for left, 50 for right, 0 for center\n        @metadata = {}\n        \n        @filters = [\n            new VolumeFilter(this, 'volume')\n            new BalanceFilter(this, 'pan')\n        ]\n        \n        @asset.on 'buffer', (@buffered) =>\n            @emit 'buffer', @buffered\n        \n        @asset.on 'decodeStart', =>\n            @queue = new Queue(@asset)\n            @queue.once 'ready', @startPlaying\n            \n        @asset.on 'format', (@format) =>\n            @emit 'format', @format\n            \n        @asset.on 'metadata', (@metadata) =>\n            @emit 'metadata', @metadata\n            \n        @asset.on 'duration', (@duration) =>\n            @emit 'duration', @duration\n            \n        @asset.on 'error', (error) =>\n            @emit 'error', error\n                \n    @fromURL: (url) ->\n        return new Player Asset.fromURL(url)\n        \n    @fromFile: (file) ->\n        return new Player Asset.fromFile(file)\n        \n    @fromBuffer: (buffer) ->\n        return new Player Asset.fromBuffer(buffer)\n        \n    preload: ->\n        return unless @asset\n        \n        @startedPreloading = true\n        @asset.start(false)\n        \n    play: ->\n        return if @playing\n        \n        unless @startedPreloading\n            @preload()\n        \n        @playing = true\n        @device?.start()\n        \n    pause: ->\n        return unless @playing\n        \n        @playing = false\n        @device?.stop()\n        \n    togglePlayback: ->\n        if @playing\n            @pause()\n        else\n            @play()\n        \n    stop: ->\n        @pause()\n        @asset.stop()\n        @device?.destroy()\n        \n    seek: (timestamp) ->\n        @device?.stop()\n        @queue.once 'ready', =>\n            @device?.seek @currentTime\n            @device?.start() if @playing\n            \n        # convert timestamp to sample number\n        timestamp = (timestamp / 1000) * @format.sampleRate\n            \n        # the actual timestamp we seeked to may differ \n        # from the requested timestamp due to optimizations\n        timestamp = @asset.decoder.seek(timestamp)\n        \n        # convert back from samples to milliseconds\n        @currentTime = timestamp / @format.sampleRate * 1000 | 0\n        \n        @queue.reset()\n        return @currentTime\n        \n    startPlaying: =>\n        frame = @queue.read()\n        frameOffset = 0\n        \n        @device = new AudioDevice(@format.sampleRate, @format.channelsPerFrame)\n        @device.on 'timeUpdate', (@currentTime) =>\n            @emit 'progress', @currentTime\n        \n        @refill = (buffer) =>\n            return unless @playing\n            \n            # try reading another frame if one isn't already available\n            # happens when we play to the end and then seek back\n            if not frame\n                frame = @queue.read()\n                frameOffset = 0\n\n            bufferOffset = 0\n            while frame and bufferOffset < buffer.length\n                max = Math.min(frame.length - frameOffset, buffer.length - bufferOffset)\n                for i in [0...max] by 1\n                    buffer[bufferOffset++] = frame[frameOffset++]\n                \n                if frameOffset is frame.length\n                    frame = @queue.read()\n                    frameOffset = 0\n            \n            # run any applied filters\n            for filter in @filters\n                filter.process(buffer)\n                \n            # if we've run out of data, pause the player\n            unless frame\n                # if this was the end of the track, make\n                # sure the currentTime reflects that\n                if @queue.ended\n                    @currentTime = @duration\n                    @emit 'progress', @currentTime\n                    @emit 'end'\n                    @stop()\n                else\n                    # if we ran out of data in the middle of \n                    # the track, stop the timer but don't change\n                    # the playback state\n                    @device.stop()\n                    \n            return\n        \n        @device.on 'refill', @refill\n        @device.start() if @playing\n        @emit 'ready'\n        \nmodule.exports = Player\n",
    "EventEmitter = require './core/events'\n\nclass Queue extends EventEmitter\n    constructor: (@asset) ->\n        @readyMark = 64\n        @finished = false\n        @buffering = true\n        @ended = false\n        \n        @buffers = []\n        @asset.on 'data', @write\n        @asset.on 'end', =>\n            @ended = true\n            \n        @asset.decodePacket()\n        \n    write: (buffer) =>\n        @buffers.push buffer if buffer\n        \n        if @buffering\n            if @buffers.length >= @readyMark or @ended\n                @buffering = false\n                @emit 'ready'\n            else    \n                @asset.decodePacket()\n            \n    read: ->\n        return null if @buffers.length is 0\n        \n        @asset.decodePacket()\n        return @buffers.shift()\n        \n    reset: ->\n        @buffers.length = 0\n        @buffering = true\n        @asset.decodePacket()\n        \nmodule.exports = Queue\n",
    "EventEmitter = require '../../core/events'\nAVBuffer = require '../../core/buffer'\n\nclass FileSource extends EventEmitter\n    constructor: (@file) ->\n        if not FileReader?\n            return @emit 'error', 'This browser does not have FileReader support.'\n        \n        @offset = 0\n        @length = @file.size\n        @chunkSize = 1 << 20\n        @file[@slice = 'slice'] or @file[@slice = 'webkitSlice'] or @file[@slice = 'mozSlice']\n            \n    start: ->\n        if @reader\n            return @loop() unless @active\n        \n        @reader = new FileReader\n        @active = true\n        \n        @reader.onload = (e) =>\n            buf = new AVBuffer(new Uint8Array(e.target.result))\n            @offset += buf.length\n        \n            @emit 'data', buf   \n            @active = false     \n            @loop() if @offset < @length\n        \n        @reader.onloadend = =>\n            if @offset is @length\n                @emit 'end'\n                @reader = null\n        \n        @reader.onerror = (e) =>\n            @emit 'error', e\n        \n        @reader.onprogress = (e) =>\n            @emit 'progress', (@offset + e.loaded) / @length * 100\n        \n        @loop()\n        \n    loop: ->\n        @active = true\n        endPos = Math.min(@offset + @chunkSize, @length)\n        \n        blob = @file[@slice](@offset, endPos)\n        @reader.readAsArrayBuffer(blob)\n        \n    pause: ->\n        @active = false\n        try\n          @reader?.abort()\n        \n    reset: ->\n        @pause()\n        @offset = 0\n\nmodule.exports = FileSource\n",
    "EventEmitter = require '../../core/events'\nAVBuffer = require '../../core/buffer'\n\nclass HTTPSource extends EventEmitter\n    constructor: (@url) ->\n        @chunkSize = 1 << 20\n        @inflight = false\n        @reset()\n        \n    start: ->\n        if @length\n            return @loop() unless @inflight\n        \n        @inflight = true\n        @xhr = new XMLHttpRequest()\n        \n        @xhr.onload = (event) =>\n            @length = parseInt @xhr.getResponseHeader(\"Content-Length\")                \n            @inflight = false\n            @loop()\n        \n        @xhr.onerror = (err) =>\n            @pause()\n            @emit 'error', err\n            \n        @xhr.onabort = (event) =>\n            @inflight = false\n        \n        @xhr.open(\"HEAD\", @url, true)\n        @xhr.send(null)\n        \n    loop: ->\n        if @inflight or not @length\n            return @emit 'error', 'Something is wrong in HTTPSource.loop'\n            \n        @inflight = true\n        @xhr = new XMLHttpRequest()\n        \n        @xhr.onload = (event) =>\n            if @xhr.response\n                buf = new Uint8Array(@xhr.response)\n            else\n                txt = @xhr.responseText\n                buf = new Uint8Array(txt.length)\n                for i in [0...txt.length]\n                    buf[i] = txt.charCodeAt(i) & 0xff\n\n            buffer = new AVBuffer(buf)\n            @offset += buffer.length\n            \n            @emit 'data', buffer\n            @emit 'end' if @offset >= @length\n\n            @inflight = false\n            @loop() unless @offset >= @length\n            \n        @xhr.onprogress = (event) =>\n            @emit 'progress', (@offset + event.loaded) / @length * 100\n\n        @xhr.onerror = (err) =>\n            @emit 'error', err\n            @pause()\n\n        @xhr.onabort = (event) =>\n            @inflight = false\n\n        @xhr.open(\"GET\", @url, true)\n        @xhr.responseType = \"arraybuffer\"\n\n        endPos = Math.min(@offset + @chunkSize, @length)\n        @xhr.setRequestHeader(\"If-None-Match\", \"webkit-no-cache\")\n        @xhr.setRequestHeader(\"Range\", \"bytes=#{@offset}-#{endPos}\")\n        @xhr.overrideMimeType('text/plain; charset=x-user-defined')\n        @xhr.send(null)\n        \n    pause: ->\n        @inflight = false\n        @xhr?.abort()\n        \n    reset: ->\n        @pause()\n        @offset = 0\n        \nmodule.exports = HTTPSource\n",
    "EventEmitter = require '../core/events'\nBufferList = require '../core/bufferlist'\nAVBuffer = require '../core/buffer'\n\nclass BufferSource extends EventEmitter    \n    constructor: (input) ->\n        # Now make an AV.BufferList\n        if input instanceof BufferList\n            @list = input\n            \n        else\n            @list = new BufferList\n            @list.append new AVBuffer(input)\n            \n        @paused = true\n        \n    setImmediate = global.setImmediate or (fn) ->\n        global.setTimeout fn, 0\n        \n    clearImmediate = global.clearImmediate or (timer) ->\n        global.clearTimeout timer\n        \n    start: ->\n        @paused = false\n        @_timer = setImmediate @loop\n        \n    loop: =>\n        @emit 'progress', (@list.numBuffers - @list.availableBuffers + 1) / @list.numBuffers * 100 | 0\n        @emit 'data', @list.first\n        if @list.advance()\n            setImmediate @loop\n        else\n            @emit 'end'\n        \n    pause: ->\n        clearImmediate @_timer\n        @paused = true\n        \n    reset: ->\n        @pause()\n        @list.rewind()\n        \nmodule.exports = BufferSource\n"
  ]
}